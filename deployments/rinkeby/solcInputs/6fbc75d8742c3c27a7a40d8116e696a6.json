{
  "language": "Solidity",
  "sources": {
    "contracts/base/GelatoMetaBoxBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {MetaTxRequest} from \"../structs/RequestTypes.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract GelatoMetaBoxBase {\n    bytes32 public constant METATX_REQUEST_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"MetaTxRequest(uint256 chainId,address target,bytes data,address feeToken,uint256 paymentType,uint256 maxFee,uint256 gas,address user,address sponsor,uint256 sponsorChainId,uint256 nonce,uint256 deadline)\"\n            )\n        );\n    // solhint-disable-next-line max-line-length\n    string public constant EIP712_DOMAIN_TYPE =\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    function _getDomainSeparator(uint256 _chainId)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(bytes(EIP712_DOMAIN_TYPE)),\n                    keccak256(bytes(\"GelatoMetaBox\")),\n                    keccak256(bytes(\"V1\")),\n                    bytes32(_chainId),\n                    address(this)\n                )\n            );\n    }\n\n    function _verifyMetaTxRequestSignature(\n        MetaTxRequest calldata _req,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal view {\n        bytes32 domainSeparator = _getDomainSeparator(_req.chainId);\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                keccak256(_abiEncodeMetaTxRequest(_req))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"Invalid signature\"\n        );\n    }\n\n    function _isContract(address _account) internal view returns (bool) {\n        return _account.code.length > 0;\n    }\n\n    function _abiEncodeMetaTxRequest(MetaTxRequest calldata _req)\n        internal\n        pure\n        returns (bytes memory encodedReq)\n    {\n        encodedReq = abi.encode(\n            METATX_REQUEST_TYPEHASH,\n            _req.chainId,\n            _req.target,\n            keccak256(_req.data),\n            _req.feeToken,\n            _req.paymentType,\n            _req.maxFee,\n            _req.gas,\n            _req.user,\n            _req.sponsor,\n            _req.sponsorChainId,\n            _req.nonce,\n            _req.deadline\n        );\n    }\n}\n"
    },
    "contracts/structs/RequestTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// Relay request with built-in MetaTx support with signature verification on behalf of user\n// In case a sponsor (other than user) wants to pay for the tx,\n// we will also need to verify sponsor's signature\nstruct MetaTxRequest {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address feeToken;\n    uint256 paymentType;\n    uint256 maxFee;\n    uint256 gas;\n    address user;\n    address sponsor; // could be same as user\n    uint256 sponsorChainId;\n    uint256 nonce;\n    uint256 deadline;\n}\n\n// Similar to MetaTxRequest, but no need to implement user-specific signature verification logic\n// Only sponsor signature is verified in order to ensure integrity of fee payments\nstruct ForwardRequest {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address feeToken;\n    uint256 paymentType;\n    uint256 maxFee;\n    uint256 gas;\n    address sponsor;\n    uint256 sponsorChainId;\n    uint256 nonce;\n    bool enforceSponsorNonce;\n    bool enforceSponsorNonceOrdering;\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/GelatoMetaBoxPullFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {GelatoMetaBoxBase} from \"./base/GelatoMetaBoxBase.sol\";\nimport {NATIVE_TOKEN} from \"./constants/Tokens.sol\";\nimport {MetaTxRequest} from \"./structs/RequestTypes.sol\";\nimport {IGelatoPullFeeRegistry} from \"./interfaces/IGelatoPullFeeRegistry.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {\n    EnumerableSet\n} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract GelatoMetaBoxPullFee is GelatoMetaBoxBase, Ownable, Pausable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public immutable gelato;\n    uint256 public immutable chainId;\n\n    address public pullFeeRegistry;\n    mapping(address => uint256) public nonce;\n    EnumerableSet.AddressSet private _whitelistedDest;\n\n    event LogMetaTxRequestPullFee(\n        address indexed sponsor,\n        address indexed user,\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) Ownable() Pausable() {\n        gelato = _gelato;\n\n        uint256 _chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _chainId := chainid()\n        }\n\n        chainId = _chainId;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function whitelistDest(address _dest) external onlyOwner {\n        require(\n            !_whitelistedDest.contains(_dest),\n            \"Destination address already whitelisted\"\n        );\n\n        _whitelistedDest.add(_dest);\n    }\n\n    function delistDest(address _dest) external onlyOwner {\n        require(\n            _whitelistedDest.contains(_dest),\n            \"Destination address not whitelisted\"\n        );\n\n        _whitelistedDest.remove(_dest);\n    }\n\n    function initPullFeeRegistry(address _pullFeeRegistry) external onlyOwner {\n        require(\n            pullFeeRegistry == address(0),\n            \"pullFeeRegistry already initialized\"\n        );\n\n        pullFeeRegistry = _pullFeeRegistry;\n    }\n\n    /// @notice Relay meta tx request + pull fee from (transferFrom) _req.sponsor's address\n    /// @dev    Assumes that _req.sponsor has approved this contract to spend _req.feeToken\n    /// @param _req Relay request data\n    /// @param _userSignature EIP-712 compliant signature from _req.user\n    /// @param _sponsorSignature EIP-712 compliant signature from _req.sponsor\n    ///                          (can be same as _userSignature)\n    /// @notice   EOA that originates the tx, but does not necessarily pay the relayer\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\n    /// @notice Handles the case of tokens with fee on transfer\n    /// @param _taskId Gelato task id\n    // solhint-disable-next-line function-max-lines\n    function metaTxRequestPullFee(\n        MetaTxRequest calldata _req,\n        bytes calldata _userSignature,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        bytes32 _taskId\n    ) external onlyGelato whenNotPaused {\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            _req.deadline == 0 || _req.deadline >= block.timestamp,\n            \"Request expired\"\n        );\n\n        require(_req.chainId == chainId, \"Wrong chainId\");\n\n        require(_req.paymentType == 3, \"paymentType must be 3\");\n\n        require(\n            _whitelistedDest.contains(_req.target),\n            \"target address not whitelisted\"\n        );\n\n        require(\n            _req.feeToken != NATIVE_TOKEN,\n            \"Native token not supported for paymentType 3\"\n        );\n\n        require(_gelatoFee <= _req.maxFee, \"Executor over-charged\");\n\n        // Verify and increment user's nonce\n        uint256 userNonce = nonce[_req.user];\n        require(_req.nonce == userNonce, \"Invalid nonce\");\n        nonce[_req.user] = userNonce + 1;\n\n        _verifyMetaTxRequestSignature(_req, _userSignature, _req.user);\n        // If is sponsored tx, we also verify sponsor's signature\n        if (_req.user != _req.sponsor) {\n            _verifyMetaTxRequestSignature(\n                _req,\n                _sponsorSignature,\n                _req.sponsor\n            );\n        }\n        // Gas optimization\n        address pullFeeRegistryCopy = pullFeeRegistry;\n        {\n            require(\n                _req.target != pullFeeRegistryCopy,\n                \"Unsafe call to pullFeeRegistry\"\n            );\n            require(_isContract(_req.target), \"Cannot call EOA\");\n            (bool success, ) = _req.target.call{gas: _req.gas}(\n                abi.encodePacked(_req.data, _req.user)\n            );\n            require(success, \"External call failed\");\n        }\n\n        IGelatoPullFeeRegistry(pullFeeRegistryCopy).pullFeeFrom(\n            _req.feeToken,\n            _req.sponsor,\n            gelato, // TODO: Not to gelato, but to fee collection contract\n            _gelatoFee\n        );\n\n        emit LogMetaTxRequestPullFee(\n            _req.sponsor,\n            _req.user,\n            _req.target,\n            _req.feeToken,\n            _gelatoFee,\n            _taskId\n        );\n    }\n\n    function getWhitelistedDest() external view returns (address[] memory) {\n        return _whitelistedDest.values();\n    }\n\n    function getDomainSeparator() public view returns (bytes32) {\n        return _getDomainSeparator(chainId);\n    }\n}\n"
    },
    "contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "contracts/interfaces/IGelatoPullFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IGelatoPullFeeRegistry {\n    function pullFeeFrom(\n        address _feeToken,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GelatoRelayForwarderPullFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {ForwardRequest} from \"./structs/RequestTypes.sol\";\nimport {NATIVE_TOKEN} from \"./constants/Tokens.sol\";\nimport {GelatoRelayForwarderBase} from \"./base/GelatoRelayForwarderBase.sol\";\nimport {GelatoCallUtils} from \"./gelato/GelatoCallUtils.sol\";\nimport {IGelatoPullFeeRegistry} from \"./interfaces/IGelatoPullFeeRegistry.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {\n    EnumerableSet\n} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/// @title Gelato Relay Forwarder Pull Fee contract\n/// @notice Forward calls + fee payment with transferFrom sponsor's address to gelato\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\n// solhint-disable-next-line max-states-count\ncontract GelatoRelayForwarderPullFee is\n    GelatoRelayForwarderBase,\n    Ownable,\n    Pausable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public immutable gelato;\n    uint256 public immutable chainId;\n\n    mapping(address => uint256) public nonce;\n    mapping(bytes32 => bool) public messageDelivered;\n    EnumerableSet.AddressSet private _whitelistedDest;\n    address public pullFeeRegistry;\n\n    event LogForwardRequestPullFee(\n        address indexed sponsor,\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) Ownable() Pausable() {\n        gelato = _gelato;\n\n        uint256 _chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _chainId := chainid()\n        }\n\n        chainId = _chainId;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function whitelistDest(address _dest) external onlyOwner {\n        require(\n            !_whitelistedDest.contains(_dest),\n            \"Destination address already whitelisted\"\n        );\n\n        _whitelistedDest.add(_dest);\n    }\n\n    function delistDest(address _dest) external onlyOwner {\n        require(\n            _whitelistedDest.contains(_dest),\n            \"Destination address not whitelisted\"\n        );\n\n        _whitelistedDest.remove(_dest);\n    }\n\n    function initPullFeeRegistry(address _pullFeeRegistry) external onlyOwner {\n        require(\n            pullFeeRegistry == address(0),\n            \"pullFeeRegistry already initialized\"\n        );\n\n        pullFeeRegistry = _pullFeeRegistry;\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function forwardRequestPullFee(\n        ForwardRequest calldata _req,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        bytes32 _taskId\n    ) external onlyGelato whenNotPaused {\n        require(_req.chainId == chainId, \"Wrong chainId\");\n\n        require(_req.paymentType == 3, \"paymentType must be 3\");\n\n        require(\n            _whitelistedDest.contains(_req.target),\n            \"target address not whitelisted\"\n        );\n\n        require(\n            _req.feeToken != NATIVE_TOKEN,\n            \"Native token not supported for paymentType 3\"\n        );\n\n        require(_gelatoFee <= _req.maxFee, \"Executor over-charged\");\n        // Verify and increment sponsor's nonce\n        // We assume that all security is enforced on _req.target address,\n        // hence we allow the sponsor to submit multiple transactions concurrently\n        // In case one reverts, it won't stop the others from being executed\n\n        // Optionally, the dApp may not want to track smart contract nonces\n        // We allow this option, BUT MAKE SURE _req.target implements strong replay protection!\n        if (_req.enforceSponsorNonce) {\n            if (_req.enforceSponsorNonceOrdering) {\n                // Enforce ordering on nonces,\n                // If tx with nonce n reverts, so will tx with nonce n+1.\n                require(_req.nonce == nonce[_req.sponsor], \"Invalid nonce\");\n                nonce[_req.sponsor] = _req.nonce + 1;\n\n                _verifyForwardRequestSignature(\n                    _req,\n                    _sponsorSignature,\n                    _req.sponsor\n                );\n            } else {\n                // Do not enforce ordering on nonces,\n                // but still enforce replay protection\n                // via uniqueness of message\n                bytes32 message = _verifyForwardRequestSignature(\n                    _req,\n                    _sponsorSignature,\n                    _req.sponsor\n                );\n                require(!messageDelivered[message], \"Task already executed\");\n                messageDelivered[message] = true;\n            }\n        } else {\n            _verifyForwardRequestSignature(\n                _req,\n                _sponsorSignature,\n                _req.sponsor\n            );\n        }\n\n        _verifyForwardRequestSignature(_req, _sponsorSignature, _req.sponsor);\n        // Gas optimization\n        address pullFeeRegistryCopy = pullFeeRegistry;\n\n        require(\n            _req.target != pullFeeRegistryCopy,\n            \"Unsafe call to pullFeeRegistry\"\n        );\n        GelatoCallUtils.safeExternalCall(_req.target, _req.data, _req.gas);\n\n        IGelatoPullFeeRegistry(pullFeeRegistryCopy).pullFeeFrom(\n            _req.feeToken,\n            _req.sponsor,\n            gelato, // TODO: Not to gelato, but to fee collection contract\n            _gelatoFee\n        );\n\n        emit LogForwardRequestPullFee(\n            _req.sponsor,\n            _req.target,\n            _req.feeToken,\n            _gelatoFee,\n            _taskId\n        );\n    }\n\n    function getWhitelistedDest() external view returns (address[] memory) {\n        return _whitelistedDest.values();\n    }\n\n    function getDomainSeparator() public view returns (bytes32) {\n        return _getDomainSeparator(chainId);\n    }\n}\n"
    },
    "contracts/base/GelatoRelayForwarderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {ForwardRequest} from \"../structs/RequestTypes.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract GelatoRelayForwarderBase {\n    bytes32 public constant FORWARD_REQUEST_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"ForwardRequest(uint256 chainId,address target,bytes data,address feeToken,uint256 paymentType,uint256 maxFee,uint256 gas,address sponsor,uint256 sponsorChainId,uint256 nonce,bool enforceSponsorNonce,bool enforceSponsorNonceOrdering)\"\n            )\n        );\n    // solhint-disable-next-line max-line-length\n    string public constant EIP712_DOMAIN_TYPE =\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    function _getDomainSeparator(uint256 _chainId)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(bytes(EIP712_DOMAIN_TYPE)),\n                    keccak256(bytes(\"GelatoRelayForwarder\")),\n                    keccak256(bytes(\"V1\")),\n                    bytes32(_chainId),\n                    address(this)\n                )\n            );\n    }\n\n    function _verifyForwardRequestSignature(\n        ForwardRequest calldata _req,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal view returns (bytes32) {\n        bytes32 domainSeparator = _getDomainSeparator(_req.chainId);\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                keccak256(_abiEncodeForwardRequest(_req))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"Invalid signature\"\n        );\n\n        return digest;\n    }\n\n    function _abiEncodeForwardRequest(ForwardRequest calldata _req)\n        internal\n        pure\n        returns (bytes memory encodedReq)\n    {\n        encodedReq = abi.encode(\n            FORWARD_REQUEST_TYPEHASH,\n            _req.chainId,\n            _req.target,\n            keccak256(_req.data),\n            _req.feeToken,\n            _req.paymentType,\n            _req.maxFee,\n            _req.gas,\n            _req.sponsor,\n            _req.sponsorChainId,\n            _req.nonce,\n            _req.enforceSponsorNonce,\n            _req.enforceSponsorNonceOrdering\n        );\n    }\n}\n"
    },
    "contracts/gelato/GelatoCallUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary GelatoCallUtils {\n    function safeExternalCall(\n        address _dest,\n        bytes calldata _data,\n        uint256 _gas\n    ) internal {\n        require(\n            _dest.code.length > 0,\n            \"GelatoCallUtils.safeExternalCall: _dest cannot be EOA\"\n        );\n\n        (bool success, ) = _dest.call{gas: _gas}(_data);\n        require(\n            success,\n            \"GelatoCallUtils.safeExternalCall: External call failed\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    address private _trustedForwarder;\n\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "contracts/HelloWorld.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {\n    ERC2771Context\n} from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\n\n/// @title HelloWorld with meta transaction support (EIP-2771)\ncontract HelloWorld is ERC2771Context {\n    event Success(\n        address indexed user,\n        address indexed feeToken,\n        string message\n    );\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _gelatoMetaBox) ERC2771Context(_gelatoMetaBox) {}\n\n    function sayHiVanilla(address _feeToken) external {\n        string memory message = \"Hello World\";\n\n        emit Success(msg.sender, _feeToken, message);\n    }\n\n    function sayHi(address _feeToken) external {\n        string memory message = \"Hello World\";\n\n        emit Success(_msgSender(), _feeToken, message);\n    }\n}\n"
    },
    "contracts/GelatoPullFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IGelatoPullFeeRegistry} from \"./interfaces/IGelatoPullFeeRegistry.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {\n    ReentrancyGuard\n} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// @notice Intermediate contract for Gelato Relay to pull due fees.\n///         Sponsors should approve ERC20 allowances to this smart contract\ncontract GelatoPullFeeRegistry is IGelatoPullFeeRegistry, ReentrancyGuard {\n    address public immutable relayForwarderPullFee;\n    address public immutable metaBoxPullFee;\n\n    constructor(address _relayForwarderPullFee, address _metaBoxPullFee) {\n        relayForwarderPullFee = _relayForwarderPullFee;\n        metaBoxPullFee = _metaBoxPullFee;\n    }\n\n    function pullFeeFrom(\n        address _feeToken,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override nonReentrant {\n        require(\n            msg.sender == relayForwarderPullFee || msg.sender == metaBoxPullFee,\n            \"Caller not allowed\"\n        );\n\n        SafeERC20.safeTransferFrom(IERC20(_feeToken), _from, _to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/gelato/GelatoTokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary GelatoTokenUtils {\n    function transferToGelato(\n        address _gelato,\n        address _token,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n\n        if (_token == NATIVE_TOKEN) {\n            (bool success, ) = _gelato.call{value: _amount}(\"\");\n            require(success, \"transferGelato: Gelato ETH transfer failed\");\n        } else {\n            SafeERC20.safeTransfer(IERC20(_token), _gelato, _amount);\n        }\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "contracts/GelatoRelayForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {ForwardRequest} from \"./structs/RequestTypes.sol\";\nimport {GelatoRelayForwarderBase} from \"./base/GelatoRelayForwarderBase.sol\";\nimport {GelatoCallUtils} from \"./gelato/GelatoCallUtils.sol\";\nimport {GelatoTokenUtils} from \"./gelato/GelatoTokenUtils.sol\";\nimport {Proxied} from \"./vendor/hardhat-deploy/Proxied.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @title Gelato Relay Forwarder contract\n/// @notice This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\n// solhint-disable-next-line max-states-count\ncontract GelatoRelayForwarder is\n    Proxied,\n    Initializable,\n    GelatoRelayForwarderBase\n{\n    address public immutable gelato;\n    uint256 public immutable chainId;\n\n    mapping(address => uint256) public nonce;\n    mapping(bytes32 => bool) public messageDelivered;\n    address public gasTank;\n    address public gasTankAdmin;\n\n    event LogForwardCallSyncFee(\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    event LogForwardRequestAsyncGasTankFee(\n        address indexed sponsor,\n        address indexed target,\n        uint256 sponsorChainId,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    event LogForwardRequestSyncGasTankFee(\n        address indexed sponsor,\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    event LogSetGasTank(address oldGasTank, address newGasTank);\n\n    event LogSetGasTankAdmin(address oldGasTankAdmin, address newGasTankAdmin);\n\n    event LogUseGelato1Balance(\n        address indexed sponsor,\n        address indexed service,\n        address indexed feeToken,\n        uint256 sponsorChainId,\n        uint256 nativeToFeeTokenXRateNumerator,\n        uint256 nativeToFeeTokenXRateDenominator,\n        bytes32 taskId\n    );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    modifier onlyGasTankAdmin() {\n        require(msg.sender == gasTankAdmin, \"Only callable by gasTankAdmin\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n\n        uint256 _chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _chainId := chainid()\n        }\n\n        chainId = _chainId;\n    }\n\n    function init(address _gasTankAdmin) external initializer {\n        gasTankAdmin = _gasTankAdmin;\n\n        emit LogSetGasTankAdmin(address(0), _gasTankAdmin);\n    }\n\n    function setGasTank(address _gasTank) external onlyGasTankAdmin {\n        require(_gasTank != address(0), \"Invalid gasTank address\");\n\n        emit LogSetGasTank(gasTank, _gasTank);\n\n        gasTank = _gasTank;\n    }\n\n    function setGasTankAdmin(address _gasTankAdmin) external onlyGasTankAdmin {\n        require(_gasTankAdmin != address(0), \"Invalid gasTankAdmin address\");\n\n        emit LogSetGasTankAdmin(gasTankAdmin, _gasTankAdmin);\n\n        gasTankAdmin = _gasTankAdmin;\n    }\n\n    function forwardCallSyncFee(\n        address _target,\n        bytes calldata _data,\n        address _feeToken,\n        uint256 _gas,\n        uint256 _gelatoFee,\n        bytes32 _taskId\n    ) external onlyGelato {\n        uint256 preBalance = GelatoTokenUtils.getBalance(\n            _feeToken,\n            address(this)\n        );\n        require(_target != gasTank, \"target address cannot be gasTank\");\n        GelatoCallUtils.safeExternalCall(_target, _data, _gas);\n        uint256 postBalance = GelatoTokenUtils.getBalance(\n            _feeToken,\n            address(this)\n        );\n\n        uint256 amount = postBalance - preBalance;\n        require(amount >= _gelatoFee, \"Insufficient fee\");\n        // TODO: change fee collector\n        GelatoTokenUtils.transferToGelato(gelato, _feeToken, amount);\n\n        emit LogForwardCallSyncFee(_target, _feeToken, amount, _taskId);\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function forwardRequestGasTankFee(\n        ForwardRequest calldata _req,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external onlyGelato {\n        require(_req.chainId == chainId, \"Wrong chainId\");\n\n        require(\n            _req.paymentType == 1 || _req.paymentType == 2,\n            \"paymentType must be 1 or 2\"\n        );\n\n        require(_gelatoFee <= _req.maxFee, \"Gelato executor over-charged\");\n\n        // Verify and increment sponsor's nonce\n        // We assume that all security is enforced on _req.target address,\n        // hence we allow the sponsor to submit multiple transactions concurrently\n        // In case one reverts, it won't stop the following ones from being executed\n\n        // Optionally, the dApp may not want to track smart contract nonces\n        // We allow this option, BUT MAKE SURE _req.target IMPLEMENTS STRONG REPLAY PROTECTION!!\n        if (_req.enforceSponsorNonce) {\n            if (_req.enforceSponsorNonceOrdering) {\n                // Enforce ordering on nonces,\n                // If tx with nonce n reverts, so will txs with nonce n+1.\n                require(_req.nonce == nonce[_req.sponsor], \"Invalid nonce\");\n                nonce[_req.sponsor] = _req.nonce + 1;\n\n                _verifyForwardRequestSignature(\n                    _req,\n                    _sponsorSignature,\n                    _req.sponsor\n                );\n            } else {\n                // Do not enforce ordering on nonces,\n                // but still enforce replay protection\n                // via uniqueness of message\n                bytes32 message = _verifyForwardRequestSignature(\n                    _req,\n                    _sponsorSignature,\n                    _req.sponsor\n                );\n\n                require(!messageDelivered[message], \"Task already executed\");\n                messageDelivered[message] = true;\n            }\n        } else {\n            _verifyForwardRequestSignature(\n                _req,\n                _sponsorSignature,\n                _req.sponsor\n            );\n        }\n\n        require(_req.target != gasTank, \"target address cannot be gasTank\");\n        GelatoCallUtils.safeExternalCall(_req.target, _req.data, _req.gas);\n\n        if (_req.paymentType == 1) {\n            // GasTank payment with asynchronous fee crediting\n            emit LogForwardRequestAsyncGasTankFee(\n                _req.sponsor,\n                _req.target,\n                _req.sponsorChainId == 0 ? chainId : _req.sponsorChainId,\n                _req.feeToken,\n                _gelatoFee,\n                _taskId\n            );\n\n            emit LogUseGelato1Balance(\n                _req.sponsor,\n                address(this),\n                _req.feeToken,\n                chainId,\n                _nativeToFeeTokenXRateNumerator,\n                _nativeToFeeTokenXRateDenominator,\n                _taskId\n            );\n        } else {\n            // TODO: deduct balance from GasTank\n            // Credit GasTank fee\n            emit LogForwardRequestSyncGasTankFee(\n                _req.sponsor,\n                _req.target,\n                _req.feeToken,\n                _gelatoFee,\n                _taskId\n            );\n        }\n    }\n\n    function getDomainSeparator() public view returns (bytes32) {\n        return _getDomainSeparator(chainId);\n    }\n}\n"
    },
    "contracts/vendor/hardhat-deploy/Proxied.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Proxied {\n    // solhint-disable-next-line max-line-length\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            ownerAddress := sload(\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\n            )\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GelatoMetaBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {MetaTxRequest} from \"./structs/RequestTypes.sol\";\nimport {GelatoMetaBoxBase} from \"./base/GelatoMetaBoxBase.sol\";\nimport {Proxied} from \"./vendor/hardhat-deploy/Proxied.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @title Gelato Meta Box contract\n/// @notice This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\ncontract GelatoMetaBox is Proxied, Initializable, GelatoMetaBoxBase {\n    address public immutable gelato;\n    uint256 public immutable chainId;\n\n    mapping(address => uint256) public nonce;\n    address public gasTank;\n    address public gasTankAdmin;\n\n    event LogMetaTxRequestAsyncGasTankFee(\n        address indexed sponsor,\n        address indexed user,\n        address indexed target,\n        uint256 sponsorChainId,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    event LogMetaTxRequestSyncGasTankFee(\n        address indexed sponsor,\n        address indexed user,\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    event LogSetGasTank(address oldGasTank, address newGasTank);\n\n    event LogSetGasTankAdmin(address oldGasTankAdmin, address newGasTankAdmin);\n\n    event LogUseGelato1Balance(\n        address indexed sponsor,\n        address indexed service,\n        address indexed feeToken,\n        uint256 sponsorChainId,\n        uint256 nativeToFeeTokenXRateNumerator,\n        uint256 nativeToFeeTokenXRateDenominator,\n        bytes32 taskId\n    );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    modifier onlyGasTankAdmin() {\n        require(msg.sender == gasTankAdmin, \"Only callable by gasTankAdmin\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n\n        uint256 _chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _chainId := chainid()\n        }\n\n        chainId = _chainId;\n    }\n\n    function init(address _gasTankAdmin) external initializer {\n        gasTankAdmin = _gasTankAdmin;\n\n        emit LogSetGasTankAdmin(address(0), _gasTankAdmin);\n    }\n\n    function setGasTank(address _gasTank) external onlyGasTankAdmin {\n        require(_gasTank != address(0), \"Invalid gasTank address\");\n\n        emit LogSetGasTank(gasTank, _gasTank);\n\n        gasTank = _gasTank;\n    }\n\n    function setGasTankAdmin(address _gasTankAdmin) external onlyGasTankAdmin {\n        require(_gasTankAdmin != address(0), \"Invalid gasTankAdmin address\");\n\n        emit LogSetGasTankAdmin(gasTankAdmin, _gasTankAdmin);\n\n        gasTankAdmin = _gasTankAdmin;\n    }\n\n    /// @notice Relay request + async Gas Tank payment deductions (off-chain accounting)\n    /// @param _req Relay request data\n    /// @param _userSignature EIP-712 compliant signature from _req.user\n    /// @param _sponsorSignature EIP-712 compliant signature from _req.sponsor\n    ///                          (can be same as _userSignature)\n    /// @notice   EOA that originates the tx, but does not necessarily pay the relayer\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\n    // solhint-disable-next-line function-max-lines\n    function metaTxRequestGasTankFee(\n        MetaTxRequest calldata _req,\n        bytes calldata _userSignature,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external onlyGelato {\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            _req.deadline == 0 || _req.deadline >= block.timestamp,\n            \"Request expired\"\n        );\n\n        require(_req.chainId == chainId, \"Wrong chainId\");\n\n        require(\n            _req.paymentType == 1 || _req.paymentType == 2,\n            \"paymentType must be 1 or 2\"\n        );\n\n        require(_gelatoFee <= _req.maxFee, \"Executor over-charged\");\n\n        // Verify and increment user's nonce\n        uint256 userNonce = nonce[_req.user];\n        require(_req.nonce == userNonce, \"Invalid nonce\");\n        nonce[_req.user] = userNonce + 1;\n\n        _verifyMetaTxRequestSignature(_req, _userSignature, _req.user);\n        // If is sponsored tx, we also verify sponsor's signature\n        if (_req.user != _req.sponsor) {\n            _verifyMetaTxRequestSignature(\n                _req,\n                _sponsorSignature,\n                _req.sponsor\n            );\n        }\n\n        require(_req.target != gasTank, \"target address cannot be gasTank\");\n        require(_isContract(_req.target), \"Cannot call EOA\");\n        (bool success, ) = _req.target.call{gas: _req.gas}(\n            abi.encodePacked(_req.data, _req.user)\n        );\n        require(success, \"External call failed\");\n\n        if (_req.paymentType == 1) {\n            emit LogMetaTxRequestAsyncGasTankFee(\n                _req.sponsor,\n                _req.user,\n                _req.target,\n                _req.sponsorChainId == 0 ? chainId : _req.sponsorChainId,\n                _req.feeToken,\n                _gelatoFee,\n                _taskId\n            );\n\n            emit LogUseGelato1Balance(\n                _req.sponsor,\n                address(this),\n                _req.feeToken,\n                chainId,\n                _nativeToFeeTokenXRateNumerator,\n                _nativeToFeeTokenXRateDenominator,\n                _taskId\n            );\n        } else {\n            // TODO: deduct balance from GasTank\n            emit LogMetaTxRequestSyncGasTankFee(\n                _req.sponsor,\n                _req.user,\n                _req.target,\n                _req.feeToken,\n                _gelatoFee,\n                _taskId\n            );\n        }\n    }\n\n    function getDomainSeparator() public view returns (bytes32) {\n        return _getDomainSeparator(chainId);\n    }\n}\n"
    },
    "contracts/interfaces/IGelatoMetaBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\nimport {ForwardRequest, MetaTxRequest} from \"../structs/RequestTypes.sol\";\n\ninterface IGelatoMetaBox {\n    function forwardedRequestGasTankFee(\n        ForwardRequest calldata _req,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        bytes32 _taskId\n    ) external;\n\n    function metaTxRequestGasTankFee(\n        MetaTxRequest calldata _req,\n        bytes calldata _userSignature,\n        bytes calldata _sponsorSignature,\n        uint256 _gelatoFee,\n        bytes32 _taskId\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "modelChecker": {
      "targets": [
        "balance",
        "outOfBounds",
        "popEmptyArray",
        "constantCondition",
        "divByZero",
        "assert",
        "underflow",
        "overflow"
      ],
      "showUnproved": true,
      "engine": "none"
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}