{
  "language": "Solidity",
  "sources": {
    "contracts/__mocks__/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// mock class using ERC20\ncontract MockERC20 is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(\n        address owner,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lib/GelatoTokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary GelatoTokenUtils {\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        if (_token == NATIVE_TOKEN) Address.sendValue(payable(_to), _amount);\n        else SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@gelatonetwork/relayer-context/contracts/lib/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    modifier onlyERC20(address _token) {\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\n        _;\n    }\n\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function transferFrom(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal onlyERC20(_token) {\n        if (_amount == 0) return;\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "@gelatonetwork/relayer-context/contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "@gelatonetwork/relayer-context/contracts/RelayerContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\n/**\n * @dev Context variant with RelayerFee support.\n * Use RelayerFeeERC2771Context, if you need ERC2771 _msgSender support.\n * Expects calldata encoding:\n *   abi.encodePacked(bytes fnArgs, address feeCollectorAddress, address feeToken, uint256 fee)\n * Therefore, we're expecting 3 * 32bytes to be appended to normal msgData\n * 32bytes start offsets from calldatasize:\n *     feeCollector: - 32 * 3\n *     feeToken: - 32 * 2\n *     fee: - 32\n */\nabstract contract RelayerContext {\n    using TokenUtils for address;\n\n    /// @dev Only use with a safe whitelisted trusted forwarder contract (e.g. GelatoRelay)\n    address public immutable relayer;\n\n    // RelayerContext\n    uint256 internal constant _FEE_COLLECTOR_START = 3 * 32;\n    uint256 internal constant _FEE_TOKEN_START = 2 * 32;\n    uint256 internal constant _FEE_START = 32;\n\n    modifier onlyRelayer() {\n        require(_isRelayer(msg.sender), \"RelayerContext.onlyRelayer\");\n        _;\n    }\n\n    constructor(address _relayer) {\n        relayer = _relayer;\n    }\n\n    // DANGER! Only use with onlyRelayer `_isRelayer` before transferring\n    function _uncheckedTransferToFeeCollectorUncapped() internal {\n        _getFeeTokenUnchecked().transfer(\n            _getFeeCollectorUnchecked(),\n            _getFeeUnchecked()\n        );\n    }\n\n    // DANGER! Only use with onlyRelayer `_isRelayer` before transferring\n    function _uncheckedTransferToFeeCollectorCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFeeUnchecked();\n        require(\n            fee <= _maxFee,\n            \"RelayerContext._uncheckedTransferToFeeCollectorCapped: maxFee\"\n        );\n        _getFeeTokenUnchecked().transfer(_getFeeCollectorUnchecked(), fee);\n    }\n\n    function _isRelayer(address _forwarder)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return _forwarder == relayer;\n    }\n\n    function _msgData() internal view returns (bytes calldata) {\n        return\n            _isRelayer(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    function _getFeeCollector() internal view onlyRelayer returns (address) {\n        return\n            abi.decode(\n                msg.data[msg.data.length - _FEE_COLLECTOR_START:],\n                (address)\n            );\n    }\n\n    function _getFeeToken() internal view onlyRelayer returns (address) {\n        return\n            abi.decode(\n                msg.data[msg.data.length - _FEE_TOKEN_START:],\n                (address)\n            );\n    }\n\n    function _getFee() internal view onlyRelayer returns (uint256) {\n        return abi.decode(msg.data[msg.data.length - _FEE_START:], (uint256));\n    }\n\n    function _getFeeCollectorUnchecked() internal pure returns (address) {\n        return\n            abi.decode(\n                msg.data[msg.data.length - _FEE_COLLECTOR_START:],\n                (address)\n            );\n    }\n\n    function _getFeeTokenUnchecked() internal pure returns (address) {\n        return\n            abi.decode(\n                msg.data[msg.data.length - _FEE_TOKEN_START:],\n                (address)\n            );\n    }\n\n    function _getFeeUnchecked() internal pure returns (uint256) {\n        return abi.decode(msg.data[msg.data.length - _FEE_START:], (uint256));\n    }\n}\n"
    },
    "contracts/__mocks__/MockRelayerContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    RelayerContext\n} from \"@gelatonetwork/relayer-context/contracts/RelayerContext.sol\";\n\ncontract MockRelayerContext is RelayerContext {\n    event LogMsgData(bytes msgData);\n    event LogFnArgs(bytes fnArgs);\n    event LogContext(address feeCollector, address feeToken, uint256 fee);\n    event LogUncheckedContext(\n        address feeCollector,\n        address feeToken,\n        uint256 fee\n    );\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _mockRelayer) RelayerContext(_mockRelayer) {}\n\n    function emitContext() external {\n        emit LogMsgData(msg.data);\n        emit LogFnArgs(_msgData());\n        emit LogContext(_getFeeCollector(), _getFeeToken(), _getFee());\n        emit LogUncheckedContext(\n            _getFeeCollectorUnchecked(),\n            _getFeeTokenUnchecked(),\n            _getFeeUnchecked()\n        );\n    }\n\n    function onlyRelayerTransferUncapped() external onlyRelayer {\n        _uncheckedTransferToFeeCollectorUncapped();\n    }\n\n    function onlyRelayerTransferCapped(uint256 _maxFee) external onlyRelayer {\n        _uncheckedTransferToFeeCollectorCapped(_maxFee);\n    }\n}\n"
    },
    "contracts/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {IGelatoRelay} from \"./interfaces/IGelatoRelay.sol\";\nimport {IGelato1Balance} from \"./interfaces/IGelato1Balance.sol\";\nimport {GelatoRelayBase} from \"./abstract/GelatoRelayBase.sol\";\nimport {GelatoCallUtils} from \"./lib/GelatoCallUtils.sol\";\nimport {GelatoTokenUtils} from \"./lib/GelatoTokenUtils.sol\";\nimport {\n    _encodeRelayerContext\n} from \"@gelatonetwork/relayer-context/contracts/functions/RelayerUtils.sol\";\nimport {_eip2771Context} from \"./functions/ContextUtils.sol\";\nimport {\n    SponsoredCall,\n    UserAuthCall,\n    SponsoredUserAuthCall\n} from \"./types/CallTypes.sol\";\nimport {IGelato} from \"./interfaces/IGelato.sol\";\n\n/// @title  Gelato Relay contract\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\n/// @dev    This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\n// solhint-disable-next-line max-states-count\ncontract GelatoRelay is IGelatoRelay, IGelato1Balance, GelatoRelayBase {\n    using GelatoCallUtils for address;\n    using GelatoTokenUtils for address;\n\n    //solhint-disable-next-line const-name-snakecase\n    string public constant name = \"GelatoRelay\";\n    //solhint-disable-next-line const-name-snakecase\n    string public constant version = \"1\";\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _gelato) GelatoRelayBase(_gelato) {}\n\n    // TO DO: after RelayerContext is properly implemented on Gelato\n    // remove _feeToken and _fee and expect _data to be Context encoded.\n    /// @notice Relay call with Synchronous Payment\n    /// @notice The target contract pays Gelato during the call forward\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\n    /// @param _target Target smart contract\n    /// @param _data Payload for call on _target\n    /// @param _feeToken Payment can be done in native and ERC-20 tokens\n    /// @param _taskId Unique task identifier generated by gelato\n    function callWithSyncFee(\n        address _target,\n        bytes calldata _data,\n        address _feeToken,\n        uint256 _fee,\n        bytes32 _taskId\n    ) external onlyGelato {\n        uint256 preBalance = _feeToken.getBalance(msg.sender);\n\n        // TO DO: remove hacky way and replace with\n        // implementation that _encodes RelayerContext on Gelato\n        _target.revertingContractCall(\n            _encodeRelayerContext(_data, msg.sender, _feeToken, _fee),\n            \"GelatoRelay.callWithSyncFee:\"\n        );\n\n        uint256 postBalance = _feeToken.getBalance(msg.sender);\n\n        emit LogCallWithSyncFee(\n            _target,\n            _feeToken,\n            postBalance - preBalance,\n            _taskId\n        );\n    }\n\n    /// @notice Relay call + One Balance payment - with sponsor authentication\n    /// @notice Sponsor signature allows for payment via sponsor's 1Balance balance\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\n    /// @param _call Relay call data packed into SponsoredCall struct\n    /// @notice Oracle value for exchange rate between native tokens and fee token\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\n    /// @param _taskId Unique task identifier generated by gelato\n    // solhint-disable-next-line function-max-lines\n    function sponsoredCall(\n        SponsoredCall calldata _call,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external onlyGelato {\n        // CHECKS\n        _requireChainId(_call.chainId, \"GelatoRelay.sponsoredCall:\");\n\n        // INTERACTIONS\n        _call.target.revertingContractCall(\n            _call.data,\n            \"GelatoRelay.sponsoredCall:\"\n        );\n\n        emit LogUseGelato1Balance(\n            _call.sponsor,\n            _call.target,\n            _call.feeToken,\n            _call.oneBalanceChainId,\n            _nativeToFeeTokenXRateNumerator,\n            _nativeToFeeTokenXRateDenominator,\n            _taskId\n        );\n    }\n\n    /// @notice Relay call + One Balance payment - with ONLY user authentication.\n    /// @notice The user here is paying for themselves, no external sponsor\n    /// @notice User signature allows for payment via user's 1Balance balance\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\n    /// @dev    on their end via encoding into _call.data.\n    /// @param _call Relay call data packed into UserAuthCall struct\n    /// @param _userSignature EIP-712 compliant signature from _call.user\n    /// @notice Oracle value for exchange rate between native tokens and fee token\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\n    /// @param _taskId Unique task identifier generated by gelato\n    // solhint-disable-next-line function-max-lines\n    function userAuthCall(\n        UserAuthCall calldata _call,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external onlyGelato {\n        // CHECKS\n        _requireChainId(_call.chainId, \"GelatoRelay.userAuthCall:\");\n\n        uint256 storedUserNonce = userNonce[_call.user];\n\n        // For the user, we enforce nonce ordering\n        _requireUserBasics(\n            _call.userNonce,\n            storedUserNonce,\n            _call.userDeadline,\n            \"GelatoRelay.userAuthCall:\"\n        );\n\n        _requireUserAuthCallSignature(\n            _getDomainSeparator(),\n            _call,\n            _userSignature,\n            _call.user\n        );\n\n        // EFFECTS\n        userNonce[_call.user] = storedUserNonce + 1;\n\n        // INTERACTIONS\n        _call.target.revertingContractCall(\n            _eip2771Context(_call.data, _call.user),\n            \"GelatoRelay.userAuthCall:\"\n        );\n\n        emit LogUseGelato1Balance(\n            _call.user,\n            _call.target,\n            _call.feeToken,\n            _call.oneBalanceChainId,\n            _nativeToFeeTokenXRateNumerator,\n            _nativeToFeeTokenXRateDenominator,\n            _taskId\n        );\n    }\n\n    /// @notice Relay call + One Balance payment - with BOTH sponsor and user authentication\n    /// @notice Both sponsor and user signature allows for payment via sponsor's 1Balance balance\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\n    /// @dev    on their end via encoding into _call.data.\n    /// @param _call Relay call data packed into SponsoredUserAuthCall struct\n    /// @param _userSignature EIP-712 compliant signature from _call.user\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\n    /// @param _taskId Unique task identifier generated by gelato\n    // solhint-disable-next-line function-max-lines\n    function sponsoredUserAuthCall(\n        SponsoredUserAuthCall calldata _call,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external onlyGelato {\n        // CHECKS\n        _requireChainId(_call.chainId, \"GelatoRelay.sponsoredUserAuthCall:\");\n\n        uint256 storedUserNonce = userNonce[_call.user];\n\n        // For the user, we enforce nonce ordering\n        _requireUserBasics(\n            _call.userNonce,\n            storedUserNonce,\n            _call.userDeadline,\n            \"GelatoRelay.sponsoredUserAuthCall:\"\n        );\n\n        bytes32 domainSeparator = _getDomainSeparator();\n\n        // Verify user's signature\n        _requireSponsoredUserAuthCallSignature(\n            domainSeparator,\n            _call,\n            _userSignature,\n            _call.user\n        );\n\n        // EFFECTS\n        userNonce[_call.user] = storedUserNonce + 1;\n\n        // INTERACTIONS\n        _call.target.revertingContractCall(\n            _eip2771Context(_call.data, _call.user),\n            \"GelatoRelay.sponsoredUserAuthCall:\"\n        );\n\n        emit LogUseGelato1Balance(\n            _call.sponsor,\n            _call.target,\n            _call.feeToken,\n            _call.oneBalanceChainId,\n            _nativeToFeeTokenXRateNumerator,\n            _nativeToFeeTokenXRateDenominator,\n            _taskId\n        );\n    }\n\n    //solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _getDomainSeparator();\n    }\n\n    function _getDomainSeparator() internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        bytes(\n                            //solhint-disable-next-line max-line-length\n                            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                        )\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(version)),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n}\n"
    },
    "contracts/interfaces/IGelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {\n    SponsoredCall,\n    UserAuthCall,\n    SponsoredUserAuthCall\n} from \"../types/CallTypes.sol\";\n\ninterface IGelatoRelay {\n    event LogCallWithSyncFee(\n        address indexed target,\n        address feeToken,\n        uint256 fee,\n        bytes32 taskId\n    );\n\n    function callWithSyncFee(\n        address _target,\n        bytes calldata _data,\n        address _feeToken,\n        uint256 _fee,\n        bytes32 _taskId\n    ) external;\n\n    function sponsoredCall(\n        SponsoredCall calldata _call,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external;\n\n    function userAuthCall(\n        UserAuthCall calldata _call,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external;\n\n    function sponsoredUserAuthCall(\n        SponsoredUserAuthCall calldata _call,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _taskId\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGelato1Balance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IGelato1Balance {\n    event LogUseGelato1Balance(\n        address indexed sponsor,\n        address indexed target,\n        address indexed feeToken,\n        uint256 sponsorChainId,\n        uint256 nativeToFeeTokenXRateNumerator,\n        uint256 nativeToFeeTokenXRateDenominator,\n        bytes32 taskId\n    );\n}\n"
    },
    "contracts/abstract/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {IGelatoRelayBase} from \"../interfaces/IGelatoRelayBase.sol\";\nimport {GelatoString} from \"../lib/GelatoString.sol\";\nimport {\n    SponsoredCall,\n    UserAuthCall,\n    SponsoredUserAuthCall\n} from \"../types/CallTypes.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract GelatoRelayBase is IGelatoRelayBase {\n    using GelatoString for string;\n\n    mapping(address => uint256) public userNonce;\n\n    address public immutable gelato;\n\n    bytes32 public constant SPONSORED_CALL_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"SponsoredCall(uint256 chainId,address target,bytes data,address sponsor,address feeToken,uint256 oneBalanceChainId)\"\n            )\n        );\n\n    bytes32 public constant USER_AUTH_CALL_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"UserAuthCall(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline,address feeToken,uint256 oneBalanceChainId)\"\n            )\n        );\n\n    bytes32 public constant SPONSORED_USER_AUTH_CALL_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"SponsoredUserAuthCall(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline,address sponsor,address feeToken,uint256 oneBalanceChainId)\"\n            )\n        );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n    }\n\n    function _requireChainId(uint256 _chainId, string memory _errorTrace)\n        internal\n        view\n    {\n        require(_chainId == block.chainid, _errorTrace.suffix(\"chainid\"));\n    }\n\n    function _requireUserBasics(\n        uint256 _callUserNonce,\n        uint256 _storedUserNonce,\n        uint256 _userDeadline,\n        string memory _errorTrace\n    ) internal view {\n        require(\n            _callUserNonce == _storedUserNonce,\n            _errorTrace.suffix(\"nonce\")\n        );\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            _userDeadline == 0 || _userDeadline >= block.timestamp,\n            _errorTrace.suffix(\"deadline\")\n        );\n    }\n\n    function _requireSponsoredCallSignature(\n        bytes32 _domainSeparator,\n        SponsoredCall calldata _call,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal pure returns (bytes32 digest) {\n        digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(_abiEncodeSponsoredCall(_call))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"GelatoRelayBase1Balance._requireSponsoredCallSignature\"\n        );\n    }\n\n    function _requireUserAuthCallSignature(\n        bytes32 _domainSeparator,\n        UserAuthCall calldata _call,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal pure {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(_abiEncodeUserAuthCall(_call))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"GelatoRelayBase1Balance._requireUserAuthCallSignature\"\n        );\n    }\n\n    function _requireSponsoredUserAuthCallSignature(\n        bytes32 _domainSeparator,\n        SponsoredUserAuthCall calldata _call,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal pure returns (bytes32 digest) {\n        digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(_abiEncodeSponsoredUserAuthCall(_call))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"GelatoRelayBase1Balance._requireSponsoredUserAuthCallSignature\"\n        );\n    }\n\n    function _abiEncodeSponsoredCall(SponsoredCall calldata _call)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encode(\n                SPONSORED_CALL_TYPEHASH,\n                _call.chainId,\n                _call.target,\n                keccak256(_call.data),\n                _call.sponsor,\n                _call.feeToken,\n                _call.oneBalanceChainId\n            );\n    }\n\n    function _abiEncodeUserAuthCall(UserAuthCall calldata _call)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encode(\n                USER_AUTH_CALL_TYPEHASH,\n                _call.chainId,\n                _call.target,\n                keccak256(_call.data),\n                _call.user,\n                _call.userNonce,\n                _call.userDeadline,\n                _call.feeToken,\n                _call.oneBalanceChainId\n            );\n    }\n\n    function _abiEncodeSponsoredUserAuthCall(\n        SponsoredUserAuthCall calldata _call\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encode(\n                SPONSORED_USER_AUTH_CALL_TYPEHASH,\n                _call.chainId,\n                _call.target,\n                keccak256(_call.data),\n                _call.user,\n                _call.userNonce,\n                _call.userDeadline,\n                _call.sponsor,\n                _call.feeToken,\n                _call.oneBalanceChainId\n            );\n    }\n}\n"
    },
    "contracts/lib/GelatoCallUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {GelatoBytes} from \"./GelatoBytes.sol\";\n\nlibrary GelatoCallUtils {\n    using GelatoBytes for bytes;\n\n    function revertingContractCall(\n        address _contract,\n        bytes memory _data,\n        string memory _errorMsg\n    ) internal returns (bytes memory returndata) {\n        bool success;\n        (success, returndata) = _contract.call(_data);\n\n        // solhint-disable-next-line max-line-length\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(\n                    isContract(_contract),\n                    string(abi.encodePacked(_errorMsg, \"Call to non contract\"))\n                );\n            }\n        } else {\n            returndata.revertWithError(_errorMsg);\n        }\n    }\n\n    // solhint-disable-next-line max-line-length\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n}\n"
    },
    "@gelatonetwork/relayer-context/contracts/functions/RelayerUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nfunction _encodeRelayerContext(\n    bytes calldata _fnArgs,\n    address _feeCollector,\n    address _feeToken,\n    uint256 _fee\n) pure returns (bytes memory) {\n    return\n        abi.encodePacked(_fnArgs, abi.encode(_feeCollector, _feeToken, _fee));\n}\n\nfunction _encodeRelayerContextERC2771(\n    bytes calldata _fnArgs,\n    address _feeCollector,\n    address _feeToken,\n    uint256 _fee,\n    address _sender\n) pure returns (bytes memory) {\n    return\n        abi.encodePacked(\n            _fnArgs,\n            abi.encode(_feeCollector, _feeToken, _fee, _sender)\n        );\n}\n"
    },
    "contracts/functions/ContextUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\nfunction _eip2771Context(bytes calldata _data, address _msgSender)\n    pure\n    returns (bytes memory)\n{\n    return abi.encodePacked(_data, _msgSender);\n}\n"
    },
    "contracts/types/CallTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n// No need to implement user-specific signature verification\n// Only sponsor signature is verified in order to ensure integrity of fee payments\nstruct SponsoredCall {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address sponsor;\n    address feeToken;\n    uint256 oneBalanceChainId;\n}\n\n// When the user pays for themselves, so only user signature verification required\nstruct UserAuthCall {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address user;\n    uint256 userNonce;\n    uint256 userDeadline;\n    address feeToken;\n    uint256 oneBalanceChainId;\n}\n\n// Relay call with built-in support with signature verification on behalf of user and sponsor\n// Both user and sponsor signatures are verified\n// The sponsor pays for the relay call\nstruct SponsoredUserAuthCall {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address user;\n    uint256 userNonce;\n    uint256 userDeadline;\n    address sponsor;\n    address feeToken;\n    uint256 oneBalanceChainId;\n}\n"
    },
    "contracts/interfaces/IGelato.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IGelato {\n    function getFeeCollector() external view returns (address feeCollector);\n}\n"
    },
    "contracts/interfaces/IGelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n// solhint-disable func-name-mixedcase\ninterface IGelatoRelayBase {\n    function userNonce(address _user) external view returns (uint256);\n\n    function gelato() external view returns (address);\n\n    function SPONSORED_CALL_TYPEHASH() external pure returns (bytes32);\n\n    function USER_AUTH_CALL_TYPEHASH() external pure returns (bytes32);\n\n    function SPONSORED_USER_AUTH_CALL_TYPEHASH()\n        external\n        pure\n        returns (bytes32);\n}\n"
    },
    "contracts/lib/GelatoString.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nlibrary GelatoString {\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\n        internal\n        pure\n    {\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\n    }\n\n    function prefix(string memory _second, string memory _first)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(abi.encodePacked(_first, _second));\n    }\n\n    function suffix(string memory _first, string memory _second)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(abi.encodePacked(_first, _second));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/lib/GelatoBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nlibrary GelatoBytes {\n    function calldataSliceSelector(bytes calldata _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function memorySliceSelector(bytes memory _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\n            } else {\n                revert(\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"))\n                );\n            }\n        } else {\n            revert(\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"))\n            );\n        }\n    }\n\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n        returns (string memory)\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\n            } else {\n                return\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"));\n            }\n        } else {\n            return\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"));\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}