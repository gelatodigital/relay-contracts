{
  "address": "0xC5a998D0b5eB81bb3C9244152025e074c5ECf5Bb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogCallWithSyncFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sponsorChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_AUTH_CALL_1BALANCE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "callWithSyncFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorSalt",
              "type": "uint256"
            },
            {
              "internalType": "enum PaymentType",
              "name": "paymentType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oneBalanceChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct SponsorAuthCallWith1Balance",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_sponsorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "sponsorAuthCallWith1Balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDeadline",
              "type": "uint256"
            },
            {
              "internalType": "enum PaymentType",
              "name": "paymentType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oneBalanceChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserAuthCallWith1Balance",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "userAuthCallWith1Balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDeadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorSalt",
              "type": "uint256"
            },
            {
              "internalType": "enum PaymentType",
              "name": "paymentType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oneBalanceChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserSponsorAuthCallWith1Balance",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_sponsorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "userSponsorAuthCallWith1Balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "wasCallSponsoredAlready",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bda6bdb30108e50fbfa876de97364a6cbb08edd975f3effc6a5a2b35abaac84",
  "receipt": {
    "to": null,
    "from": "0xd1Ac051Dc0E1366502eF3Fe4D754fbeC6986a177",
    "contractAddress": "0xC5a998D0b5eB81bb3C9244152025e074c5ECf5Bb",
    "transactionIndex": 1,
    "gasUsed": "2405440",
    "logsBloom": "0x
    "blockHash": "0xa820c227aea28759799ef7bef5fea6c0b06168c116dc556ea6ccaf3f2a0adc50",
    "transactionHash": "0x1bda6bdb30108e50fbfa876de97364a6cbb08edd975f3effc6a5a2b35abaac84",
    "logs": [],
    "blockNumber": 13332337,
    "cumulativeGasUsed": "2436773",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91f2A140cA47DdF438B9c583b7E71987525019bB"
  ],
  "numDeployments": 1,
  "solcInputHash": "2cbb4ead68613d0253d7cd1cc825e298",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogCallWithSyncFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_AUTH_CALL_1BALANCE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"callWithSyncFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorSalt\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct SponsorAuthCallWith1Balance\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sponsorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"sponsorAuthCallWith1Balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeadline\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct UserAuthCallWith1Balance\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"userAuthCallWith1Balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorSalt\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct UserSponsorAuthCallWith1Balance\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sponsorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"userSponsorAuthCallWith1Balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"wasCallSponsoredAlready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here\",\"kind\":\"dev\",\"methods\":{\"callWithSyncFee(address,bytes,address,uint256,bytes32)\":{\"details\":\"This is the most straightforward use case, and `transfer` handles token payments.\",\"params\":{\"_data\":\"Payload for call on _target\",\"_feeToken\":\"Payment can be done in native and ERC-20 tokens\",\"_target\":\"Target smart contract\",\"_taskId\":\"Unique task identifier generated by gelato\"}},\"sponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_call\":\"Relay call data packed into SponsorAuthCall struct\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\",\"_sponsorSignature\":\"EIP-712 compliant signature from _call.sponsor\",\"_taskId\":\"Unique task identifier generated by gelato\"}},\"userAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.\",\"params\":{\"_call\":\"Relay call data packed into UserAuthCall struct\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\",\"_taskId\":\"Unique task identifier generated by gelato\",\"_userSignature\":\"EIP-712 compliant signature from _call.user\"}},\"userSponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,address,uint256,uint8,address,uint256),bytes,bytes,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.\",\"params\":{\"_call\":\"Relay call data packed into UserSponsorAuthCall struct\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\",\"_sponsorSignature\":\"EIP-712 compliant signature from _call.sponsor\",\"_taskId\":\"Unique task identifier generated by gelato\",\"_userSignature\":\"EIP-712 compliant signature from _call.user\"}}},\"title\":\"Gelato Relay contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callWithSyncFee(address,bytes,address,uint256,bytes32)\":{\"notice\":\"Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward\"},\"sponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authenticationSponsor signature allows for payment via sponsor's 1Balance balanceOracle value for exchange rate between native tokens and fee token\"},\"userAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with ONLY user authentication.The user here is paying for themselves, no external sponsorUser signature allows for payment via user's 1Balance balanceOracle value for exchange rate between native tokens and fee token\"},\"userSponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,address,uint256,uint8,address,uint256),bytes,bytes,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with BOTH sponsor and user authenticationBoth sponsor and user signature allows for payment via sponsor's 1Balance balance\"}},\"notice\":\"This contract deals with synchronous payments and Gelato 1Balance payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelay.sol\":\"GelatoRelay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relayer-context/contracts/functions/RelayerUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nfunction _encodeRelayerContext(\\n    bytes calldata _fnArgs,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodePacked(_fnArgs, abi.encode(_feeCollector, _feeToken, _fee));\\n}\\n\\nfunction _encodeRelayerContextERC2771(\\n    bytes calldata _fnArgs,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee,\\n    address _sender\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodePacked(\\n            _fnArgs,\\n            abi.encode(_feeCollector, _feeToken, _fee, _sender)\\n        );\\n}\\n\",\"keccak256\":\"0x6284094196112d5e56db6ee133c19262618f66e5bf5605710835c453e52e46ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"contracts/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IGelatoRelay} from \\\"./interfaces/IGelatoRelay.sol\\\";\\nimport {IGelato1Balance} from \\\"./interfaces/IGelato1Balance.sol\\\";\\nimport {GelatoRelayBase1Balance} from \\\"./abstract/GelatoRelayBase1Balance.sol\\\";\\nimport {GelatoCallUtils} from \\\"./lib/GelatoCallUtils.sol\\\";\\nimport {GelatoTokenUtils} from \\\"./lib/GelatoTokenUtils.sol\\\";\\nimport {\\n    _encodeRelayerContext\\n} from \\\"@gelatonetwork/relayer-context/contracts/functions/RelayerUtils.sol\\\";\\nimport {_eip2771Context} from \\\"./functions/ContextUtils.sol\\\";\\nimport {\\n    SponsorAuthCallWith1Balance,\\n    UserAuthCallWith1Balance,\\n    UserSponsorAuthCallWith1Balance\\n} from \\\"./types/CallTypes.sol\\\";\\nimport {IGelato} from \\\"./interfaces/IGelato.sol\\\";\\nimport {PaymentType} from \\\"./types/PaymentTypes.sol\\\";\\n\\n/// @title  Gelato Relay contract\\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\\n/// @dev    This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelay is IGelatoRelay, IGelato1Balance, GelatoRelayBase1Balance {\\n    using GelatoCallUtils for address;\\n    using GelatoTokenUtils for address;\\n\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant name = \\\"GelatoRelay\\\";\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant version = \\\"1\\\";\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _gelato) GelatoRelayBase1Balance(_gelato) {}\\n\\n    // TO DO: after RelayerContext is properly implemented on Gelato\\n    // remove _feeToken and _fee and expect _data to be Context encoded.\\n    /// @notice Relay call with Synchronous Payment\\n    /// @notice The target contract pays Gelato during the call forward\\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\\n    /// @param _target Target smart contract\\n    /// @param _data Payload for call on _target\\n    /// @param _feeToken Payment can be done in native and ERC-20 tokens\\n    /// @param _taskId Unique task identifier generated by gelato\\n    function callWithSyncFee(\\n        address _target,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _fee,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        uint256 preBalance = _feeToken.getBalance(msg.sender);\\n\\n        // TO DO: remove hacky way and replace with\\n        // implementation that _encodes RelayerContext on Gelato\\n        _target.revertingContractCall(\\n            _encodeRelayerContext(_data, msg.sender, _feeToken, _fee),\\n            \\\"GelatoRelay.callWithSyncFee:\\\"\\n        );\\n\\n        uint256 postBalance = _feeToken.getBalance(msg.sender);\\n\\n        uint256 fee = postBalance - preBalance;\\n\\n        emit LogCallWithSyncFee(_target, _feeToken, fee, _taskId);\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @notice Sponsor signature allows for payment via sponsor's 1Balance balance\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _call Relay call data packed into SponsorAuthCall struct\\n    /// @param _sponsorSignature EIP-712 compliant signature from _call.sponsor\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _taskId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function sponsorAuthCallWith1Balance(\\n        SponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _sponsorSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.paymentType == PaymentType.OneBalance,\\n            \\\"GelatoRelay.sponsorAuthCallWith1Balance: paymentType\\\"\\n        );\\n\\n        _requireChainId(\\n            _call.chainId,\\n            \\\"GelatoRelay.sponsorAuthCallWith1Balance:\\\"\\n        );\\n\\n        // Do not enforce ordering on nonces,\\n        // but still enforce replay protection\\n        // via uniqueness of message\\n        bytes32 digest = _requireSponsorAuthCallSignature1Balance(\\n            _getDomainSeparator(),\\n            _call,\\n            _sponsorSignature,\\n            _call.sponsor\\n        );\\n        require(\\n            !wasCallSponsoredAlready[digest],\\n            \\\"GelatoRelay.sponsorAuthCallWith1Balance: replay\\\"\\n        );\\n\\n        // EFFECTS\\n        wasCallSponsoredAlready[digest] = true;\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _call.data,\\n            \\\"GelatoRelay.sponsorAuthCallWith1Balance:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _call.sponsor,\\n            _call.target,\\n            _call.feeToken,\\n            _call.oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _taskId\\n        );\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with ONLY user authentication.\\n    /// @notice The user here is paying for themselves, no external sponsor\\n    /// @notice User signature allows for payment via user's 1Balance balance\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\\n    /// @dev    on their end via encoding into _call.data.\\n    /// @param _call Relay call data packed into UserAuthCall struct\\n    /// @param _userSignature EIP-712 compliant signature from _call.user\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _taskId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function userAuthCallWith1Balance(\\n        UserAuthCallWith1Balance calldata _call,\\n        bytes calldata _userSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.paymentType == PaymentType.OneBalance,\\n            \\\"GelatoRelay.userAuthCallWith1Balance: paymentType\\\"\\n        );\\n\\n        _requireChainId(_call.chainId, \\\"GelatoRelay.userAuthCallWith1Balance:\\\");\\n\\n        uint256 storedUserNonce = userNonce[_call.user];\\n\\n        // For the user, we enforce nonce ordering\\n        _requireUserBasics(\\n            _call.userNonce,\\n            storedUserNonce,\\n            _call.userDeadline,\\n            \\\"GelatoRelay.userAuthCallWith1Balance:\\\"\\n        );\\n\\n        _requireUserAuthCallSignature1Balance(\\n            _getDomainSeparator(),\\n            _call,\\n            _userSignature,\\n            _call.user\\n        );\\n\\n        // EFFECTS\\n        userNonce[_call.user] = storedUserNonce + 1;\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _eip2771Context(_call.data, _call.user),\\n            \\\"GelatoRelay.userAuthCallWith1Balance:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _call.user,\\n            _call.target,\\n            _call.feeToken,\\n            _call.oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _taskId\\n        );\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with BOTH sponsor and user authentication\\n    /// @notice Both sponsor and user signature allows for payment via sponsor's 1Balance balance\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\\n    /// @dev    on their end via encoding into _call.data.\\n    /// @param _call Relay call data packed into UserSponsorAuthCall struct\\n    /// @param _userSignature EIP-712 compliant signature from _call.user\\n    /// @param _sponsorSignature EIP-712 compliant signature from _call.sponsor\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _taskId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function userSponsorAuthCallWith1Balance(\\n        UserSponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _userSignature,\\n        bytes calldata _sponsorSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.paymentType == PaymentType.OneBalance,\\n            \\\"GelatoRelay.userSponsorAuthCallWith1Balance: paymentType\\\"\\n        );\\n\\n        _requireChainId(\\n            _call.chainId,\\n            \\\"GelatoRelay.userSponsorAuthCallWith1Balance:\\\"\\n        );\\n\\n        uint256 storedUserNonce = userNonce[_call.user];\\n\\n        // For the user, we enforce nonce ordering\\n        _requireUserBasics(\\n            _call.userNonce,\\n            storedUserNonce,\\n            _call.userDeadline,\\n            \\\"GelatoRelay.userSponsorAuthCallWith1Balance:\\\"\\n        );\\n\\n        bytes32 domainSeparator = _getDomainSeparator();\\n\\n        // Verify user's signature\\n        _requireUserSponsorAuthCallSignature1Balance(\\n            domainSeparator,\\n            _call,\\n            _userSignature,\\n            _call.user\\n        );\\n\\n        // Verify sponsor's signature\\n        // Do not enforce ordering on nonces but still enforce replay protection\\n        // via uniqueness of call with nonce\\n        bytes32 digest = _requireUserSponsorAuthCallSignature1Balance(\\n            domainSeparator,\\n            _call,\\n            _sponsorSignature,\\n            _call.sponsor\\n        );\\n\\n        // Sponsor replay protection\\n        require(\\n            !wasCallSponsoredAlready[digest],\\n            \\\"GelatoRelay.userSponsorAuthCallWith1Balance: replay\\\"\\n        );\\n\\n        // EFFECTS\\n        userNonce[_call.user] = storedUserNonce + 1;\\n        wasCallSponsoredAlready[digest] = true;\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _eip2771Context(_call.data, _call.user),\\n            \\\"GelatoRelay.userSponsorAuthCallWith1Balance:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _call.sponsor,\\n            _call.target,\\n            _call.feeToken,\\n            _call.oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _taskId\\n        );\\n    }\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _getDomainSeparator();\\n    }\\n\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        bytes(\\n                            //solhint-disable-next-line max-line-length\\n                            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                        )\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc91ba623b8e2e661d9889b17248be8dc8a8db22087f4e8be96bd714ae63333b4\",\"license\":\"MIT\"},\"contracts/abstract/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IGelatoRelayBase} from \\\"../interfaces/IGelatoRelayBase.sol\\\";\\nimport {GelatoString} from \\\"../lib/GelatoString.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract GelatoRelayBase is IGelatoRelayBase {\\n    using GelatoString for string;\\n\\n    address public immutable gelato;\\n\\n    mapping(address => uint256) public userNonce;\\n    mapping(bytes32 => bool) public wasCallSponsoredAlready;\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    function _requireChainId(uint256 _chainId, string memory _errorTrace)\\n        internal\\n        view\\n    {\\n        require(_chainId == block.chainid, _errorTrace.suffix(\\\"chainid\\\"));\\n    }\\n\\n    function _requireUserBasics(\\n        uint256 _callUserNonce,\\n        uint256 _storedUserNonce,\\n        uint256 _userDeadline,\\n        string memory _errorTrace\\n    ) internal view {\\n        require(\\n            _callUserNonce == _storedUserNonce,\\n            _errorTrace.suffix(\\\"nonce\\\")\\n        );\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _userDeadline == 0 || _userDeadline >= block.timestamp,\\n            _errorTrace.suffix(\\\"deadline\\\")\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2241a79a7f149314c4e1e3b3d5a0ead29391fd184c64558a8caa1cf422f6d933\",\"license\":\"MIT\"},\"contracts/abstract/GelatoRelayBase1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {\\n    IGelatoRelayBase1Balance\\n} from \\\"../interfaces/IGelatoRelayBase1Balance.sol\\\";\\nimport {GelatoRelayBase} from \\\"./GelatoRelayBase.sol\\\";\\nimport {\\n    SponsorAuthCallWith1Balance,\\n    UserAuthCallWith1Balance,\\n    UserSponsorAuthCallWith1Balance\\n} from \\\"../types/CallTypes.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract GelatoRelayBase1Balance is\\n    IGelatoRelayBase1Balance,\\n    GelatoRelayBase\\n{\\n    bytes32 public constant SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"SponsorAuthCallWith1Balance(uint256 chainId,address target,bytes data,address sponsor,uint256 sponsorSalt,uint8 paymentType,address feeToken,uint256 oneBalanceChainId)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant USER_AUTH_CALL_1BALANCE_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"UserAuthCallWith1Balance(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline,uint8 paymentType,address feeToken,uint256 oneBalanceChainId)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant USER_SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"UserSponsorAuthCallWith1Balance(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline,address sponsor,uint256 sponsorSalt,uint8 paymentType,address feeToken,uint256 oneBalanceChainId)\\\"\\n            )\\n        );\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _gelato) GelatoRelayBase(_gelato) {}\\n\\n    function _requireSponsorAuthCallSignature1Balance(\\n        bytes32 _domainSeparator,\\n        SponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeSponsorAuthCall1Balance(_call))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"GelatoRelayBase1Balance._requireSponsorAuthCallSignature1Balance\\\"\\n        );\\n    }\\n\\n    function _requireUserAuthCallSignature1Balance(\\n        bytes32 _domainSeparator,\\n        UserAuthCallWith1Balance calldata _call,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal pure {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeUserAuthCall1Balance(_call))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"GelatoRelayBase1Balance._requireUserAuthCallSignature1Balance\\\"\\n        );\\n    }\\n\\n    function _requireUserSponsorAuthCallSignature1Balance(\\n        bytes32 _domainSeparator,\\n        UserSponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeUserSponsorAuthCall1Balance(_call))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"GelatoRelayBase1Balance._requireUserSponsorAuthCallSignature1Balance\\\"\\n        );\\n    }\\n\\n    function _abiEncodeSponsorAuthCall1Balance(\\n        SponsorAuthCallWith1Balance calldata _call\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH,\\n                _call.chainId,\\n                _call.target,\\n                keccak256(_call.data),\\n                _call.sponsor,\\n                _call.sponsorSalt,\\n                _call.paymentType,\\n                _call.feeToken,\\n                _call.oneBalanceChainId\\n            );\\n    }\\n\\n    function _abiEncodeUserAuthCall1Balance(\\n        UserAuthCallWith1Balance calldata _call\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                USER_AUTH_CALL_1BALANCE_TYPEHASH,\\n                _call.chainId,\\n                _call.target,\\n                keccak256(_call.data),\\n                _call.user,\\n                _call.userNonce,\\n                _call.userDeadline,\\n                _call.paymentType,\\n                _call.feeToken,\\n                _call.oneBalanceChainId\\n            );\\n    }\\n\\n    function _abiEncodeUserSponsorAuthCall1Balance(\\n        UserSponsorAuthCallWith1Balance calldata _call\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                USER_SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH,\\n                _call.chainId,\\n                _call.target,\\n                keccak256(_call.data),\\n                _call.user,\\n                _call.userNonce,\\n                _call.userDeadline,\\n                _call.sponsor,\\n                _call.sponsorSalt,\\n                _call.paymentType,\\n                _call.feeToken,\\n                _call.oneBalanceChainId\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0e98ef4e5dbe583a0d0aba18960ffdaed1573d29b721f5f60a710ccfd0585757\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xbca4657069e9e86e84ac4ecbd65e66525f549a3d91daa728b099784fb894c102\",\"license\":\"MIT\"},\"contracts/functions/ContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _eip2771Context(bytes calldata _data, address _msgSender)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _msgSender);\\n}\\n\",\"keccak256\":\"0x8a9aad56e566a680275f2654bb02d121bd5153e4506db9e4c140b3167f21d455\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGelato {\\n    function getFeeCollector() external view returns (address feeCollector);\\n}\\n\",\"keccak256\":\"0x57e6ef7c905bf977069e93b6631ac84a7360e6cadb08119c0a148a4547738f50\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGelato1Balance {\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed target,\\n        address indexed feeToken,\\n        uint256 sponsorChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 taskId\\n    );\\n}\\n\",\"keccak256\":\"0x53eb292f96efbcc6839d50aab05f7fecb6846da3e06809c27c4af8c5dabe5c24\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IGelatoRelayBase1Balance} from \\\"./IGelatoRelayBase1Balance.sol\\\";\\nimport {\\n    SponsorAuthCallWith1Balance,\\n    UserAuthCallWith1Balance,\\n    UserSponsorAuthCallWith1Balance\\n} from \\\"../types/CallTypes.sol\\\";\\n\\ninterface IGelatoRelay is IGelatoRelayBase1Balance {\\n    event LogCallWithSyncFee(\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    function callWithSyncFee(\\n        address _target,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _fee,\\n        bytes32 _taskId\\n    ) external;\\n\\n    function sponsorAuthCallWith1Balance(\\n        SponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _sponsorSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external;\\n\\n    function userAuthCallWith1Balance(\\n        UserAuthCallWith1Balance calldata _call,\\n        bytes calldata _userSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external;\\n\\n    function userSponsorAuthCallWith1Balance(\\n        UserSponsorAuthCallWith1Balance calldata _call,\\n        bytes calldata _userSignature,\\n        bytes calldata _sponsorSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe3289b1ca1c41a948bcd7c4df6d96512e23d0772079f6d043600c061eb2d110c\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGelatoRelayBase {\\n    function userNonce(address _user) external view returns (uint256);\\n\\n    function wasCallSponsoredAlready(bytes32 _digest)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x3691e58ac67d5cdd4aea1621885b756338093889a1ea6f3b3571b0d2c247f6ce\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelayBase1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IGelatoRelayBase} from \\\"./IGelatoRelayBase.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGelatoRelayBase1Balance is IGelatoRelayBase {\\n    function SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH()\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    function USER_AUTH_CALL_1BALANCE_TYPEHASH() external pure returns (bytes32);\\n\\n    function USER_SPONSOR_AUTH_CALL_1BALANCE_TYPEHASH()\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc59a5ad1806e8c1a5f27a07da0dc8261282e24754dbde16e313d6c30ca14aa75\",\"license\":\"MIT\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d8adbcf48a44fafb172a5ae25a7588cc2ecc2f26ff4e11f324acf6e8928ad33\",\"license\":\"MIT\"},\"contracts/lib/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4fdef9dcda5d21749b57dfc211bcb5870c5132fb8feb89fe370e45b73cf8ce01\",\"license\":\"MIT\"},\"contracts/lib/GelatoString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary GelatoString {\\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\\n    }\\n\\n    function prefix(string memory _second, string memory _first)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n\\n    function suffix(string memory _first, string memory _second)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n}\\n\",\"keccak256\":\"0xdbb53acc10699af4f5471830e46c80404fdd12386cb9b05438b7a4035ac58e0e\",\"license\":\"MIT\"},\"contracts/lib/GelatoTokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary GelatoTokenUtils {\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        if (_token == NATIVE_TOKEN) Address.sendValue(payable(_to), _amount);\\n        else SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x42a249da219d8d560a58bcedfb30e3980802f22b7513948c90c922d501906644\",\"license\":\"MIT\"},\"contracts/types/CallTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {PaymentType} from \\\"./PaymentTypes.sol\\\";\\n\\n// No need to implement user-specific signature verification\\n// Only sponsor signature is verified in order to ensure integrity of fee payments\\nstruct SponsorAuthCallWith1Balance {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address sponsor;\\n    uint256 sponsorSalt;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 oneBalanceChainId;\\n}\\n\\n// When the user pays for themselves, so only user signature verification required\\nstruct UserAuthCallWith1Balance {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 oneBalanceChainId;\\n}\\n\\n// Relay call with built-in support with signature verification on behalf of user and sponsor\\n// Both user and sponsor signatures are verified\\n// The sponsor pays for the relay call\\nstruct UserSponsorAuthCallWith1Balance {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n    address sponsor; // could be same as user\\n    uint256 sponsorSalt;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 oneBalanceChainId;\\n}\\n// No need to implement user-specific signature verification\\n// Only sponsor signature is verified in order to ensure integrity of fee payments\\nstruct SponsorAuthCallWithTransferFrom {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address sponsor;\\n    uint256 sponsorSalt;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 maxFee;\\n}\\n\\n// When the user pays for themselves, so only user signature verification required\\nstruct UserAuthCallWithTransferFrom {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 maxFee;\\n}\\n\\n// Relay call with built-in support with signature verification on behalf of user and sponsor\\n// Both user and sponsor signatures are verified\\n// The sponsor pays for the relay call\\nstruct UserSponsorAuthCallWithTransferFrom {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n    address sponsor;\\n    uint256 sponsorSalt;\\n    PaymentType paymentType;\\n    address feeToken;\\n    uint256 maxFee;\\n}\\n\",\"keccak256\":\"0x9c065ac01ef13b2c8023d1aa24737d8c26c96ca1fd8b280bf52c2effa4dc9fd4\",\"license\":\"MIT\"},\"contracts/types/PaymentTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nenum PaymentType {\\n    OneBalance,\\n    TransferFrom\\n}\\n\",\"keccak256\":\"0x3f9bd04611bd2bf9cd19fde6db9338c0e9d6eab4066b640361c94051a94a491e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002b7238038062002b72833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b608051612ac2620000b0600039600081816101ca015281816102a5015281816106ac0152818161086b0152610c150152612ac26000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063573ea5751161008c578063ad5e012011610066578063ad5e012014610257578063bc49e3e81461026a578063c0386a5214610272578063f1f1c5ce1461028557600080fd5b8063573ea575146101c55780638b778dc014610211578063a2d53b5e1461024457600080fd5b80633644e515116100bd5780633644e515146101795780633e8cc7b81461018157806354fd4d501461018957600080fd5b806306fdde03146100e457806321776100146101365780632e04b8e71461014b575b600080fd5b6101206040518060400160405280600b81526020017f47656c61746f52656c617900000000000000000000000000000000000000000081525081565b60405161012d919061201e565b60405180910390f35b6101496101443660046120b1565b61028d565b005b61016b610159366004612166565b60006020819052908152604090205481565b60405190815260200161012d565b61016b610662565b61016b610671565b6101206040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6101ec7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012d565b61023461021f366004612181565b60016020526000908152604090205460ff1681565b604051901515815260200161012d565b61014961025236600461219a565b610694565b610149610265366004612211565b610853565b61016b610bda565b610149610280366004612257565b610bfd565b61016b611088565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b600061034360c0880160a0890161233b565b60018111156103545761035461230c565b146103e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683160448201527f42616c616e63653a207061796d656e74547970650000000000000000000000006064820152608401610328565b6104078660000135604051806060016040528060288152602001612908602891396110ac565b600061042c610414611134565b8888886104276080840160608501612166565b611237565b60008181526001602052604090205490915060ff16156104ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683160448201527f42616c616e63653a207265706c617900000000000000000000000000000000006064820152608401610328565b60008181526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790556105959061051990890189612363565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516060810190915260288082529092509050612908602083013961057860408b0160208c01612166565b73ffffffffffffffffffffffffffffffffffffffff1691906113cf565b506105a660e0880160c08901612166565b73ffffffffffffffffffffffffffffffffffffffff166105cc6040890160208a01612166565b73ffffffffffffffffffffffffffffffffffffffff166105f260808a0160608b01612166565b6040805160e08c01358152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff91909116907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada906080015b60405180910390a450505050505050565b600061066c611134565b905090565b6040518060e0016040528060a7815260200161278860a791398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b600061075573ffffffffffffffffffffffffffffffffffffffff8516336114d9565b90506107b961076787873388886115c3565b60408051808201909152601c81527f47656c61746f52656c61792e63616c6c5769746853796e634665653a00000000602082015273ffffffffffffffffffffffffffffffffffffffff8a1691906113cf565b5060006107dc73ffffffffffffffffffffffffffffffffffffffff8616336114d9565b905060006107ea83836123f7565b6040805173ffffffffffffffffffffffffffffffffffffffff8981168252602082018490529181018790529192508a16907f2ebf5825cbf63a0d0bd018d3d8547867630cd139f87864652d984d57da4edb559060600160405180910390a2505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b600061090460e0880160c0890161233b565b60018111156109155761091561230c565b146109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f47656c61746f52656c61792e757365724175746843616c6c576974683142616c60448201527f616e63653a207061796d656e74547970650000000000000000000000000000006064820152608401610328565b6109c886600001356040518060600160405280602581526020016128e3602591396110ac565b600080806109dc60808a0160608b01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610a458760800135828960a001356040518060600160405280602581526020016128e36025913961162d565b610a68610a50611134565b888888610a636080840160608501612166565b61173c565b610a7381600161240a565b600080610a8660808b0160608c01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b18610aef888060400190610ada9190612363565b610aea60808c0160608d01612166565b6118d1565b6040518060600160405280602581526020016128e36025913961057860408b0160208c01612166565b50610b2a610100880160e08901612166565b73ffffffffffffffffffffffffffffffffffffffff16610b506040890160208a01612166565b73ffffffffffffffffffffffffffffffffffffffff16610b7660808a0160608b01612166565b604080516101008c01358152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff91909116907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada90608001610651565b6040518060e0016040528060b4815260200161282f60b491398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b6000610cb06101208a016101008b0161233b565b6001811115610cc157610cc161230c565b14610d4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f47656c61746f52656c61792e7573657253706f6e736f724175746843616c6c5760448201527f6974683142616c616e63653a207061796d656e745479706500000000000000006064820152608401610328565b610d7488600001356040518060600160405280602c8152602001612a61602c91396110ac565b60008080610d8860808c0160608d01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610df18960800135828b60a001356040518060600160405280602c8152602001612a61602c913961162d565b6000610dfb611134565b9050610e19818b8b8b610e146080840160608501612166565b611900565b506000610e33828c8a8a610e1460e0840160c08501612166565b60008181526001602052604090205490915060ff1615610ed5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f47656c61746f52656c61792e7573657253706f6e736f724175746843616c6c5760448201527f6974683142616c616e63653a207265706c6179000000000000000000000000006064820152608401610328565b610ee083600161240a565b6000808d6060016020810190610ef69190612166565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120939093558383526001918290529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610fae90610f8290610f6f908e018e612363565b8e6060016020810190610aea9190612166565b6040518060600160405280602c8152602001612a61602c91398d60200160208101906105789190612166565b50610fc16101408c016101208d01612166565b73ffffffffffffffffffffffffffffffffffffffff16610fe760408d0160208e01612166565b73ffffffffffffffffffffffffffffffffffffffff1661100d60e08e0160c08f01612166565b73ffffffffffffffffffffffffffffffffffffffff167f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada8e61014001358a8a8a604051611073949392919093845260208401929092526040830152606082015260800190565b60405180910390a45050505050505050505050565b60405180610100016040528060df815260200161298260df91398051906020012081565b4682146110f76040518060400160405280600781526020017f636861696e69640000000000000000000000000000000000000000000000000081525083611ab290919063ffffffff16565b9061112f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b505050565b6000604051806080016040528060528152602001612930605291398051602091820120604080518082018252600b81527f47656c61746f52656c61790000000000000000000000000000000000000000009084015280518082018252600181527f3100000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f34fc646dc54aecbfe1e155e4774cd50377f6ce69bbc8ac7b749a4bee450138e5908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008561124386611ade565b805160209182012060405161128a9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806112e58387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156112fe576112fe61230c565b14801561133657508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6113c457604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f47656c61746f52656c6179426173653142616c616e63652e5f7265717569726560448201527f53706f6e736f724175746843616c6c5369676e61747572653142616c616e63656064820152608401610328565b505095945050505050565b606060008473ffffffffffffffffffffffffffffffffffffffff16846040516113f8919061241d565b6000604051808303816000865af19150503d8060008114611435576040519150601f19603f3d011682016040523d82523d6000602084013e61143a565b606091505b509250905080156114c75781516000036114c25773ffffffffffffffffffffffffffffffffffffffff85163b1515836040516020016114799190612439565b604051602081830303815290604052906114c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b505b6114d1565b6114d18284611c0f565b509392505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146115a1576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c919061247a565b6115ba565b8173ffffffffffffffffffffffffffffffffffffffff16315b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff858116602083015284168183015260608082018490528251808303820181526080830190935291611613918891889160a001612493565b604051602081830303815290604052905095945050505050565b8284146116786040518060400160405280600581526020017f6e6f6e636500000000000000000000000000000000000000000000000000000081525083611ab290919063ffffffff16565b906116b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b508115806116be5750428210155b60408051808201909152600881527f646561646c696e6500000000000000000000000000000000000000000000000060208201526116fd908390611ab2565b90611735576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b5050505050565b60008561174886611d0b565b805160209182012060405161178f9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806117ea8387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156118035761180361230c565b14801561183b57508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6118c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f47656c61746f52656c6179426173653142616c616e63652e5f7265717569726560448201527f557365724175746843616c6c5369676e61747572653142616c616e63650000006064820152608401610328565b5050505050505050565b60608383836040516020016118e8939291906124ba565b60405160208183030381529060405290509392505050565b60008561190c86611dc0565b80516020918201206040516119539392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806119ae8387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156119c7576119c761230c565b1480156119ff57508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6113c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f47656c61746f52656c6179426173653142616c616e63652e5f72657175697265908201527f5573657253706f6e736f724175746843616c6c5369676e61747572653142616c60648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a401610328565b60608282604051602001611ac79291906124f3565b604051602081830303815290604052905092915050565b60606040518060e0016040528060a7815260200161278860a79139805160209182012090833590611b159060408601908601612166565b611b226040860186612363565b604051611b30929190612522565b604051908190039020611b496080870160608801612166565b6080870135611b5e60c0890160a08a0161233b565b611b6e60e08a0160c08b01612166565b8960e00135604051602001611b8b9998979695949392919061256d565b6040516020818303038152906040529050919050565b6000808251604103611bd75760208301516040840151606085015160001a611bcb87828585611e90565b94509450505050611c08565b8251604003611c005760208301516040840151611bf5868383611fa8565b935093505050611c08565b506000905060025b9250929050565b60208251611c1d91906125d6565b600403611cfa5760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a00000000000000000000000000000000000000000000000000000000003611ce9576044830192508183604051602001611c8b9291906124f3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526103289160040161201e565b81604051602001611c8b9190612611565b80604051602001611c8b9190612652565b60606040518060e0016040528060b4815260200161282f60b49139805160209182012090833590611d429060408601908601612166565b611d4f6040860186612363565b604051611d5d929190612522565b604051908190039020611d766080870160608801612166565b608087013560a0880135611d9060e08a0160c08b0161233b565b611da16101008b0160e08c01612166565b8a6101000135604051602001611b8b9a99989796959493929190612693565b606060405180610100016040528060df815260200161298260df9139805160209182012090833590611df89060408601908601612166565b611e056040860186612363565b604051611e13929190612522565b604051908190039020611e2c6080870160608801612166565b608087013560a0880135611e4660e08a0160c08b01612166565b60e08a0135611e5d6101208c016101008d0161233b565b611e6f6101408d016101208e01612166565b8c6101400135604051602001611b8b9c9b9a99989796959493929190612704565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ec75750600090506003611f9f565b8460ff16601b14158015611edf57508460ff16601c14155b15611ef05750600090506004611f9f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f44573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611f9857600060019250925050611f9f565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681611fde60ff86901c601b61240a565b9050611fec87828885611e90565b935093505050935093915050565b60005b83811015612015578181015183820152602001611ffd565b50506000910152565b602081526000825180602084015261203d816040850160208701611ffa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261208157600080fd5b50813567ffffffffffffffff81111561209957600080fd5b602083019150836020828501011115611c0857600080fd5b60008060008060008060a087890312156120ca57600080fd5b863567ffffffffffffffff808211156120e257600080fd5b90880190610100828b0312156120f757600080fd5b9096506020880135908082111561210d57600080fd5b5061211a89828a0161206f565b979a90995096976040810135976060820135975060809091013595509350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461216157600080fd5b919050565b60006020828403121561217857600080fd5b6115ba8261213d565b60006020828403121561219357600080fd5b5035919050565b60008060008060008060a087890312156121b357600080fd5b6121bc8761213d565b9550602087013567ffffffffffffffff8111156121d857600080fd5b6121e489828a0161206f565b90965094506121f790506040880161213d565b925060608701359150608087013590509295509295509295565b60008060008060008060a0878903121561222a57600080fd5b863567ffffffffffffffff8082111561224257600080fd5b90880190610120828b0312156120f757600080fd5b60008060008060008060008060c0898b03121561227357600080fd5b883567ffffffffffffffff8082111561228b57600080fd5b908a0190610160828d0312156122a057600080fd5b90985060208a013590808211156122b657600080fd5b6122c28c838d0161206f565b909950975060408b01359150808211156122db57600080fd5b506122e88b828c0161206f565b999c989b5096999698976060880135976080810135975060a0013595509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561234d57600080fd5b81356002811061235c57600080fd5b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261239857600080fd5b83018035915067ffffffffffffffff8211156123b357600080fd5b602001915036819003821315611c0857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156115bd576115bd6123c8565b808201808211156115bd576115bd6123c8565b6000825161242f818460208701611ffa565b9190910192915050565b6000825161244b818460208701611ffa565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b60006020828403121561248c57600080fd5b5051919050565b8284823760008382016000815283516124b0818360208801611ffa565b0195945050505050565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60008351612505818460208801611ffa565b835190830190612519818360208801611ffa565b01949350505050565b8183823760009101908152919050565b60028110612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6000610120820190508a825289602083015273ffffffffffffffffffffffffffffffffffffffff808a16604084015288606084015280881660808401528660a08401526125bd60c0840187612532565b9390931660e08201526101000152979650505050505050565b60008261260c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b60008251612623818460208701611ffa565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b60008251612664818460208701611ffa565b7f556e657870656374656452657475726e64617461000000000000000000000000920191825250601401919050565b6000610140820190508b82528a602083015273ffffffffffffffffffffffffffffffffffffffff808b16604084015289606084015280891660808401528760a08401528660c08401526126e960e0840187612532565b93909316610100820152610120015298975050505050505050565b6000610180820190508d82528c602083015273ffffffffffffffffffffffffffffffffffffffff808d1660408401528b6060840152808b1660808401528960a08401528860c084015280881660e08401528661010084015261276a610120840187612532565b9390931661014082015261016001529a995050505050505050505056fe53706f6e736f724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c616464726573732073706f6e736f722c75696e743235362073706f6e736f7253616c742c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e496429557365724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e652c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e49642947656c61746f52656c61792e757365724175746843616c6c576974683142616c616e63653a47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683142616c616e63653a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374295573657253706f6e736f724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e652c616464726573732073706f6e736f722c75696e743235362073706f6e736f7253616c742c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e49642947656c61746f52656c61792e7573657253706f6e736f724175746843616c6c576974683142616c616e63653aa264697066735822122054f59a7836e52d5b16585936080bfb627fab030c75d612747bdfcec26102310464736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063573ea5751161008c578063ad5e012011610066578063ad5e012014610257578063bc49e3e81461026a578063c0386a5214610272578063f1f1c5ce1461028557600080fd5b8063573ea575146101c55780638b778dc014610211578063a2d53b5e1461024457600080fd5b80633644e515116100bd5780633644e515146101795780633e8cc7b81461018157806354fd4d501461018957600080fd5b806306fdde03146100e457806321776100146101365780632e04b8e71461014b575b600080fd5b6101206040518060400160405280600b81526020017f47656c61746f52656c617900000000000000000000000000000000000000000081525081565b60405161012d919061201e565b60405180910390f35b6101496101443660046120b1565b61028d565b005b61016b610159366004612166565b60006020819052908152604090205481565b60405190815260200161012d565b61016b610662565b61016b610671565b6101206040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6101ec7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012d565b61023461021f366004612181565b60016020526000908152604090205460ff1681565b604051901515815260200161012d565b61014961025236600461219a565b610694565b610149610265366004612211565b610853565b61016b610bda565b610149610280366004612257565b610bfd565b61016b611088565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b600061034360c0880160a0890161233b565b60018111156103545761035461230c565b146103e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683160448201527f42616c616e63653a207061796d656e74547970650000000000000000000000006064820152608401610328565b6104078660000135604051806060016040528060288152602001612908602891396110ac565b600061042c610414611134565b8888886104276080840160608501612166565b611237565b60008181526001602052604090205490915060ff16156104ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683160448201527f42616c616e63653a207265706c617900000000000000000000000000000000006064820152608401610328565b60008181526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790556105959061051990890189612363565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516060810190915260288082529092509050612908602083013961057860408b0160208c01612166565b73ffffffffffffffffffffffffffffffffffffffff1691906113cf565b506105a660e0880160c08901612166565b73ffffffffffffffffffffffffffffffffffffffff166105cc6040890160208a01612166565b73ffffffffffffffffffffffffffffffffffffffff166105f260808a0160608b01612166565b6040805160e08c01358152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff91909116907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada906080015b60405180910390a450505050505050565b600061066c611134565b905090565b6040518060e0016040528060a7815260200161278860a791398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b600061075573ffffffffffffffffffffffffffffffffffffffff8516336114d9565b90506107b961076787873388886115c3565b60408051808201909152601c81527f47656c61746f52656c61792e63616c6c5769746853796e634665653a00000000602082015273ffffffffffffffffffffffffffffffffffffffff8a1691906113cf565b5060006107dc73ffffffffffffffffffffffffffffffffffffffff8616336114d9565b905060006107ea83836123f7565b6040805173ffffffffffffffffffffffffffffffffffffffff8981168252602082018490529181018790529192508a16907f2ebf5825cbf63a0d0bd018d3d8547867630cd139f87864652d984d57da4edb559060600160405180910390a2505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b600061090460e0880160c0890161233b565b60018111156109155761091561230c565b146109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f47656c61746f52656c61792e757365724175746843616c6c576974683142616c60448201527f616e63653a207061796d656e74547970650000000000000000000000000000006064820152608401610328565b6109c886600001356040518060600160405280602581526020016128e3602591396110ac565b600080806109dc60808a0160608b01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610a458760800135828960a001356040518060600160405280602581526020016128e36025913961162d565b610a68610a50611134565b888888610a636080840160608501612166565b61173c565b610a7381600161240a565b600080610a8660808b0160608c01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b18610aef888060400190610ada9190612363565b610aea60808c0160608d01612166565b6118d1565b6040518060600160405280602581526020016128e36025913961057860408b0160208c01612166565b50610b2a610100880160e08901612166565b73ffffffffffffffffffffffffffffffffffffffff16610b506040890160208a01612166565b73ffffffffffffffffffffffffffffffffffffffff16610b7660808a0160608b01612166565b604080516101008c01358152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff91909116907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada90608001610651565b6040518060e0016040528060b4815260200161282f60b491398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610328565b6000610cb06101208a016101008b0161233b565b6001811115610cc157610cc161230c565b14610d4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f47656c61746f52656c61792e7573657253706f6e736f724175746843616c6c5760448201527f6974683142616c616e63653a207061796d656e745479706500000000000000006064820152608401610328565b610d7488600001356040518060600160405280602c8152602001612a61602c91396110ac565b60008080610d8860808c0160608d01612166565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610df18960800135828b60a001356040518060600160405280602c8152602001612a61602c913961162d565b6000610dfb611134565b9050610e19818b8b8b610e146080840160608501612166565b611900565b506000610e33828c8a8a610e1460e0840160c08501612166565b60008181526001602052604090205490915060ff1615610ed5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f47656c61746f52656c61792e7573657253706f6e736f724175746843616c6c5760448201527f6974683142616c616e63653a207265706c6179000000000000000000000000006064820152608401610328565b610ee083600161240a565b6000808d6060016020810190610ef69190612166565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120939093558383526001918290529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610fae90610f8290610f6f908e018e612363565b8e6060016020810190610aea9190612166565b6040518060600160405280602c8152602001612a61602c91398d60200160208101906105789190612166565b50610fc16101408c016101208d01612166565b73ffffffffffffffffffffffffffffffffffffffff16610fe760408d0160208e01612166565b73ffffffffffffffffffffffffffffffffffffffff1661100d60e08e0160c08f01612166565b73ffffffffffffffffffffffffffffffffffffffff167f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada8e61014001358a8a8a604051611073949392919093845260208401929092526040830152606082015260800190565b60405180910390a45050505050505050505050565b60405180610100016040528060df815260200161298260df91398051906020012081565b4682146110f76040518060400160405280600781526020017f636861696e69640000000000000000000000000000000000000000000000000081525083611ab290919063ffffffff16565b9061112f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b505050565b6000604051806080016040528060528152602001612930605291398051602091820120604080518082018252600b81527f47656c61746f52656c61790000000000000000000000000000000000000000009084015280518082018252600181527f3100000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f34fc646dc54aecbfe1e155e4774cd50377f6ce69bbc8ac7b749a4bee450138e5908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008561124386611ade565b805160209182012060405161128a9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806112e58387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156112fe576112fe61230c565b14801561133657508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6113c457604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f47656c61746f52656c6179426173653142616c616e63652e5f7265717569726560448201527f53706f6e736f724175746843616c6c5369676e61747572653142616c616e63656064820152608401610328565b505095945050505050565b606060008473ffffffffffffffffffffffffffffffffffffffff16846040516113f8919061241d565b6000604051808303816000865af19150503d8060008114611435576040519150601f19603f3d011682016040523d82523d6000602084013e61143a565b606091505b509250905080156114c75781516000036114c25773ffffffffffffffffffffffffffffffffffffffff85163b1515836040516020016114799190612439565b604051602081830303815290604052906114c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b505b6114d1565b6114d18284611c0f565b509392505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146115a1576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c919061247a565b6115ba565b8173ffffffffffffffffffffffffffffffffffffffff16315b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff858116602083015284168183015260608082018490528251808303820181526080830190935291611613918891889160a001612493565b604051602081830303815290604052905095945050505050565b8284146116786040518060400160405280600581526020017f6e6f6e636500000000000000000000000000000000000000000000000000000081525083611ab290919063ffffffff16565b906116b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b508115806116be5750428210155b60408051808201909152600881527f646561646c696e6500000000000000000000000000000000000000000000000060208201526116fd908390611ab2565b90611735576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328919061201e565b5050505050565b60008561174886611d0b565b805160209182012060405161178f9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806117ea8387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156118035761180361230c565b14801561183b57508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6118c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f47656c61746f52656c6179426173653142616c616e63652e5f7265717569726560448201527f557365724175746843616c6c5369676e61747572653142616c616e63650000006064820152608401610328565b5050505050505050565b60608383836040516020016118e8939291906124ba565b60405160208183030381529060405290509392505050565b60008561190c86611dc0565b80516020918201206040516119539392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806119ae8387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba192505050565b909250905060008160048111156119c7576119c761230c565b1480156119ff57508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6113c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f47656c61746f52656c6179426173653142616c616e63652e5f72657175697265908201527f5573657253706f6e736f724175746843616c6c5369676e61747572653142616c60648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a401610328565b60608282604051602001611ac79291906124f3565b604051602081830303815290604052905092915050565b60606040518060e0016040528060a7815260200161278860a79139805160209182012090833590611b159060408601908601612166565b611b226040860186612363565b604051611b30929190612522565b604051908190039020611b496080870160608801612166565b6080870135611b5e60c0890160a08a0161233b565b611b6e60e08a0160c08b01612166565b8960e00135604051602001611b8b9998979695949392919061256d565b6040516020818303038152906040529050919050565b6000808251604103611bd75760208301516040840151606085015160001a611bcb87828585611e90565b94509450505050611c08565b8251604003611c005760208301516040840151611bf5868383611fa8565b935093505050611c08565b506000905060025b9250929050565b60208251611c1d91906125d6565b600403611cfa5760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a00000000000000000000000000000000000000000000000000000000003611ce9576044830192508183604051602001611c8b9291906124f3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526103289160040161201e565b81604051602001611c8b9190612611565b80604051602001611c8b9190612652565b60606040518060e0016040528060b4815260200161282f60b49139805160209182012090833590611d429060408601908601612166565b611d4f6040860186612363565b604051611d5d929190612522565b604051908190039020611d766080870160608801612166565b608087013560a0880135611d9060e08a0160c08b0161233b565b611da16101008b0160e08c01612166565b8a6101000135604051602001611b8b9a99989796959493929190612693565b606060405180610100016040528060df815260200161298260df9139805160209182012090833590611df89060408601908601612166565b611e056040860186612363565b604051611e13929190612522565b604051908190039020611e2c6080870160608801612166565b608087013560a0880135611e4660e08a0160c08b01612166565b60e08a0135611e5d6101208c016101008d0161233b565b611e6f6101408d016101208e01612166565b8c6101400135604051602001611b8b9c9b9a99989796959493929190612704565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ec75750600090506003611f9f565b8460ff16601b14158015611edf57508460ff16601c14155b15611ef05750600090506004611f9f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f44573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611f9857600060019250925050611f9f565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681611fde60ff86901c601b61240a565b9050611fec87828885611e90565b935093505050935093915050565b60005b83811015612015578181015183820152602001611ffd565b50506000910152565b602081526000825180602084015261203d816040850160208701611ffa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261208157600080fd5b50813567ffffffffffffffff81111561209957600080fd5b602083019150836020828501011115611c0857600080fd5b60008060008060008060a087890312156120ca57600080fd5b863567ffffffffffffffff808211156120e257600080fd5b90880190610100828b0312156120f757600080fd5b9096506020880135908082111561210d57600080fd5b5061211a89828a0161206f565b979a90995096976040810135976060820135975060809091013595509350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461216157600080fd5b919050565b60006020828403121561217857600080fd5b6115ba8261213d565b60006020828403121561219357600080fd5b5035919050565b60008060008060008060a087890312156121b357600080fd5b6121bc8761213d565b9550602087013567ffffffffffffffff8111156121d857600080fd5b6121e489828a0161206f565b90965094506121f790506040880161213d565b925060608701359150608087013590509295509295509295565b60008060008060008060a0878903121561222a57600080fd5b863567ffffffffffffffff8082111561224257600080fd5b90880190610120828b0312156120f757600080fd5b60008060008060008060008060c0898b03121561227357600080fd5b883567ffffffffffffffff8082111561228b57600080fd5b908a0190610160828d0312156122a057600080fd5b90985060208a013590808211156122b657600080fd5b6122c28c838d0161206f565b909950975060408b01359150808211156122db57600080fd5b506122e88b828c0161206f565b999c989b5096999698976060880135976080810135975060a0013595509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561234d57600080fd5b81356002811061235c57600080fd5b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261239857600080fd5b83018035915067ffffffffffffffff8211156123b357600080fd5b602001915036819003821315611c0857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156115bd576115bd6123c8565b808201808211156115bd576115bd6123c8565b6000825161242f818460208701611ffa565b9190910192915050565b6000825161244b818460208701611ffa565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b60006020828403121561248c57600080fd5b5051919050565b8284823760008382016000815283516124b0818360208801611ffa565b0195945050505050565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60008351612505818460208801611ffa565b835190830190612519818360208801611ffa565b01949350505050565b8183823760009101908152919050565b60028110612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6000610120820190508a825289602083015273ffffffffffffffffffffffffffffffffffffffff808a16604084015288606084015280881660808401528660a08401526125bd60c0840187612532565b9390931660e08201526101000152979650505050505050565b60008261260c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b60008251612623818460208701611ffa565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b60008251612664818460208701611ffa565b7f556e657870656374656452657475726e64617461000000000000000000000000920191825250601401919050565b6000610140820190508b82528a602083015273ffffffffffffffffffffffffffffffffffffffff808b16604084015289606084015280891660808401528760a08401528660c08401526126e960e0840187612532565b93909316610100820152610120015298975050505050505050565b6000610180820190508d82528c602083015273ffffffffffffffffffffffffffffffffffffffff808d1660408401528b6060840152808b1660808401528960a08401528860c084015280881660e08401528661010084015261276a610120840187612532565b9390931661014082015261016001529a995050505050505050505056fe53706f6e736f724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c616464726573732073706f6e736f722c75696e743235362073706f6e736f7253616c742c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e496429557365724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e652c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e49642947656c61746f52656c61792e757365724175746843616c6c576974683142616c616e63653a47656c61746f52656c61792e73706f6e736f724175746843616c6c576974683142616c616e63653a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374295573657253706f6e736f724175746843616c6c576974683142616c616e63652875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e652c616464726573732073706f6e736f722c75696e743235362073706f6e736f7253616c742c75696e7438207061796d656e74547970652c6164647265737320666565546f6b656e2c75696e74323536206f6e6542616c616e6365436861696e49642947656c61746f52656c61792e7573657253706f6e736f724175746843616c6c576974683142616c616e63653aa264697066735822122054f59a7836e52d5b16585936080bfb627fab030c75d612747bdfcec26102310464736f6c63430008100033",
  "devdoc": {
    "details": "This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here",
    "kind": "dev",
    "methods": {
      "callWithSyncFee(address,bytes,address,uint256,bytes32)": {
        "details": "This is the most straightforward use case, and `transfer` handles token payments.",
        "params": {
          "_data": "Payload for call on _target",
          "_feeToken": "Payment can be done in native and ERC-20 tokens",
          "_target": "Target smart contract",
          "_taskId": "Unique task identifier generated by gelato"
        }
      },
      "sponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_call": "Relay call data packed into SponsorAuthCall struct",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator",
          "_sponsorSignature": "EIP-712 compliant signature from _call.sponsor",
          "_taskId": "Unique task identifier generated by gelato"
        }
      },
      "userAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.",
        "params": {
          "_call": "Relay call data packed into UserAuthCall struct",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator",
          "_taskId": "Unique task identifier generated by gelato",
          "_userSignature": "EIP-712 compliant signature from _call.user"
        }
      },
      "userSponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,address,uint256,uint8,address,uint256),bytes,bytes,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.",
        "params": {
          "_call": "Relay call data packed into UserSponsorAuthCall struct",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator",
          "_sponsorSignature": "EIP-712 compliant signature from _call.sponsor",
          "_taskId": "Unique task identifier generated by gelato",
          "_userSignature": "EIP-712 compliant signature from _call.user"
        }
      }
    },
    "title": "Gelato Relay contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callWithSyncFee(address,bytes,address,uint256,bytes32)": {
        "notice": "Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward"
      },
      "sponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authenticationSponsor signature allows for payment via sponsor's 1Balance balanceOracle value for exchange rate between native tokens and fee token"
      },
      "userAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,uint8,address,uint256),bytes,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with ONLY user authentication.The user here is paying for themselves, no external sponsorUser signature allows for payment via user's 1Balance balanceOracle value for exchange rate between native tokens and fee token"
      },
      "userSponsorAuthCallWith1Balance((uint256,address,bytes,address,uint256,uint256,address,uint256,uint8,address,uint256),bytes,bytes,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with BOTH sponsor and user authenticationBoth sponsor and user signature allows for payment via sponsor's 1Balance balance"
      }
    },
    "notice": "This contract deals with synchronous payments and Gelato 1Balance payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3927,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "userNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3931,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "wasCallSponsoredAlready",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}