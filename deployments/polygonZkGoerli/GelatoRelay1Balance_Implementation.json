{
  "address": "0xE45A605A120020c49ee69377B6A8dA6C06759211",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oneBalanceChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "checkerSignature",
          "type": "bytes"
        }
      ],
      "name": "LogUseGelato1BalanceV2",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SponsoredCall",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oneBalanceChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SponsoredCallV2",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_checkerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCallV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bffafced5c985f6163d6ab260da883dab76ad17ae0f8fe60113e5abc23dcad0",
  "receipt": {
    "to": null,
    "from": "0x562c4e878b5Cd1f64007358695e8187CB4517c64",
    "contractAddress": "0xE45A605A120020c49ee69377B6A8dA6C06759211",
    "transactionIndex": 0,
    "gasUsed": "614249",
    "logsBloom": "0x
    "blockHash": "0x9da6359e684a428625f5357ecc12c1cbccece67a0acca1f45ae2e484bd992334",
    "transactionHash": "0x5bffafced5c985f6163d6ab260da883dab76ad17ae0f8fe60113e5abc23dcad0",
    "logs": [],
    "blockNumber": 3305742,
    "cumulativeGasUsed": "614249",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaB0A8DCb1590C4565C35cC785dc25A0590398054"
  ],
  "numDeployments": 2,
  "solcInputHash": "8c9427734e35ceb52873de05b24d1c6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"checkerSignature\",\"type\":\"bytes\"}],\"name\":\"LogUseGelato1BalanceV2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SponsoredCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneBalanceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SponsoredCallV2\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_checkerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCallV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here\",\"kind\":\"dev\",\"methods\":{\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_call\":\"Relay call data packed into SponsoredCall struct\",\"_correlationId\":\"Unique task identifier generated by gelato\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\"}},\"sponsoredCallV2((address,bytes),bytes,bytes32)\":{\"details\":\"This method can be called directly without passing through the diamondThe validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chainPayment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_call\":\"Relay call data packed into SponsoredCallV2 struct\",\"_checkerSignature\":\"Checker signed _call.target, _call.data, _correlationId, chainId\",\"_correlationId\":\"Unique task identifier generated by gelato\"}}},\"title\":\"Gelato Relay contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token\"},\"sponsoredCallV2((address,bytes),bytes,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authentication\"}},\"notice\":\"This contract deals with synchronous payments and Gelato 1Balance payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelay1Balance.sol\":\"GelatoRelay1Balance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/GelatoRelay1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IGelatoRelay1Balance} from \\\"./interfaces/IGelatoRelay1Balance.sol\\\";\\nimport {IGelato1Balance} from \\\"./interfaces/IGelato1Balance.sol\\\";\\nimport {GelatoCallUtils} from \\\"./lib/GelatoCallUtils.sol\\\";\\nimport {SponsoredCall, SponsoredCallV2} from \\\"./types/CallTypes.sol\\\";\\n\\n/// @title  Gelato Relay contract\\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\\n/// @dev    This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelay1Balance is IGelatoRelay1Balance, IGelato1Balance {\\n    using GelatoCallUtils for address;\\n\\n    address public immutable gelato;\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _call Relay call data packed into SponsoredCall struct\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.chainId == block.chainid,\\n            \\\"GelatoRelay.sponsoredCall:chainid\\\"\\n        );\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _call.data,\\n            \\\"GelatoRelay.sponsoredCall:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _sponsor,\\n            _call.target,\\n            _feeToken,\\n            _oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _correlationId\\n        );\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @dev    This method can be called directly without passing through the diamond\\n    /// @dev    The validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chain\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _call Relay call data packed into SponsoredCallV2 struct\\n    /// @param _checkerSignature Checker signed _call.target, _call.data, _correlationId, chainId\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    function sponsoredCallV2(\\n        SponsoredCallV2 calldata _call,\\n        bytes calldata _checkerSignature,\\n        bytes32 _correlationId\\n    ) external {\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _call.data,\\n            \\\"GelatoRelay.sponsoredCallV2:\\\"\\n        );\\n\\n        emit LogUseGelato1BalanceV2(_correlationId, _checkerSignature);\\n    }\\n}\\n\",\"keccak256\":\"0xc6f5b156fd1d00244c1ae2b700e5b999e0eec82f053b2e72a99fa0baf0c2f158\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IGelato1Balance {\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed target,\\n        address indexed feeToken,\\n        uint256 oneBalanceChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 correlationId\\n    );\\n\\n    event LogUseGelato1BalanceV2(bytes32 correlationId, bytes checkerSignature);\\n}\\n\",\"keccak256\":\"0x5df95ebb6d6a9bf4cd81a4d3b610e337d052af42437a921dd38e2a445fa5b7e0\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelay1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {SponsoredCall} from \\\"../types/CallTypes.sol\\\";\\n\\ninterface IGelatoRelay1Balance {\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external;\\n\\n    function gelato() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9a8b57e67fd4da744ce1c2423b07cbc1ba1d77e38a03d2812c71f0718ad4bbc9\",\"license\":\"MIT\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(\\n        bytes calldata _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(\\n        bytes memory _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure returns (string memory) {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9117d4f06af49c2c0902f80a62669d56ce37bc71773b46fba3c453805c16e744\",\"license\":\"MIT\"},\"contracts/lib/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7d87036d7b0721fd1b23280ddfbe2c1e31e62ef6bf82730fb2513d12186477e3\",\"license\":\"MIT\"},\"contracts/types/CallTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Sponsored relay call\\nstruct SponsoredCall {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n}\\n\\n// Sponsored relay call without chainId\\nstruct SponsoredCallV2 {\\n    address target;\\n    bytes data;\\n}\\n\\n// Relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n}\\n\\n// Concurrent relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithConcurrentERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    bytes32 userSalt;\\n    uint256 userDeadline;\\n}\\n\\nstruct RelayContext {\\n    address feeToken;\\n    uint256 fee;\\n}\\n\",\"keccak256\":\"0x7ed51f3a149f3b335040438832dccde67ece4bcd0aa24e02a5c263b7af99bb92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610abe380380610abe83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610a2e610090600039600081816060015260d60152610a2e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806327be3c2414610046578063573ea5751461005b578063b6766bda146100ab575b600080fd5b61005961005436600461062b565b6100be565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b93660046106b3565b610330565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b863546146101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a636861696e6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610159565b61029b6102026040890189610758565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082018252601a81527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a00000000000060208083019190915290935061027e9250908c01908c016107c4565b73ffffffffffffffffffffffffffffffffffffffff1691906103fc565b5073ffffffffffffffffffffffffffffffffffffffff85166102c36040890160208a016107c4565b60408051878152602081018790529081018590526060810184905273ffffffffffffffffffffffffffffffffffffffff918216918916907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a450505050505050565b6103ba6103406020860186610758565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601c81527f47656c61746f52656c61792e73706f6e736f72656443616c6c56323a0000000060208083019190915290925061027e91508801886107c4565b507f3afea9aefdee2921b29c3c00850fa274782fa308026ddd5a6272ea964027c4428184846040516103ee939291906107e6565b60405180910390a150505050565b606060008473ffffffffffffffffffffffffffffffffffffffff1684604051610425919061085e565b6000604051808303816000865af19150503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b509250905080156104f45781516000036104ef5773ffffffffffffffffffffffffffffffffffffffff85163b1515836040516020016104a6919061087a565b604051602081830303815290604052906104ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015991906108bb565b505b6104fe565b6104fe8284610506565b509392505050565b60208251610514919061090c565b6004036105f15760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036105e0576044830192508183604051602001610582929190610947565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610159916004016108bb565b816040516020016105829190610976565b8060405160200161058291906109b7565b803573ffffffffffffffffffffffffffffffffffffffff8116811461062657600080fd5b919050565b600080600080600080600060e0888a03121561064657600080fd5b873567ffffffffffffffff81111561065d57600080fd5b88016060818b03121561066f57600080fd5b965061067d60208901610602565b955061068b60408901610602565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600080606085870312156106c957600080fd5b843567ffffffffffffffff808211156106e157600080fd5b90860190604082890312156106f557600080fd5b9094506020860135908082111561070b57600080fd5b818701915087601f83011261071f57600080fd5b81358181111561072e57600080fd5b88602082850101111561074057600080fd5b95986020929092019750949560400135945092505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261078d57600080fd5b83018035915067ffffffffffffffff8211156107a857600080fd5b6020019150368190038213156107bd57600080fd5b9250929050565b6000602082840312156107d657600080fd5b6107df82610602565b9392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60005b8381101561085557818101518382015260200161083d565b50506000910152565b6000825161087081846020870161083a565b9190910192915050565b6000825161088c81846020870161083a565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b60208152600082518060208401526108da81604085016020870161083a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082610942577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b6000835161095981846020880161083a565b83519083019061096d81836020880161083a565b01949350505050565b6000825161098881846020870161083a565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b600082516109c981846020870161083a565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fea2646970667358221220f290a39735c0db4df749257d9ef1946936e687d1cc546e66a411290a8374e99f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806327be3c2414610046578063573ea5751461005b578063b6766bda146100ab575b600080fd5b61005961005436600461062b565b6100be565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b93660046106b3565b610330565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b863546146101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a636861696e6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610159565b61029b6102026040890189610758565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082018252601a81527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a00000000000060208083019190915290935061027e9250908c01908c016107c4565b73ffffffffffffffffffffffffffffffffffffffff1691906103fc565b5073ffffffffffffffffffffffffffffffffffffffff85166102c36040890160208a016107c4565b60408051878152602081018790529081018590526060810184905273ffffffffffffffffffffffffffffffffffffffff918216918916907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a450505050505050565b6103ba6103406020860186610758565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601c81527f47656c61746f52656c61792e73706f6e736f72656443616c6c56323a0000000060208083019190915290925061027e91508801886107c4565b507f3afea9aefdee2921b29c3c00850fa274782fa308026ddd5a6272ea964027c4428184846040516103ee939291906107e6565b60405180910390a150505050565b606060008473ffffffffffffffffffffffffffffffffffffffff1684604051610425919061085e565b6000604051808303816000865af19150503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b509250905080156104f45781516000036104ef5773ffffffffffffffffffffffffffffffffffffffff85163b1515836040516020016104a6919061087a565b604051602081830303815290604052906104ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015991906108bb565b505b6104fe565b6104fe8284610506565b509392505050565b60208251610514919061090c565b6004036105f15760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036105e0576044830192508183604051602001610582929190610947565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610159916004016108bb565b816040516020016105829190610976565b8060405160200161058291906109b7565b803573ffffffffffffffffffffffffffffffffffffffff8116811461062657600080fd5b919050565b600080600080600080600060e0888a03121561064657600080fd5b873567ffffffffffffffff81111561065d57600080fd5b88016060818b03121561066f57600080fd5b965061067d60208901610602565b955061068b60408901610602565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600080606085870312156106c957600080fd5b843567ffffffffffffffff808211156106e157600080fd5b90860190604082890312156106f557600080fd5b9094506020860135908082111561070b57600080fd5b818701915087601f83011261071f57600080fd5b81358181111561072e57600080fd5b88602082850101111561074057600080fd5b95986020929092019750949560400135945092505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261078d57600080fd5b83018035915067ffffffffffffffff8211156107a857600080fd5b6020019150368190038213156107bd57600080fd5b9250929050565b6000602082840312156107d657600080fd5b6107df82610602565b9392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60005b8381101561085557818101518382015260200161083d565b50506000910152565b6000825161087081846020870161083a565b9190910192915050565b6000825161088c81846020870161083a565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b60208152600082518060208401526108da81604085016020870161083a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082610942577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b6000835161095981846020880161083a565b83519083019061096d81836020880161083a565b01949350505050565b6000825161098881846020870161083a565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b600082516109c981846020870161083a565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fea2646970667358221220f290a39735c0db4df749257d9ef1946936e687d1cc546e66a411290a8374e99f64736f6c63430008140033",
  "devdoc": {
    "details": "This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here",
    "kind": "dev",
    "methods": {
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_call": "Relay call data packed into SponsoredCall struct",
          "_correlationId": "Unique task identifier generated by gelato",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator"
        }
      },
      "sponsoredCallV2((address,bytes),bytes,bytes32)": {
        "details": "This method can be called directly without passing through the diamondThe validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chainPayment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_call": "Relay call data packed into SponsoredCallV2 struct",
          "_checkerSignature": "Checker signed _call.target, _call.data, _correlationId, chainId",
          "_correlationId": "Unique task identifier generated by gelato"
        }
      }
    },
    "title": "Gelato Relay contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token"
      },
      "sponsoredCallV2((address,bytes),bytes,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authentication"
      }
    },
    "notice": "This contract deals with synchronous payments and Gelato 1Balance payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}