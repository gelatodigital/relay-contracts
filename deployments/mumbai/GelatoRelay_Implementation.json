{
  "address": "0x98858E08d119b78A34176E7D2DDF65Ee85B58809",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogForwardCallSyncFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sponsorChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogForwardRequestAsyncGasTankFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogForwardRequestSyncGasTankFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "LogMetaTxRequestSyncGasTankFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGasTank",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGasTank",
          "type": "address"
        }
      ],
      "name": "LogSetGasTank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGasTankAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGasTankAdmin",
          "type": "address"
        }
      ],
      "name": "LogSetGasTankAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "service",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sponsorChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORWARD_REQUEST_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METATX_REQUEST_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gelatoFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "forwardCallSyncFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paymentType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enforceSponsorNonce",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enforceSponsorNonceOrdering",
              "type": "bool"
            }
          ],
          "internalType": "struct ForwardRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_sponsorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gelatoFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "forwardRequestGasTankFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasTank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasTankAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTankAdmin",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "messageDelivered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paymentType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaTxRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_sponsorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gelatoFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "metaTxRequestGasTankFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTank",
          "type": "address"
        }
      ],
      "name": "setGasTank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTankAdmin",
          "type": "address"
        }
      ],
      "name": "setGasTankAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6713eecc80c488778795c7e015ca622fe8eff01512913188387f27713349254d",
  "receipt": {
    "to": null,
    "from": "0xDA9644C2c2B6F50426EaBa9ce1B853e99f2D4fCa",
    "contractAddress": "0x98858E08d119b78A34176E7D2DDF65Ee85B58809",
    "transactionIndex": 2,
    "gasUsed": "2758703",
    "logsBloom": "0x
    "blockHash": "0xc682a971933d8db72fbca0a3972011e35ae92fc608536f35cf0ab4b0bb3031fd",
    "transactionHash": "0x6713eecc80c488778795c7e015ca622fe8eff01512913188387f27713349254d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27354116,
        "transactionHash": "0x6713eecc80c488778795c7e015ca622fe8eff01512913188387f27713349254d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000da9644c2c2b6f50426eaba9ce1b853e99f2d4fca",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003579def25bf4e7900000000000000000000000000000000000000000000000052925cad46f1db5200000000000000000000000000000000000000000000208cfbae4b2c240f2e1b0000000000000000000000000000000000000000000000004f3abebe21328cd900000000000000000000000000000000000000000000208cff05e91b49ce7c94",
        "logIndex": 4,
        "blockHash": "0xc682a971933d8db72fbca0a3972011e35ae92fc608536f35cf0ab4b0bb3031fd"
      }
    ],
    "blockNumber": 27354116,
    "cumulativeGasUsed": "2829648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x25aD59adbe00C2d80c86d01e2E05e1294DA84823"
  ],
  "numDeployments": 1,
  "solcInputHash": "692a202332ac2c6260d88a677ac81f23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogForwardCallSyncFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogForwardRequestAsyncGasTankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogForwardRequestSyncGasTankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogMetaTxRequestSyncGasTankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGasTank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGasTank\",\"type\":\"address\"}],\"name\":\"LogSetGasTank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGasTankAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGasTankAdmin\",\"type\":\"address\"}],\"name\":\"LogSetGasTankAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORWARD_REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METATX_REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"forwardCallSyncFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enforceSponsorNonce\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enforceSponsorNonceOrdering\",\"type\":\"bool\"}],\"internalType\":\"struct ForwardRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sponsorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"forwardRequestGasTankFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasTank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasTankAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTankAdmin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messageDelivered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaTxRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sponsorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"metaTxRequestGasTankFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTank\",\"type\":\"address\"}],\"name\":\"setGasTank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTankAdmin\",\"type\":\"address\"}],\"name\":\"setGasTankAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maliciously crafted transaction payloads could wipe out any funds left here.\",\"kind\":\"dev\",\"methods\":{\"forwardCallSyncFee(address,bytes,address,uint256,bytes32)\":{\"params\":{\"_data\":\"Payload for call on _target\",\"_feeToken\":\"payment can be done in any whitelisted token\",\"_gelatoFee\":\"Fee to be charged, denominated in feeToken\",\"_target\":\"Target smart contract\",\"_taskId\":\"Unique task indentifier\"}},\"forwardRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,uint256,uint256,bool,bool),bytes,uint256,uint256,uint256,bytes32)\":{\"params\":{\"_gelatoFee\":\"Fee to be charged by Gelato relayer, denominated in _req.feeToken\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\",\"_req\":\"Relay request data\",\"_sponsorSignature\":\"EIP-712 compliant signature from _req.sponsor\",\"_taskId\":\"Unique task indentifier\"}},\"metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,uint256,uint256,bytes32)\":{\"params\":{\"_gelatoFee\":\"Fee to be charged by Gelato relayer, denominated in _req.feeToken\",\"_req\":\"Relay request data\",\"_sponsorSignature\":\"EIP-712 compliant signature from _req.sponsor                          (can be same as _userSignature)\",\"_userSignature\":\"EIP-712 compliant signature from _req.user\"}}},\"title\":\"Gelato Meta Box contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"forwardCallSyncFee(address,bytes,address,uint256,bytes32)\":{\"notice\":\"Relay request + Sync Payment (target pays Gelato during call forward)\"},\"forwardRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,uint256,uint256,bool,bool),bytes,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Relay request + async Gas Tank payment deductions (off-chain accounting)Oracle value for exchange rate between native tokens and fee token\"},\"metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Relay request + async Gas Tank payment deductions (off-chain accounting)EOA that originates the tx, but does not necessarily pay the relayer\"}},\"notice\":\"This contract must NEVER hold funds!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelay.sol\":\"GelatoRelay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"contracts/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {_transfer, _getBalance} from \\\"./utils/Utils.sol\\\";\\nimport {ForwardRequest} from \\\"./structs/RequestTypes.sol\\\";\\nimport {IGelato} from \\\"./interfaces/IGelato.sol\\\";\\nimport {MetaTxRequest} from \\\"./structs/RequestTypes.sol\\\";\\nimport {Proxied} from \\\"./vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title Gelato Meta Box contract\\n/// @notice This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelay is Proxied, Initializable, GelatoRelayBase {\\n    using AddressUpgradeable for address;\\n\\n    // have to merge the base files as well\\n    address public immutable gelato;\\n    uint256 public immutable chainId;\\n\\n    mapping(address => uint256) public nonce;\\n    mapping(bytes32 => bool) public messageDelivered;\\n    address public gasTank;\\n    address public gasTankAdmin;\\n\\n    event LogForwardCallSyncFee(\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogForwardRequestAsyncGasTankFee(\\n        address indexed sponsor,\\n        address indexed target,\\n        uint256 sponsorChainId,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogForwardRequestSyncGasTankFee(\\n        address indexed sponsor,\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogMetaTxRequestSyncGasTankFee(\\n        bytes32 indexed taskId,\\n        address indexed user\\n    );\\n\\n    event LogSetGasTank(address oldGasTank, address newGasTank);\\n\\n    event LogSetGasTankAdmin(address oldGasTankAdmin, address newGasTankAdmin);\\n\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed service,\\n        address indexed feeToken,\\n        address user,\\n        uint256 sponsorChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 taskId\\n    );\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    modifier onlyGasTankAdmin() {\\n        require(msg.sender == gasTankAdmin, \\\"Only callable by gasTankAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n\\n        uint256 _chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _chainId := chainid()\\n        }\\n\\n        chainId = _chainId;\\n    }\\n\\n    function init(address _gasTankAdmin) external initializer {\\n        gasTankAdmin = _gasTankAdmin;\\n\\n        emit LogSetGasTankAdmin(address(0), _gasTankAdmin);\\n    }\\n\\n    function setGasTank(address _gasTank) external onlyGasTankAdmin {\\n        require(_gasTank != address(0), \\\"Invalid gasTank address\\\");\\n\\n        emit LogSetGasTank(gasTank, _gasTank);\\n\\n        gasTank = _gasTank;\\n    }\\n\\n    function setGasTankAdmin(address _gasTankAdmin) external onlyGasTankAdmin {\\n        require(_gasTankAdmin != address(0), \\\"Invalid gasTankAdmin address\\\");\\n\\n        emit LogSetGasTankAdmin(gasTankAdmin, _gasTankAdmin);\\n\\n        gasTankAdmin = _gasTankAdmin;\\n    }\\n\\n    /// @notice Relay request + Sync Payment (target pays Gelato during call forward)\\n    /// @param _target Target smart contract\\n    /// @param _data Payload for call on _target\\n    /// @param _feeToken payment can be done in any whitelisted token\\n    /// @param _gelatoFee Fee to be charged, denominated in feeToken\\n    /// @param _taskId Unique task indentifier\\n    function forwardCallSyncFee(\\n        address _target,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _gelatoFee,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        uint256 preBalance = _getBalance(_feeToken, address(this));\\n        require(_target != gasTank, \\\"target address cannot be gasTank\\\");\\n        require(_isContract(_target), \\\"Cannot call EOA\\\");\\n\\n        _target.functionCall(_data);\\n        uint256 postBalance = _getBalance(_feeToken, address(this));\\n\\n        uint256 amount = postBalance - preBalance;\\n        require(amount >= _gelatoFee, \\\"Insufficient fee\\\");\\n\\n        _transfer(_feeToken, IGelato(gelato).getFeeCollector(), amount);\\n\\n        emit LogForwardCallSyncFee(_target, _feeToken, amount, _taskId);\\n    }\\n\\n    /// @notice Relay request + async Gas Tank payment deductions (off-chain accounting)\\n    /// @param _req Relay request data\\n    /// @param _sponsorSignature EIP-712 compliant signature from _req.sponsor\\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param _taskId Unique task indentifier\\n    // solhint-disable-next-line function-max-lines\\n    function forwardRequestGasTankFee(\\n        ForwardRequest calldata _req,\\n        bytes calldata _sponsorSignature,\\n        uint256 _gelatoFee,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        require(_req.chainId == chainId, \\\"Wrong chainId\\\");\\n\\n        require(\\n            _req.paymentType == 1 || _req.paymentType == 2,\\n            \\\"paymentType must be 1 or 2\\\"\\n        );\\n\\n        require(_gelatoFee <= _req.maxFee, \\\"Gelato executor over-charged\\\");\\n\\n        // Verify and increment sponsor's nonce\\n        // We assume that all security is enforced on _req.target address,\\n        // hence we allow the sponsor to submit multiple transactions concurrently\\n        // In case one reverts, it won't stop the following ones from being executed\\n\\n        // Optionally, the dApp may not want to track smart contract nonces\\n        // We allow this option, BUT MAKE SURE _req.target IMPLEMENTS STRONG REPLAY PROTECTION!!\\n        if (_req.enforceSponsorNonce) {\\n            if (_req.enforceSponsorNonceOrdering) {\\n                // Enforce ordering on nonces,\\n                // If tx with nonce n reverts, so will txs with nonce n+1.\\n                require(_req.nonce == nonce[_req.sponsor], \\\"Invalid nonce\\\");\\n\\n                nonce[_req.sponsor] = _req.nonce + 1;\\n\\n                _verifyForwardRequestSignature(\\n                    _req,\\n                    _sponsorSignature,\\n                    _req.sponsor\\n                );\\n            } else {\\n                // Do not enforce ordering on nonces,\\n                // but still enforce replay protection\\n                // via uniqueness of message\\n                bytes32 message = _verifyForwardRequestSignature(\\n                    _req,\\n                    _sponsorSignature,\\n                    _req.sponsor\\n                );\\n\\n                require(!messageDelivered[message], \\\"Task already executed\\\");\\n                messageDelivered[message] = true;\\n            }\\n        } else {\\n            _verifyForwardRequestSignature(\\n                _req,\\n                _sponsorSignature,\\n                _req.sponsor\\n            );\\n        }\\n\\n        require(_req.target != gasTank, \\\"target address cannot be gasTank\\\");\\n        require(_isContract(_req.target), \\\"Cannot call EOA\\\");\\n\\n        _req.target.functionCall(_req.data);\\n\\n        if (_req.paymentType == 1) {\\n            // GasTank payment with asynchronous fee crediting\\n            emit LogForwardRequestAsyncGasTankFee(\\n                _req.sponsor,\\n                _req.target,\\n                _req.sponsorChainId == 0 ? chainId : _req.sponsorChainId,\\n                _req.feeToken,\\n                _gelatoFee,\\n                _taskId\\n            );\\n\\n            emit LogUseGelato1Balance(\\n                _req.sponsor,\\n                address(this),\\n                _req.feeToken,\\n                _req.sponsor, // no user param in ForwardRequest\\n                chainId,\\n                _nativeToFeeTokenXRateNumerator,\\n                _nativeToFeeTokenXRateDenominator,\\n                _taskId\\n            );\\n        } else {\\n            // TODO: deduct balance from GasTank\\n            // Credit GasTank fee\\n            emit LogForwardRequestSyncGasTankFee(\\n                _req.sponsor,\\n                _req.target,\\n                _req.feeToken,\\n                _gelatoFee,\\n                _taskId\\n            );\\n        }\\n    }\\n\\n    /// @notice Relay request + async Gas Tank payment deductions (off-chain accounting)\\n    /// @param _req Relay request data\\n    /// @param _userSignature EIP-712 compliant signature from _req.user\\n    /// @param _sponsorSignature EIP-712 compliant signature from _req.sponsor\\n    ///                          (can be same as _userSignature)\\n    /// @notice   EOA that originates the tx, but does not necessarily pay the relayer\\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\\n    // solhint-disable-next-line function-max-lines\\n    function metaTxRequestGasTankFee(\\n        MetaTxRequest calldata _req,\\n        bytes calldata _userSignature,\\n        bytes calldata _sponsorSignature,\\n        uint256 _gelatoFee,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _req.deadline == 0 || _req.deadline >= block.timestamp,\\n            \\\"Request expired\\\"\\n        );\\n\\n        require(_req.chainId == chainId, \\\"Wrong chainId\\\");\\n\\n        require(\\n            _req.paymentType == 1 || _req.paymentType == 2,\\n            \\\"paymentType must be 1 or 2\\\"\\n        );\\n\\n        require(_gelatoFee <= _req.maxFee, \\\"Executor over-charged\\\");\\n\\n        // Verify and increment user's nonce\\n        uint256 userNonce = nonce[_req.user];\\n\\n        require(_req.nonce == userNonce, \\\"Invalid nonce\\\");\\n\\n        nonce[_req.user] = userNonce + 1;\\n\\n        _verifyMetaTxRequestSignature(_req, _userSignature, _req.user);\\n        // If is sponsored tx, we also verify sponsor's signature\\n        if (_req.user != _req.sponsor) {\\n            _verifyMetaTxRequestSignature(\\n                _req,\\n                _sponsorSignature,\\n                _req.sponsor\\n            );\\n        }\\n\\n        require(_req.target != gasTank, \\\"target address cannot be gasTank\\\");\\n        require(_isContract(_req.target), \\\"Cannot call EOA\\\");\\n\\n        _req.target.functionCall(_req.data);\\n\\n        if (_req.paymentType == 1) {\\n            emit LogUseGelato1Balance(\\n                _req.sponsor,\\n                address(this),\\n                _req.feeToken,\\n                _req.user,\\n                chainId,\\n                _nativeToFeeTokenXRateNumerator,\\n                _nativeToFeeTokenXRateDenominator,\\n                _taskId\\n            );\\n        } else if (_req.paymentType == 2) {\\n            emit LogMetaTxRequestSyncGasTankFee(_taskId, _req.user);\\n        }\\n    }\\n\\n    function getDomainSeparator() external view returns (bytes32) {\\n        return _getDomainSeparator(chainId);\\n    }\\n}\\n\",\"keccak256\":\"0x5adb28da49a7bb61babfcd9d5ca97f683098d6b92efe7ff24cd33de39941c837\",\"license\":\"MIT\"},\"contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {ForwardRequest} from \\\"../structs/RequestTypes.sol\\\";\\nimport {MetaTxRequest} from \\\"../structs/RequestTypes.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    bytes32 public constant FORWARD_REQUEST_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"ForwardRequest(uint256 chainId,address target,bytes data,address feeToken,uint256 paymentType,uint256 maxFee,uint256 gas,address sponsor,uint256 sponsorChainId,uint256 nonce,bool enforceSponsorNonce,bool enforceSponsorNonceOrdering)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant METATX_REQUEST_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"MetaTxRequest(uint256 chainId,address target,bytes data,address feeToken,uint256 paymentType,uint256 maxFee,uint256 gas,address user,address sponsor,uint256 sponsorChainId,uint256 nonce,uint256 deadline)\\\"\\n            )\\n        );\\n\\n    // solhint-disable-next-line max-line-length\\n    string public constant EIP712_DOMAIN_TYPE =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    function _getDomainSeparator(uint256 _chainId)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n                    keccak256(bytes(\\\"GelatoMetaBox\\\")),\\n                    keccak256(bytes(\\\"V1\\\")),\\n                    bytes32(_chainId),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _verifyForwardRequestSignature(\\n        ForwardRequest calldata _req,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal view returns (bytes32) {\\n        bytes32 domainSeparator = _getDomainSeparator(_req.chainId);\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(_abiEncodeForwardRequest(_req))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        return digest;\\n    }\\n\\n    function _verifyMetaTxRequestSignature(\\n        MetaTxRequest calldata _req,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal view {\\n        bytes32 domainSeparator = _getDomainSeparator(_req.chainId);\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(_abiEncodeMetaTxRequest(_req))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"Invalid signature\\\"\\n        );\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _abiEncodeForwardRequest(ForwardRequest calldata _req)\\n        internal\\n        pure\\n        returns (bytes memory encodedReq)\\n    {\\n        encodedReq = abi.encode(\\n            FORWARD_REQUEST_TYPEHASH,\\n            _req.chainId,\\n            _req.target,\\n            keccak256(_req.data),\\n            _req.feeToken,\\n            _req.paymentType,\\n            _req.maxFee,\\n            _req.sponsor,\\n            _req.sponsorChainId,\\n            _req.nonce,\\n            _req.enforceSponsorNonce,\\n            _req.enforceSponsorNonceOrdering\\n        );\\n    }\\n\\n    function _abiEncodeMetaTxRequest(MetaTxRequest calldata _req)\\n        internal\\n        pure\\n        returns (bytes memory encodedReq)\\n    {\\n        encodedReq = abi.encode(\\n            METATX_REQUEST_TYPEHASH,\\n            _req.chainId,\\n            _req.target,\\n            keccak256(_req.data),\\n            _req.feeToken,\\n            _req.paymentType,\\n            _req.maxFee,\\n            _req.user,\\n            _req.sponsor,\\n            _req.sponsorChainId,\\n            _req.nonce,\\n            _req.deadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc0114afe60a5ee63ff9d2174eb86aa3612a4c4a4592deabe0d1f53c15ddf64a6\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xa725071f4a756a8517e32a44830942852c0bf64dab6d9a53fa9e5280b5cbfd98\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IGelato {\\n    function getFeeCollector() external view returns (address feeCollector);\\n}\\n\",\"keccak256\":\"0x374fe72e82bdb717b592560acf64f25fcefed78a7456f18e2f44ca4e6c6a4758\",\"license\":\"MIT\"},\"contracts/structs/RequestTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// Relay request with built-in MetaTx support with signature verification on behalf of user\\n// In case a sponsor (other than user) wants to pay for the tx,\\n// we will also need to verify sponsor's signature\\nstruct MetaTxRequest {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address feeToken;\\n    uint256 paymentType;\\n    uint256 maxFee;\\n    address user;\\n    address sponsor; // could be same as user\\n    uint256 sponsorChainId;\\n    uint256 nonce;\\n    uint256 deadline;\\n}\\n\\n// Similar to MetaTxRequest, but no need to implement user-specific signature verification logic\\n// Only sponsor signature is verified in order to ensure integrity of fee payments\\nstruct ForwardRequest {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address feeToken;\\n    uint256 paymentType;\\n    uint256 maxFee;\\n    address sponsor;\\n    uint256 sponsorChainId;\\n    uint256 nonce;\\n    bool enforceSponsorNonce;\\n    bool enforceSponsorNonceOrdering;\\n}\\n\",\"keccak256\":\"0xcc3a3385c5fd2f74db1928cc3c5461eb94ab51fa420390fbc0e1a915e35ef7bd\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable-next-line\\nfunction _transfer(\\n    address _token,\\n    address _to,\\n    uint256 _amount\\n) {\\n    if (_amount == 0) return;\\n\\n    if (_token == NATIVE_TOKEN) {\\n        Address.sendValue(payable(_to), _amount);\\n    } else {\\n        SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\\n    }\\n}\\n\\n// solhint-disable-next-line\\nfunction _getBalance(address token, address user) view returns (uint256) {\\n    return token == NATIVE_TOKEN ? user.balance : IERC20(token).balanceOf(user);\\n}\\n\",\"keccak256\":\"0xab945c51a0ac3ab3f981ae8ac5e7e5430eff36e79870af7d601863293129d9dc\",\"license\":\"MIT\"},\"contracts/vendor/hardhat-deploy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    // solhint-disable-next-line max-line-length\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41a0b2fa7a61b91ebe122ce6443fbf1d0849c019e7b4dec5f02f1a8bc8b1fd8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200322b3803806200322b83398101604081905262000034916200004a565b6001600160a01b03166080524660a0526200007c565b6000602082840312156200005d57600080fd5b81516001600160a01b03811681146200007557600080fd5b9392505050565b60805160a051613143620000e8600039600081816102470152818161072d01528181610d1801528181610e210152818161121d0152818161173b01526117f50152600081816101c5015281816106a201528181611115015281816118360152611ab301526131436000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638e80340b11610097578063c3f28abd11610066578063c3f28abd1461027c578063e57d130114610291578063ed24911d146102a4578063f37bf92e146102ac57600080fd5b80638e80340b14610227578063956309681461023a5780639a8a059214610242578063ac4cae3a1461026957600080fd5b806348271fa0116100d357806348271fa01461017b578063573ea575146101c057806370ae92d2146101e75780637be52e591461020757600080fd5b806319ab453c146101055780632329f9bb1461011a5780633e40957d1461015257806343e297b214610168575b600080fd5b610118610113366004612a9f565b6102bf565b005b61013d610128366004612abc565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61015a6104cd565b604051908152602001610149565b610118610176366004612a9f565b6104f1565b60045461019b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610149565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b61015a6101f5366004612a9f565b60016020526000908152604090205481565b60035461019b9073ffffffffffffffffffffffffffffffffffffffff1681565b610118610235366004612b30565b61068a565b61015a610f24565b61015a7f000000000000000000000000000000000000000000000000000000000000000081565b610118610277366004612a9f565b610f48565b6102846110e1565b6040516101499190612bec565b61011861029f366004612c3d565b6110fd565b61015a6117ee565b6101186102ba366004612cf2565b61181e565b600054610100900460ff16158080156102df5750600054600160ff909116105b806102f95750303b1580156102f9575060005460ff166001145b61038a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103e857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155604080516000815260208101929092527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a180156104c957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60405180610100016040528060cb815260200161304360cb91398051906020012081565b60045473ffffffffffffffffffffffffffffffffffffffff163314610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e0000006044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff81166105ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642067617354616e6b20616464726573730000000000000000006044820152606401610381565b6003546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f646b74924371efeac02b8806e41f72490eaa858cf528e6f59768d6bbcea84fba910160405180910390a1600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b86357f0000000000000000000000000000000000000000000000000000000000000000146107b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e4964000000000000000000000000000000000000006044820152606401610381565b8660800135600114806107ca575086608001356002145b610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f7220320000000000006044820152606401610381565b8660a0013584111561089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f47656c61746f206578656375746f72206f7665722d63686172676564000000006044820152606401610381565b6108b061014088016101208901612d7a565b15610ac4576108c761016088016101408901612d7a565b156109f457600160006108e060e08a0160c08b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610100013514610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e6365000000000000000000000000000000000000006044820152606401610381565b6109986101008801356001612dc6565b600160006109ac60e08b0160c08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020556109ee8787876109e960e0840160c08501612a9f565b611bad565b50610adc565b6000610a0c8888886109e960e0840160c08501612a9f565b60008181526002602052604090205490915060ff1615610a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5461736b20616c726561647920657865637574656400000000000000000000006044820152606401610381565b600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610adc565b610ada8787876109e960e0840160c08501612a9f565b505b60035473ffffffffffffffffffffffffffffffffffffffff16610b056040890160208a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1603610b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b610bb1610b956040890160208a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b610c88610c276040890189612dde565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6c9250505060408a0160208b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1690611d2e565b508660800135600103610e6857610ca56040880160208901612a9f565b73ffffffffffffffffffffffffffffffffffffffff16610ccb60e0890160c08a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f65896ccac284fcb1ee73c45d950853d73d66cd1c55f61ba945159377d140677360e08a013515610d16578960e00135610d38565b7f00000000000000000000000000000000000000000000000000000000000000005b610d4860808c0160608d01612a9f565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015281018890526060810185905260800160405180910390a3610d936080880160608901612a9f565b73ffffffffffffffffffffffffffffffffffffffff1630610dba60e08a0160c08b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f9ed647f9a908333fa389d7b2880faf2988ef96e52c88f6f3a91e73b81f9a9518610e0160e08c0160c08d01612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682527f000000000000000000000000000000000000000000000000000000000000000060208301528101889052606081018790526080810186905260a00160405180910390a4610f1b565b610e786040880160208901612a9f565b73ffffffffffffffffffffffffffffffffffffffff16610e9e60e0890160c08a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f143674915c965337534cbf757620018597dc069ea1fa7d79ef405cd9f1554eb1610ee560808b0160608c01612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201899052810185905260600160405180910390a35b50505050505050565b60405180610120016040528060e88152602001612f0960e891398051906020012081565b60045473ffffffffffffffffffffffffffffffffffffffff163314610fc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e0000006044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff8116611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c69642067617354616e6b41646d696e2061646472657373000000006044820152606401610381565b6004546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a1600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604051806080016040528060528152602001612ff16052913981565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b61014089013515806111b357504289610140013510155b611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f52657175657374206578706972656400000000000000000000000000000000006044820152606401610381565b88357f0000000000000000000000000000000000000000000000000000000000000000146112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e4964000000000000000000000000000000000000006044820152606401610381565b8860800135600114806112ba575088608001356002145b611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f7220320000000000006044820152606401610381565b8860a0013584111561138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4578656375746f72206f7665722d6368617267656400000000000000000000006044820152606401610381565b60006001816113a360e08d0160c08e01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808a61012001351461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e6365000000000000000000000000000000000000006044820152606401610381565b611459816001612dc6565b6001600061146d60e08e0160c08f01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020556114af8a8a8a6114aa60e0840160c08501612a9f565b611d77565b6114c06101008b0160e08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff166114e660e08c0160c08d01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1614611518576115188a88886114aa610100840160e08501612a9f565b60035473ffffffffffffffffffffffffffffffffffffffff1661154160408c0160208d01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16036115be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b6115d1610b9560408c0160208d01612a9f565b611637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b61168c61164760408c018c612dde565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6c9250505060408d0160208e01612a9f565b508960800135600103611782576116a960808b0160608c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16306116d16101008d0160e08e01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f9ed647f9a908333fa389d7b2880faf2988ef96e52c88f6f3a91e73b81f9a95188d60c001602081019061171b9190612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682527f000000000000000000000000000000000000000000000000000000000000000060208301528101899052606081018890526080810187905260a00160405180910390a46117e2565b89608001356002036117e25761179e60e08b0160c08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16827f12dbf19c6538bb833b64d020ba1fb6a9ae0e6d495cb70b84eab4c00d2d2015d460405160405180910390a35b50505050505050505050565b60006118197f0000000000000000000000000000000000000000000000000000000000000000611ef4565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146118bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b60006118c98430611ffa565b60035490915073ffffffffffffffffffffffffffffffffffffffff90811690881603611951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff87163b6119cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b611a2686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505073ffffffffffffffffffffffffffffffffffffffff8b1692915050611d2e565b506000611a338530611ffa565b90506000611a418383612e43565b905084811015611aad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e73756666696369656e7420666565000000000000000000000000000000006044820152606401610381565b611b46867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166312fde4b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190612e5a565b836120df565b6040805173ffffffffffffffffffffffffffffffffffffffff888116825260208201849052918101869052908a16907f1618dc761784eda45de355d3b21a8e1b76070c7cebc7479971350f6ac0f55be59060600160405180910390a2505050505050505050565b600080611bba8635611ef4565b9050600081611bc888612143565b8051602091820120604051611c0f9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080611c6a8389898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061228d92505050565b90925090506000816004811115611c8357611c83612e77565b148015611cbb57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611d21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610381565b5090979650505050505050565b6060611d7083836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506122fb565b9392505050565b6000611d838535611ef4565b9050600081611d9187612312565b8051602091820120604051611dd89392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080611e338388888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061228d92505050565b90925090506000816004811115611e4c57611e4c612e77565b148015611e8457508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610381565b5050505050505050565b6000604051806080016040528060528152602001612ff1605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a22836060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146120c2576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190612ea6565b611d70565b5073ffffffffffffffffffffffffffffffffffffffff1631919050565b806000036120ec57505050565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff841601612138576121338282612434565b505050565b61213383838361258e565b606060405180610120016040528060e88152602001612f0960e8913980516020918201209083359061217b9060408601908601612a9f565b6121886040860186612dde565b604051612196929190612ebf565b6040519081900390206121af6080870160608801612a9f565b608087013560a08801356121c960e08a0160c08b01612a9f565b60e08a01356101008b01356121e66101408d016101208e01612d7a565b6121f86101608e016101408f01612d7a565b60408051602081019d909d528c019a909a5273ffffffffffffffffffffffffffffffffffffffff98891660608c015260808b019790975294871660a08a015260c089019390935260e0880191909152909316610100860152610120850192909252610140840191909152151561016083015215156101808201526101a0015b6040516020818303038152906040529050919050565b60008082516041036122c35760208301516040840151606085015160001a6122b78782858561261b565b945094505050506122f4565b82516040036122ec57602083015160408401516122e1868383612733565b9350935050506122f4565b506000905060025b9250929050565b606061230a8484600085612785565b949350505050565b606060405180610100016040528060cb815260200161304360cb913980516020918201209083359061234a9060408601908601612a9f565b6123576040860186612dde565b604051612365929190612ebf565b60405190819003902061237e6080870160608801612a9f565b608087013560a088013561239860e08a0160c08b01612a9f565b6123a96101008b0160e08c01612a9f565b60408051602081019a909a5289019790975273ffffffffffffffffffffffffffffffffffffffff9586166060890152608088019490945291841660a087015260c086015260e08501528116610100848101919091529116610120838101919091529084013561014083810191909152908401356101608301528301356101808201526101a001612277565b8047101561249e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610381565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146124f8576040519150601f19603f3d011682016040523d82523d6000602084013e6124fd565b606091505b5050905080612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610381565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261213390849061291b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612652575060009050600361272a565b8460ff16601b1415801561266a57508460ff16601c14155b1561267b575060009050600461272a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156126cf573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166127235760006001925092505061272a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161276960ff86901c601b612dc6565b90506127778782888561261b565b935093505050935093915050565b606082471015612817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610381565b73ffffffffffffffffffffffffffffffffffffffff85163b612895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610381565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128be9190612ecf565b60006040518083038185875af1925050503d80600081146128fb576040519150601f19603f3d011682016040523d82523d6000602084013e612900565b606091505b5091509150612910828286612a27565b979650505050505050565b600061297d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122fb9092919063ffffffff16565b805190915015612133578080602001905181019061299b9190612eeb565b612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610381565b60608315612a36575081611d70565b825115612a465782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103819190612bec565b73ffffffffffffffffffffffffffffffffffffffff81168114612a9c57600080fd5b50565b600060208284031215612ab157600080fd5b8135611d7081612a7a565b600060208284031215612ace57600080fd5b5035919050565b60006101608284031215612ae857600080fd5b50919050565b60008083601f840112612b0057600080fd5b50813567ffffffffffffffff811115612b1857600080fd5b6020830191508360208285010111156122f457600080fd5b600080600080600080600060c0888a031215612b4b57600080fd5b873567ffffffffffffffff80821115612b6357600080fd5b612b6f8b838c01612ad5565b985060208a0135915080821115612b8557600080fd5b50612b928a828b01612aee565b989b909a509798604081013598606082013598506080820135975060a09091013595509350505050565b60005b83811015612bd7578181015183820152602001612bbf565b83811115612be6576000848401525b50505050565b6020815260008251806020840152612c0b816040850160208701612bbc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600080600080600080600080600060e08a8c031215612c5b57600080fd5b893567ffffffffffffffff80821115612c7357600080fd5b612c7f8d838e01612ad5565b9a5060208c0135915080821115612c9557600080fd5b612ca18d838e01612aee565b909a50985060408c0135915080821115612cba57600080fd5b50612cc78c828d01612aee565b9a9d999c50979a9799986060890135986080810135985060a0810135975060c0013595509350505050565b60008060008060008060a08789031215612d0b57600080fd5b8635612d1681612a7a565b9550602087013567ffffffffffffffff811115612d3257600080fd5b612d3e89828a01612aee565b9096509450506040870135612d5281612a7a565b959894975092956060810135946080909101359350915050565b8015158114612a9c57600080fd5b600060208284031215612d8c57600080fd5b8135611d7081612d6c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612dd957612dd9612d97565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e1357600080fd5b83018035915067ffffffffffffffff821115612e2e57600080fd5b6020019150368190038213156122f457600080fd5b600082821015612e5557612e55612d97565b500390565b600060208284031215612e6c57600080fd5b8151611d7081612a7a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215612eb857600080fd5b5051919050565b8183823760009101908152919050565b60008251612ee1818460208701612bbc565b9190910192915050565b600060208284031215612efd57600080fd5b8151611d7081612d6c56fe466f7277617264526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c75696e74323536206761732c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c626f6f6c20656e666f72636553706f6e736f724e6f6e63652c626f6f6c20656e666f72636553706f6e736f724e6f6e63654f72646572696e6729454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294d6574615478526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c75696e74323536206761732c6164647265737320757365722c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a2646970667358221220dfea4c9e828b1ee31a4f7085c39efb4ad1a58ddec9515157c7988d76cb8b33c964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638e80340b11610097578063c3f28abd11610066578063c3f28abd1461027c578063e57d130114610291578063ed24911d146102a4578063f37bf92e146102ac57600080fd5b80638e80340b14610227578063956309681461023a5780639a8a059214610242578063ac4cae3a1461026957600080fd5b806348271fa0116100d357806348271fa01461017b578063573ea575146101c057806370ae92d2146101e75780637be52e591461020757600080fd5b806319ab453c146101055780632329f9bb1461011a5780633e40957d1461015257806343e297b214610168575b600080fd5b610118610113366004612a9f565b6102bf565b005b61013d610128366004612abc565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61015a6104cd565b604051908152602001610149565b610118610176366004612a9f565b6104f1565b60045461019b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610149565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b61015a6101f5366004612a9f565b60016020526000908152604090205481565b60035461019b9073ffffffffffffffffffffffffffffffffffffffff1681565b610118610235366004612b30565b61068a565b61015a610f24565b61015a7f000000000000000000000000000000000000000000000000000000000000000081565b610118610277366004612a9f565b610f48565b6102846110e1565b6040516101499190612bec565b61011861029f366004612c3d565b6110fd565b61015a6117ee565b6101186102ba366004612cf2565b61181e565b600054610100900460ff16158080156102df5750600054600160ff909116105b806102f95750303b1580156102f9575060005460ff166001145b61038a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103e857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155604080516000815260208101929092527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a180156104c957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60405180610100016040528060cb815260200161304360cb91398051906020012081565b60045473ffffffffffffffffffffffffffffffffffffffff163314610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e0000006044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff81166105ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642067617354616e6b20616464726573730000000000000000006044820152606401610381565b6003546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f646b74924371efeac02b8806e41f72490eaa858cf528e6f59768d6bbcea84fba910160405180910390a1600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b86357f0000000000000000000000000000000000000000000000000000000000000000146107b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e4964000000000000000000000000000000000000006044820152606401610381565b8660800135600114806107ca575086608001356002145b610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f7220320000000000006044820152606401610381565b8660a0013584111561089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f47656c61746f206578656375746f72206f7665722d63686172676564000000006044820152606401610381565b6108b061014088016101208901612d7a565b15610ac4576108c761016088016101408901612d7a565b156109f457600160006108e060e08a0160c08b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610100013514610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e6365000000000000000000000000000000000000006044820152606401610381565b6109986101008801356001612dc6565b600160006109ac60e08b0160c08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020556109ee8787876109e960e0840160c08501612a9f565b611bad565b50610adc565b6000610a0c8888886109e960e0840160c08501612a9f565b60008181526002602052604090205490915060ff1615610a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5461736b20616c726561647920657865637574656400000000000000000000006044820152606401610381565b600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610adc565b610ada8787876109e960e0840160c08501612a9f565b505b60035473ffffffffffffffffffffffffffffffffffffffff16610b056040890160208a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1603610b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b610bb1610b956040890160208a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b610c88610c276040890189612dde565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6c9250505060408a0160208b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1690611d2e565b508660800135600103610e6857610ca56040880160208901612a9f565b73ffffffffffffffffffffffffffffffffffffffff16610ccb60e0890160c08a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f65896ccac284fcb1ee73c45d950853d73d66cd1c55f61ba945159377d140677360e08a013515610d16578960e00135610d38565b7f00000000000000000000000000000000000000000000000000000000000000005b610d4860808c0160608d01612a9f565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015281018890526060810185905260800160405180910390a3610d936080880160608901612a9f565b73ffffffffffffffffffffffffffffffffffffffff1630610dba60e08a0160c08b01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f9ed647f9a908333fa389d7b2880faf2988ef96e52c88f6f3a91e73b81f9a9518610e0160e08c0160c08d01612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682527f000000000000000000000000000000000000000000000000000000000000000060208301528101889052606081018790526080810186905260a00160405180910390a4610f1b565b610e786040880160208901612a9f565b73ffffffffffffffffffffffffffffffffffffffff16610e9e60e0890160c08a01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f143674915c965337534cbf757620018597dc069ea1fa7d79ef405cd9f1554eb1610ee560808b0160608c01612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201899052810185905260600160405180910390a35b50505050505050565b60405180610120016040528060e88152602001612f0960e891398051906020012081565b60045473ffffffffffffffffffffffffffffffffffffffff163314610fc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e0000006044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff8116611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c69642067617354616e6b41646d696e2061646472657373000000006044820152606401610381565b6004546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a1600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604051806080016040528060528152602001612ff16052913981565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b61014089013515806111b357504289610140013510155b611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f52657175657374206578706972656400000000000000000000000000000000006044820152606401610381565b88357f0000000000000000000000000000000000000000000000000000000000000000146112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e4964000000000000000000000000000000000000006044820152606401610381565b8860800135600114806112ba575088608001356002145b611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f7220320000000000006044820152606401610381565b8860a0013584111561138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4578656375746f72206f7665722d6368617267656400000000000000000000006044820152606401610381565b60006001816113a360e08d0160c08e01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808a61012001351461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e6365000000000000000000000000000000000000006044820152606401610381565b611459816001612dc6565b6001600061146d60e08e0160c08f01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020556114af8a8a8a6114aa60e0840160c08501612a9f565b611d77565b6114c06101008b0160e08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff166114e660e08c0160c08d01612a9f565b73ffffffffffffffffffffffffffffffffffffffff1614611518576115188a88886114aa610100840160e08501612a9f565b60035473ffffffffffffffffffffffffffffffffffffffff1661154160408c0160208d01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16036115be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b6115d1610b9560408c0160208d01612a9f565b611637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b61168c61164760408c018c612dde565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6c9250505060408d0160208e01612a9f565b508960800135600103611782576116a960808b0160608c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16306116d16101008d0160e08e01612a9f565b73ffffffffffffffffffffffffffffffffffffffff167f9ed647f9a908333fa389d7b2880faf2988ef96e52c88f6f3a91e73b81f9a95188d60c001602081019061171b9190612a9f565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682527f000000000000000000000000000000000000000000000000000000000000000060208301528101899052606081018890526080810187905260a00160405180910390a46117e2565b89608001356002036117e25761179e60e08b0160c08c01612a9f565b73ffffffffffffffffffffffffffffffffffffffff16827f12dbf19c6538bb833b64d020ba1fb6a9ae0e6d495cb70b84eab4c00d2d2015d460405160405180910390a35b50505050505050505050565b60006118197f0000000000000000000000000000000000000000000000000000000000000000611ef4565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146118bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610381565b60006118c98430611ffa565b60035490915073ffffffffffffffffffffffffffffffffffffffff90811690881603611951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b6044820152606401610381565b73ffffffffffffffffffffffffffffffffffffffff87163b6119cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f4100000000000000000000000000000000006044820152606401610381565b611a2686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505073ffffffffffffffffffffffffffffffffffffffff8b1692915050611d2e565b506000611a338530611ffa565b90506000611a418383612e43565b905084811015611aad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e73756666696369656e7420666565000000000000000000000000000000006044820152606401610381565b611b46867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166312fde4b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190612e5a565b836120df565b6040805173ffffffffffffffffffffffffffffffffffffffff888116825260208201849052918101869052908a16907f1618dc761784eda45de355d3b21a8e1b76070c7cebc7479971350f6ac0f55be59060600160405180910390a2505050505050505050565b600080611bba8635611ef4565b9050600081611bc888612143565b8051602091820120604051611c0f9392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080611c6a8389898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061228d92505050565b90925090506000816004811115611c8357611c83612e77565b148015611cbb57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611d21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610381565b5090979650505050505050565b6060611d7083836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506122fb565b9392505050565b6000611d838535611ef4565b9050600081611d9187612312565b8051602091820120604051611dd89392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080611e338388888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061228d92505050565b90925090506000816004811115611e4c57611e4c612e77565b148015611e8457508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610381565b5050505050505050565b6000604051806080016040528060528152602001612ff1605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a22836060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146120c2576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190612ea6565b611d70565b5073ffffffffffffffffffffffffffffffffffffffff1631919050565b806000036120ec57505050565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff841601612138576121338282612434565b505050565b61213383838361258e565b606060405180610120016040528060e88152602001612f0960e8913980516020918201209083359061217b9060408601908601612a9f565b6121886040860186612dde565b604051612196929190612ebf565b6040519081900390206121af6080870160608801612a9f565b608087013560a08801356121c960e08a0160c08b01612a9f565b60e08a01356101008b01356121e66101408d016101208e01612d7a565b6121f86101608e016101408f01612d7a565b60408051602081019d909d528c019a909a5273ffffffffffffffffffffffffffffffffffffffff98891660608c015260808b019790975294871660a08a015260c089019390935260e0880191909152909316610100860152610120850192909252610140840191909152151561016083015215156101808201526101a0015b6040516020818303038152906040529050919050565b60008082516041036122c35760208301516040840151606085015160001a6122b78782858561261b565b945094505050506122f4565b82516040036122ec57602083015160408401516122e1868383612733565b9350935050506122f4565b506000905060025b9250929050565b606061230a8484600085612785565b949350505050565b606060405180610100016040528060cb815260200161304360cb913980516020918201209083359061234a9060408601908601612a9f565b6123576040860186612dde565b604051612365929190612ebf565b60405190819003902061237e6080870160608801612a9f565b608087013560a088013561239860e08a0160c08b01612a9f565b6123a96101008b0160e08c01612a9f565b60408051602081019a909a5289019790975273ffffffffffffffffffffffffffffffffffffffff9586166060890152608088019490945291841660a087015260c086015260e08501528116610100848101919091529116610120838101919091529084013561014083810191909152908401356101608301528301356101808201526101a001612277565b8047101561249e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610381565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146124f8576040519150601f19603f3d011682016040523d82523d6000602084013e6124fd565b606091505b5050905080612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610381565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261213390849061291b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612652575060009050600361272a565b8460ff16601b1415801561266a57508460ff16601c14155b1561267b575060009050600461272a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156126cf573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166127235760006001925092505061272a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161276960ff86901c601b612dc6565b90506127778782888561261b565b935093505050935093915050565b606082471015612817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610381565b73ffffffffffffffffffffffffffffffffffffffff85163b612895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610381565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128be9190612ecf565b60006040518083038185875af1925050503d80600081146128fb576040519150601f19603f3d011682016040523d82523d6000602084013e612900565b606091505b5091509150612910828286612a27565b979650505050505050565b600061297d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122fb9092919063ffffffff16565b805190915015612133578080602001905181019061299b9190612eeb565b612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610381565b60608315612a36575081611d70565b825115612a465782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103819190612bec565b73ffffffffffffffffffffffffffffffffffffffff81168114612a9c57600080fd5b50565b600060208284031215612ab157600080fd5b8135611d7081612a7a565b600060208284031215612ace57600080fd5b5035919050565b60006101608284031215612ae857600080fd5b50919050565b60008083601f840112612b0057600080fd5b50813567ffffffffffffffff811115612b1857600080fd5b6020830191508360208285010111156122f457600080fd5b600080600080600080600060c0888a031215612b4b57600080fd5b873567ffffffffffffffff80821115612b6357600080fd5b612b6f8b838c01612ad5565b985060208a0135915080821115612b8557600080fd5b50612b928a828b01612aee565b989b909a509798604081013598606082013598506080820135975060a09091013595509350505050565b60005b83811015612bd7578181015183820152602001612bbf565b83811115612be6576000848401525b50505050565b6020815260008251806020840152612c0b816040850160208701612bbc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600080600080600080600080600060e08a8c031215612c5b57600080fd5b893567ffffffffffffffff80821115612c7357600080fd5b612c7f8d838e01612ad5565b9a5060208c0135915080821115612c9557600080fd5b612ca18d838e01612aee565b909a50985060408c0135915080821115612cba57600080fd5b50612cc78c828d01612aee565b9a9d999c50979a9799986060890135986080810135985060a0810135975060c0013595509350505050565b60008060008060008060a08789031215612d0b57600080fd5b8635612d1681612a7a565b9550602087013567ffffffffffffffff811115612d3257600080fd5b612d3e89828a01612aee565b9096509450506040870135612d5281612a7a565b959894975092956060810135946080909101359350915050565b8015158114612a9c57600080fd5b600060208284031215612d8c57600080fd5b8135611d7081612d6c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612dd957612dd9612d97565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e1357600080fd5b83018035915067ffffffffffffffff821115612e2e57600080fd5b6020019150368190038213156122f457600080fd5b600082821015612e5557612e55612d97565b500390565b600060208284031215612e6c57600080fd5b8151611d7081612a7a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215612eb857600080fd5b5051919050565b8183823760009101908152919050565b60008251612ee1818460208701612bbc565b9190910192915050565b600060208284031215612efd57600080fd5b8151611d7081612d6c56fe466f7277617264526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c75696e74323536206761732c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c626f6f6c20656e666f72636553706f6e736f724e6f6e63652c626f6f6c20656e666f72636553706f6e736f724e6f6e63654f72646572696e6729454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294d6574615478526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c75696e74323536206761732c6164647265737320757365722c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a2646970667358221220dfea4c9e828b1ee31a4f7085c39efb4ad1a58ddec9515157c7988d76cb8b33c964736f6c634300080f0033",
  "devdoc": {
    "details": "Maliciously crafted transaction payloads could wipe out any funds left here.",
    "kind": "dev",
    "methods": {
      "forwardCallSyncFee(address,bytes,address,uint256,bytes32)": {
        "params": {
          "_data": "Payload for call on _target",
          "_feeToken": "payment can be done in any whitelisted token",
          "_gelatoFee": "Fee to be charged, denominated in feeToken",
          "_target": "Target smart contract",
          "_taskId": "Unique task indentifier"
        }
      },
      "forwardRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,uint256,uint256,bool,bool),bytes,uint256,uint256,uint256,bytes32)": {
        "params": {
          "_gelatoFee": "Fee to be charged by Gelato relayer, denominated in _req.feeToken",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator",
          "_req": "Relay request data",
          "_sponsorSignature": "EIP-712 compliant signature from _req.sponsor",
          "_taskId": "Unique task indentifier"
        }
      },
      "metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,uint256,uint256,bytes32)": {
        "params": {
          "_gelatoFee": "Fee to be charged by Gelato relayer, denominated in _req.feeToken",
          "_req": "Relay request data",
          "_sponsorSignature": "EIP-712 compliant signature from _req.sponsor                          (can be same as _userSignature)",
          "_userSignature": "EIP-712 compliant signature from _req.user"
        }
      }
    },
    "title": "Gelato Meta Box contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "forwardCallSyncFee(address,bytes,address,uint256,bytes32)": {
        "notice": "Relay request + Sync Payment (target pays Gelato during call forward)"
      },
      "forwardRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,uint256,uint256,bool,bool),bytes,uint256,uint256,uint256,bytes32)": {
        "notice": "Relay request + async Gas Tank payment deductions (off-chain accounting)Oracle value for exchange rate between native tokens and fee token"
      },
      "metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,uint256,uint256,bytes32)": {
        "notice": "Relay request + async Gas Tank payment deductions (off-chain accounting)EOA that originates the tx, but does not necessarily pay the relayer"
      }
    },
    "notice": "This contract must NEVER hold funds!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2714,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2718,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "messageDelivered",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2720,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "gasTank",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2722,
        "contract": "contracts/GelatoRelay.sol:GelatoRelay",
        "label": "gasTankAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}