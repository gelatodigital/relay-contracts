{
  "address": "0x5d9b7540d352dc491b79dcf5f9dae4f3226e5641",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oneBalanceChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogUseGelato1BalanceV2",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SponsoredCall",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oneBalanceChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_vs",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCallV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x698e293105bcb8019a344901f3dfc3f81f0891cc1b5f6ad751c78c0779c83c82",
  "receipt": {
    "to": null,
    "from": "0x2d20e2882f4052eecda682f6211477e4ebfe4b06",
    "contractAddress": "0x5d9b7540d352dc491b79dcf5f9dae4f3226e5641",
    "transactionIndex": "0x7",
    "gasUsed": "0x90412",
    "logsBloom": "0x
    "blockHash": "0xf257a42eb8a4e40af60fb79c987fabe5db6f929a7b2d2273484554ad2955b02e",
    "transactionHash": "0xb1ab334a82f6a743cca158ac0ad70b83bc88ee4f00c07135932a169d7277643c",
    "logs": [
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d20e2882f4052eecda682f6211477e4ebfe4b06",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000032615908810f20000000000000000000000000000000000000000000000000d8b10ce4be3b82100000000000000000000000000000000000000000000357f31e0e3a08af456060000000000000000000000000000000000000000000000000d87eab8bb5ba72f00000000000000000000000000000000000000000000357f31e409b61b7c66f8",
        "blockNumber": "0x29784fb",
        "transactionHash": "0xb1ab334a82f6a743cca158ac0ad70b83bc88ee4f00c07135932a169d7277643c",
        "transactionIndex": "0x7",
        "blockHash": "0xf257a42eb8a4e40af60fb79c987fabe5db6f929a7b2d2273484554ad2955b02e",
        "logIndex": "0x10",
        "removed": false
      }
    ],
    "blockNumber": "0x29784fb",
    "cumulativeGasUsed": "0x1c4bbd",
    "status": "0x1"
  },
  "args": [
    "0x266E4AB6baD069aFc28d3C2CC129f6F8455b1dc2"
  ],
  "numDeployments": 4,
  "solcInputHash": "487f6681fbf6cb61105093a5f5b61282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUseGelato1BalanceV2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SponsoredCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneBalanceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_vs\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCallV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here\",\"kind\":\"dev\",\"methods\":{\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_call\":\"Relay call data packed into SponsoredCall struct\",\"_correlationId\":\"Unique task identifier generated by gelato\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\"}},\"sponsoredCallV2(address,bytes,bytes32,bytes32,bytes32)\":{\"details\":\"This method can be called directly without passing through the diamondThe validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chainPayment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_correlationId\":\"Unique task identifier generated by gelato Signature is split into `r` and `vs` - See https://eips.ethereum.org/EIPS/eip-2098\",\"_data\":\"Relay call data\",\"_r\":\"Checker signature\",\"_target\":\"Relay call target\",\"_vs\":\"Checker signature\"}}},\"title\":\"Gelato Relay contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token\"},\"sponsoredCallV2(address,bytes,bytes32,bytes32,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authentication\"}},\"notice\":\"This contract deals with synchronous payments and Gelato 1Balance payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelay1Balance.sol\":\"GelatoRelay1Balance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/GelatoRelay1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IGelatoRelay1Balance} from \\\"./interfaces/IGelatoRelay1Balance.sol\\\";\\nimport {IGelato1Balance} from \\\"./interfaces/IGelato1Balance.sol\\\";\\nimport {GelatoCallUtils} from \\\"./lib/GelatoCallUtils.sol\\\";\\nimport {SponsoredCall} from \\\"./types/CallTypes.sol\\\";\\n\\n/// @title  Gelato Relay contract\\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\\n/// @dev    This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelay1Balance is IGelatoRelay1Balance, IGelato1Balance {\\n    using GelatoCallUtils for address;\\n\\n    address public immutable gelato;\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _call Relay call data packed into SponsoredCall struct\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.chainId == block.chainid,\\n            \\\"GelatoRelay.sponsoredCall:chainid\\\"\\n        );\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _call.data,\\n            \\\"GelatoRelay.sponsoredCall:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _sponsor,\\n            _call.target,\\n            _feeToken,\\n            _oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _correlationId\\n        );\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @dev    This method can be called directly without passing through the diamond\\n    /// @dev    The validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chain\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _target Relay call target\\n    /// @param _data Relay call data\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    /// Signature is split into `r` and `vs` - See https://eips.ethereum.org/EIPS/eip-2098\\n    /// @param _r Checker signature\\n    /// @param _vs Checker signature\\n    function sponsoredCallV2(\\n        address _target,\\n        bytes calldata _data,\\n        bytes32 _correlationId,\\n        bytes32 _r,\\n        bytes32 _vs\\n    ) external {\\n        // These parameters are decoded from calldata\\n        (_correlationId);\\n        (_r);\\n        (_vs);\\n\\n        // INTERACTIONS\\n        _target.revertingContractCall(_data, \\\"GelatoRelay.sponsoredCallV2:\\\");\\n\\n        emit LogUseGelato1BalanceV2();\\n    }\\n}\\n\",\"keccak256\":\"0xda915301ff759dc44348af206715c4112e434c5aa09bb88709b7c93dfb9b049f\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IGelato1Balance {\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed target,\\n        address indexed feeToken,\\n        uint256 oneBalanceChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 correlationId\\n    );\\n\\n    event LogUseGelato1BalanceV2();\\n}\\n\",\"keccak256\":\"0xba3cffab8c4db0990e870ebda2ca85c8ddc960787920e4820ff334dbb58c04fc\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelay1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {SponsoredCall} from \\\"../types/CallTypes.sol\\\";\\n\\ninterface IGelatoRelay1Balance {\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external;\\n\\n    function gelato() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9a8b57e67fd4da744ce1c2423b07cbc1ba1d77e38a03d2812c71f0718ad4bbc9\",\"license\":\"MIT\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(\\n        bytes calldata _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(\\n        bytes memory _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure returns (string memory) {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9117d4f06af49c2c0902f80a62669d56ce37bc71773b46fba3c453805c16e744\",\"license\":\"MIT\"},\"contracts/lib/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7d87036d7b0721fd1b23280ddfbe2c1e31e62ef6bf82730fb2513d12186477e3\",\"license\":\"MIT\"},\"contracts/types/CallTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Sponsored relay call\\nstruct SponsoredCall {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n}\\n\\n// Relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n}\\n\\n// Concurrent relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithConcurrentERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    bytes32 userSalt;\\n    uint256 userDeadline;\\n}\\n\\nstruct RelayContext {\\n    address feeToken;\\n    uint256 fee;\\n}\\n\",\"keccak256\":\"0x0339372ff9808842680f078a13a0827d94ca0420d9d032ed311eca3cccf04419\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610a51380380610a5183398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516109c1610090600039600081816060015260d601526109c16000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806327be3c2414610046578063573ea5751461005b578063ad718d2a146100ab575b600080fd5b61005961005436600461061d565b6100be565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b93660046106a5565b610330565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b863546146101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a636861696e6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610159565b61029b610202604089018961073f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082018252601a81527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a00000000000060208083019190915290935061027e9250908c01908c016107ab565b73ffffffffffffffffffffffffffffffffffffffff1691906103ee565b5073ffffffffffffffffffffffffffffffffffffffff85166102c36040890160208a016107ab565b60408051878152602081018790529081018590526060810184905273ffffffffffffffffffffffffffffffffffffffff918216918916907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a450505050505050565b6103bc85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601c81527f47656c61746f52656c61792e73706f6e736f72656443616c6c56323a00000000602082015273ffffffffffffffffffffffffffffffffffffffff8b1693925090506103ee565b506040517f8e4f8b7f1299a63a6b46587ec357933d2006e5697cd46d99297e670cee1dbeb190600090a1505050505050565b606060008473ffffffffffffffffffffffffffffffffffffffff168460405161041791906107f1565b6000604051808303816000865af19150503d8060008114610454576040519150601f19603f3d011682016040523d82523d6000602084013e610459565b606091505b509250905080156104e65781516000036104e15773ffffffffffffffffffffffffffffffffffffffff85163b151583604051602001610498919061080d565b604051602081830303815290604052906104df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610159919061084e565b505b6104f0565b6104f082846104f8565b509392505050565b60208251610506919061089f565b6004036105e35760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036105d25760448301925081836040516020016105749291906108da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526101599160040161084e565b816040516020016105749190610909565b80604051602001610574919061094a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061857600080fd5b919050565b600080600080600080600060e0888a03121561063857600080fd5b873567ffffffffffffffff81111561064f57600080fd5b88016060818b03121561066157600080fd5b965061066f602089016105f4565b955061067d604089016105f4565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060008060008060a087890312156106be57600080fd5b6106c7876105f4565b9550602087013567ffffffffffffffff808211156106e457600080fd5b818901915089601f8301126106f857600080fd5b81358181111561070757600080fd5b8a602082850101111561071957600080fd5b979a60209290920199509697604081013597506060810135965060800135945092505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261077457600080fd5b83018035915067ffffffffffffffff82111561078f57600080fd5b6020019150368190038213156107a457600080fd5b9250929050565b6000602082840312156107bd57600080fd5b6107c6826105f4565b9392505050565b60005b838110156107e85781810151838201526020016107d0565b50506000910152565b600082516108038184602087016107cd565b9190910192915050565b6000825161081f8184602087016107cd565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b602081526000825180602084015261086d8160408501602087016107cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000826108d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b600083516108ec8184602088016107cd565b8351908301906109008183602088016107cd565b01949350505050565b6000825161091b8184602087016107cd565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b6000825161095c8184602087016107cd565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fea2646970667358221220a0b9012f356da591a3a95095c1c9bdae63a29140c46da5ef2eea5943b1445d4864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806327be3c2414610046578063573ea5751461005b578063ad718d2a146100ab575b600080fd5b61005961005436600461061d565b6100be565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b93660046106a5565b610330565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b863546146101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a636861696e6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610159565b61029b610202604089018961073f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082018252601a81527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a00000000000060208083019190915290935061027e9250908c01908c016107ab565b73ffffffffffffffffffffffffffffffffffffffff1691906103ee565b5073ffffffffffffffffffffffffffffffffffffffff85166102c36040890160208a016107ab565b60408051878152602081018790529081018590526060810184905273ffffffffffffffffffffffffffffffffffffffff918216918916907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a450505050505050565b6103bc85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601c81527f47656c61746f52656c61792e73706f6e736f72656443616c6c56323a00000000602082015273ffffffffffffffffffffffffffffffffffffffff8b1693925090506103ee565b506040517f8e4f8b7f1299a63a6b46587ec357933d2006e5697cd46d99297e670cee1dbeb190600090a1505050505050565b606060008473ffffffffffffffffffffffffffffffffffffffff168460405161041791906107f1565b6000604051808303816000865af19150503d8060008114610454576040519150601f19603f3d011682016040523d82523d6000602084013e610459565b606091505b509250905080156104e65781516000036104e15773ffffffffffffffffffffffffffffffffffffffff85163b151583604051602001610498919061080d565b604051602081830303815290604052906104df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610159919061084e565b505b6104f0565b6104f082846104f8565b509392505050565b60208251610506919061089f565b6004036105e35760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036105d25760448301925081836040516020016105749291906108da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526101599160040161084e565b816040516020016105749190610909565b80604051602001610574919061094a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061857600080fd5b919050565b600080600080600080600060e0888a03121561063857600080fd5b873567ffffffffffffffff81111561064f57600080fd5b88016060818b03121561066157600080fd5b965061066f602089016105f4565b955061067d604089016105f4565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060008060008060a087890312156106be57600080fd5b6106c7876105f4565b9550602087013567ffffffffffffffff808211156106e457600080fd5b818901915089601f8301126106f857600080fd5b81358181111561070757600080fd5b8a602082850101111561071957600080fd5b979a60209290920199509697604081013597506060810135965060800135945092505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261077457600080fd5b83018035915067ffffffffffffffff82111561078f57600080fd5b6020019150368190038213156107a457600080fd5b9250929050565b6000602082840312156107bd57600080fd5b6107c6826105f4565b9392505050565b60005b838110156107e85781810151838201526020016107d0565b50506000910152565b600082516108038184602087016107cd565b9190910192915050565b6000825161081f8184602087016107cd565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b602081526000825180602084015261086d8160408501602087016107cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000826108d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b600083516108ec8184602088016107cd565b8351908301906109008183602088016107cd565b01949350505050565b6000825161091b8184602087016107cd565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b6000825161095c8184602087016107cd565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fea2646970667358221220a0b9012f356da591a3a95095c1c9bdae63a29140c46da5ef2eea5943b1445d4864736f6c63430008140033",
  "devdoc": {
    "details": "This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here",
    "kind": "dev",
    "methods": {
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_call": "Relay call data packed into SponsoredCall struct",
          "_correlationId": "Unique task identifier generated by gelato",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator"
        }
      },
      "sponsoredCallV2(address,bytes,bytes32,bytes32,bytes32)": {
        "details": "This method can be called directly without passing through the diamondThe validity of the emitted LogUseGelato1BalanceV2 event must be verified off-chainPayment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_correlationId": "Unique task identifier generated by gelato Signature is split into `r` and `vs` - See https://eips.ethereum.org/EIPS/eip-2098",
          "_data": "Relay call data",
          "_r": "Checker signature",
          "_target": "Relay call target",
          "_vs": "Checker signature"
        }
      }
    },
    "title": "Gelato Relay contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token"
      },
      "sponsoredCallV2(address,bytes,bytes32,bytes32,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authentication"
      }
    },
    "notice": "This contract deals with synchronous payments and Gelato 1Balance payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}