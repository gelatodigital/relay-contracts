{
  "address": "0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogCallWithSyncFeeERC2771",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oneBalanceChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSORED_CALL_ERC2771_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct CallWithERC2771",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_isRelayContext",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "callWithSyncFeeERC2771",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct CallWithERC2771",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oneBalanceChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCallERC2771",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x177f0b539139457d6e582d00f56d6bd22e762837b9a418d543849e930f469e0f",
  "receipt": {
    "to": null,
    "from": "0xa4342E17DC5f5Ad441258F11cc2871D84a26FBfe",
    "contractAddress": "0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d",
    "transactionIndex": 1,
    "gasUsed": "1497321",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x74cf86976aee55e76931445080a4549a1891d894fffa0b420db0393788a219cb",
    "transactionHash": "0x177f0b539139457d6e582d00f56d6bd22e762837b9a418d543849e930f469e0f",
    "logs": [],
    "blockNumber": 6135855,
    "cumulativeGasUsed": "1784838",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91f2A140cA47DdF438B9c583b7E71987525019bB"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a9028dcd05718e2699a4776d11b1021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogCallWithSyncFeeERC2771\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSORED_CALL_ERC2771_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct CallWithERC2771\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isRelayContext\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"callWithSyncFeeERC2771\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct CallWithERC2771\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneBalanceChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCallERC2771\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here\",\"kind\":\"dev\",\"methods\":{\"callWithSyncFeeERC2771((uint256,address,bytes,address,uint256,uint256),address,bytes,bool,bytes32)\":{\"details\":\"This is the most straightforward use case, and `transfer` handles token payments.\",\"params\":{\"_call\":\"Relay call data packed into CallWithERC2771 struct\",\"_correlationId\":\"Unique task identifier generated by gelato\",\"_isRelayContext\":\"true: all relay context encoding, false: only feeCollector encoding\"}},\"sponsoredCallERC2771((uint256,address,bytes,address,uint256,uint256),address,address,uint256,bytes,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.\",\"params\":{\"_call\":\"Relay call data packed into CallWithERC2771 struct\",\"_correlationId\":\"Unique task identifier generated by gelato\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\",\"_userSignature\":\"EIP-712 compliant signature from _call.user\"}}},\"title\":\"Gelato Relay contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callWithSyncFeeERC2771((uint256,address,bytes,address,uint256,uint256),address,bytes,bool,bytes32)\":{\"notice\":\"Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward\"},\"sponsoredCallERC2771((uint256,address,bytes,address,uint256,uint256),address,address,uint256,bytes,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment with _msgSender user signature verification\"}},\"notice\":\"This contract deals with synchronous payments and Gelato 1Balance payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelayERC2771.sol\":\"GelatoRelayERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\\nuint256 constant _FEE_START = 32; // offset: uint256\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n * abi.encodePacked( _data,\\n *                   _feeCollector,\\n *                   _feeToken,\\n *                   _fee);\\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 72 bytes\\n *     feeToken: - 52 bytes\\n *     fee: - 32 bytes\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // Do not confuse with OZ Context.sol _msgData()\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xdc969837c861a8e069a47d988159de81f2122dd07827303bd4e61ba232b06231\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 20;\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayFeeCollector\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction __getFeeCollector() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with only feeCollector appended to msg.data\\n * Expects calldata encoding:\\n *   abi.encodePacked(bytes data, address feeCollectorAddress)\\n * Therefore, we're expecting 20bytes to be appended to normal msgData\\n * 20bytes start offsets from calldatasize:\\n *    feeCollector: -20\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayFeeCollector is GelatoRelayBase {\\n    // Do not confuse with OZ Context.sol _msgData()\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return __getFeeCollector();\\n    }\\n}\\n\",\"keccak256\":\"0x941d3c17671b39f9bf440d632f0677da3f911d66336c46f98807d19d6af543ec\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY, GELATO_RELAY_ERC2771} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\\n        return _forwarder == GELATO_RELAY;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return _forwarder == GELATO_RELAY_ERC2771;\\n    }\\n}\\n\",\"keccak256\":\"0x43d5de5861d8128f60327ddde55bd1f6caff4799795012e9a13960796e53adf0\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0x1Cc587d239AF07C23D8f28Bc6DCdF73BE1994cA1;\\n\",\"keccak256\":\"0x5448b5c7eb619ff882e56dbf90b5ade53e3b28d5c3102d897bd668c02a2263e3\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// Four different types of calldata packing\\n// 1. encodeFeeCollector: append 20 byte feeCollector address\\n// 2. encodeRelayContext: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee\\n// 3. encodeFeeCollectorERC2771: append 20 byte feeCollector address, 20 byte _msgSender address\\n// 4. encodeRelayContextERC2771: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee, 20 byte _msgSender address\\n\\nfunction _encodeFeeCollector(bytes calldata _data, address _feeCollector)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _feeCollector);\\n}\\n\\nfunction _encodeRelayContext(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee);\\n}\\n\\n// ERC2771 Encodings\\n\\n// vanilla ERC2771 context encoding\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _encodeERC2771Context(bytes calldata _data, address _msgSender)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _msgSender);\\n}\\n\\nfunction _encodeFeeCollectorERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _msgSender);\\n}\\n\\nfunction _encodeRelayContextERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee, _msgSender);\\n}\\n\",\"keccak256\":\"0x00c8eba93ba19ca1e666590dfcac3ab4077ced65a7d26791bd25c9918091b9ca\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/GelatoRelayERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IGelatoRelayERC2771} from \\\"./interfaces/IGelatoRelayERC2771.sol\\\";\\nimport {IGelato1Balance} from \\\"./interfaces/IGelato1Balance.sol\\\";\\nimport {GelatoRelayERC2771Base} from \\\"./abstract/GelatoRelayERC2771Base.sol\\\";\\nimport {GelatoCallUtils} from \\\"./lib/GelatoCallUtils.sol\\\";\\nimport {GelatoTokenUtils} from \\\"./lib/GelatoTokenUtils.sol\\\";\\nimport {CallWithERC2771} from \\\"./types/CallTypes.sol\\\";\\nimport {\\n    _encodeERC2771Context,\\n    _encodeFeeCollectorERC2771,\\n    _encodeRelayContextERC2771\\n} from \\\"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\\\";\\nimport {\\n    _getFeeCollectorRelayContext,\\n    _getFeeRelayContext\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\nimport {\\n    __getFeeCollector\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\\\";\\n\\n/// @title  Gelato Relay contract\\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\\n/// @dev    This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelayERC2771 is\\n    IGelatoRelayERC2771,\\n    IGelato1Balance,\\n    GelatoRelayERC2771Base\\n{\\n    using GelatoCallUtils for address;\\n    using GelatoTokenUtils for address;\\n\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant name = \\\"GelatoRelayERC2771\\\";\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant version = \\\"1\\\";\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _gelato) GelatoRelayERC2771Base(_gelato) {}\\n\\n    /// @notice Relay call with Synchronous Payment\\n    /// @notice The target contract pays Gelato during the call forward\\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\\n    /// @param _call Relay call data packed into CallWithERC2771 struct\\n    /// @param _isRelayContext true: all relay context encoding, false: only feeCollector encoding\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function callWithSyncFeeERC2771(\\n        CallWithERC2771 calldata _call,\\n        address _feeToken,\\n        bytes calldata _userSignature,\\n        bool _isRelayContext,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        // CHECKS\\n        _requireChainId(\\n            _call.chainId,\\n            \\\"GelatoRelayERC2771.callWithSyncFeeERC2771:\\\"\\n        );\\n\\n        uint256 storedUserNonce = userNonce[_call.user];\\n\\n        // For the user, we enforce nonce ordering\\n        _requireUserBasics(\\n            _call.userNonce,\\n            storedUserNonce,\\n            _call.userDeadline,\\n            \\\"GelatoRelayERC2771.callWithSyncFeeERC2771:\\\"\\n        );\\n\\n        bytes32 domainSeparator = _getDomainSeparator();\\n\\n        // Verify user's signature\\n        _requireCallWithSyncFeeERC2771Signature(\\n            domainSeparator,\\n            _call,\\n            _userSignature,\\n            _call.user\\n        );\\n\\n        // EFFECTS\\n        userNonce[_call.user] = storedUserNonce + 1;\\n\\n        // INTERACTIONS\\n        _isRelayContext\\n            ? _call.target.revertingContractCall(\\n                _encodeRelayContextERC2771(\\n                    _call.data,\\n                    _getFeeCollectorRelayContext(),\\n                    _feeToken,\\n                    _getFeeRelayContext(),\\n                    _call.user\\n                ),\\n                \\\"GelatoRelayERC2771.callWithSyncFeeERC2771:\\\"\\n            )\\n            : _call.target.revertingContractCall(\\n                _encodeFeeCollectorERC2771(\\n                    _call.data,\\n                    __getFeeCollector(),\\n                    _call.user\\n                ),\\n                \\\"GelatoRelayERC2771.callWithSyncFeeERC2771:\\\"\\n            );\\n\\n        emit LogCallWithSyncFeeERC2771(_call.target, _correlationId);\\n    }\\n\\n    /// @notice Relay call + One Balance payment with _msgSender user signature verification\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\\n    /// @dev    on their end via encoding into _call.data.\\n    /// @param _call Relay call data packed into CallWithERC2771 struct\\n    /// @param _userSignature EIP-712 compliant signature from _call.user\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function sponsoredCallERC2771(\\n        CallWithERC2771 calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        bytes calldata _userSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        // CHECKS\\n        _requireChainId(\\n            _call.chainId,\\n            \\\"GelatoRelayERC2771.sponsoredCallERC2771:\\\"\\n        );\\n\\n        uint256 storedUserNonce = userNonce[_call.user];\\n\\n        // For the user, we enforce nonce ordering\\n        _requireUserBasics(\\n            _call.userNonce,\\n            storedUserNonce,\\n            _call.userDeadline,\\n            \\\"GelatoRelayERC2771.sponsoredCallERC2771:\\\"\\n        );\\n\\n        bytes32 domainSeparator = _getDomainSeparator();\\n\\n        // Verify user's signature\\n        _requireSponsoredCallERC2771Signature(\\n            domainSeparator,\\n            _call,\\n            _userSignature,\\n            _call.user\\n        );\\n\\n        // EFFECTS\\n        userNonce[_call.user] = storedUserNonce + 1;\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _encodeERC2771Context(_call.data, _call.user),\\n            \\\"GelatoRelayERC2771.sponsoredCallERC2771:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _sponsor,\\n            _call.target,\\n            _feeToken,\\n            _oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _correlationId\\n        );\\n    }\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _getDomainSeparator();\\n    }\\n\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        bytes(\\n                            //solhint-disable-next-line max-line-length\\n                            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                        )\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9d37b756c5d3cb84576f9a75ab729dc61a25f4d4275db5ff3685d791c3b67374\",\"license\":\"MIT\"},\"contracts/abstract/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    IGelatoRelayERC2771Base\\n} from \\\"../interfaces/IGelatoRelayERC2771Base.sol\\\";\\nimport {GelatoString} from \\\"../lib/GelatoString.sol\\\";\\nimport {CallWithERC2771} from \\\"../types/CallTypes.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base is IGelatoRelayERC2771Base {\\n    using GelatoString for string;\\n\\n    mapping(address => uint256) public userNonce;\\n\\n    address public immutable gelato;\\n\\n    bytes32 public constant CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"CallWithSyncFeeERC2771(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant SPONSORED_CALL_ERC2771_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"SponsoredCallERC2771(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline)\\\"\\n            )\\n        );\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    function _requireChainId(uint256 _chainId, string memory _errorTrace)\\n        internal\\n        view\\n    {\\n        require(_chainId == block.chainid, _errorTrace.suffix(\\\"chainid\\\"));\\n    }\\n\\n    function _requireUserBasics(\\n        uint256 _callUserNonce,\\n        uint256 _storedUserNonce,\\n        uint256 _userDeadline,\\n        string memory _errorTrace\\n    ) internal view {\\n        require(\\n            _callUserNonce == _storedUserNonce,\\n            _errorTrace.suffix(\\\"nonce\\\")\\n        );\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _userDeadline == 0 || _userDeadline >= block.timestamp,\\n            _errorTrace.suffix(\\\"deadline\\\")\\n        );\\n    }\\n\\n    function _requireCallWithSyncFeeERC2771Signature(\\n        bytes32 _domainSeparator,\\n        CallWithERC2771 calldata _call,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeCallWithSyncFeeERC2771(_call))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"GelatoRelayERC2771Base._requireCallWithSyncFeeERC2771Signature\\\"\\n        );\\n    }\\n\\n    function _requireSponsoredCallERC2771Signature(\\n        bytes32 _domainSeparator,\\n        CallWithERC2771 calldata _call,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeSponsoredCallERC2771(_call))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"GelatoRelayERC2771Base._requireSponsoredCallERC2771Signature\\\"\\n        );\\n    }\\n\\n    function _abiEncodeCallWithSyncFeeERC2771(CallWithERC2771 calldata _call)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH,\\n                _call.chainId,\\n                _call.target,\\n                keccak256(_call.data),\\n                _call.user,\\n                _call.userNonce,\\n                _call.userDeadline\\n            );\\n    }\\n\\n    function _abiEncodeSponsoredCallERC2771(CallWithERC2771 calldata _call)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                SPONSORED_CALL_ERC2771_TYPEHASH,\\n                _call.chainId,\\n                _call.target,\\n                keccak256(_call.data),\\n                _call.user,\\n                _call.userNonce,\\n                _call.userDeadline\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6abcd4a4a3513f21195c1022489086f9d7f9ace0b6982ec516e407a8bed1eab2\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xe9e24ff45cb6bc656f075687427e78749a0fd9b0af6562f7bb0a0ee05fdb9792\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGelato1Balance {\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed target,\\n        address indexed feeToken,\\n        uint256 oneBalanceChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 correlationId\\n    );\\n}\\n\",\"keccak256\":\"0xe54e849195faa17443afc2c1057eded69eacdd5b459b3d57fe14888e641faca9\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelayERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {CallWithERC2771} from \\\"../types/CallTypes.sol\\\";\\n\\ninterface IGelatoRelayERC2771 {\\n    event LogCallWithSyncFeeERC2771(\\n        address indexed target,\\n        bytes32 indexed correlationId\\n    );\\n\\n    function callWithSyncFeeERC2771(\\n        CallWithERC2771 calldata _call,\\n        address _feeToken,\\n        bytes calldata _userSignature,\\n        bool _isRelayContext,\\n        bytes32 _correlationId\\n    ) external;\\n\\n    function sponsoredCallERC2771(\\n        CallWithERC2771 calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        bytes calldata _userSignature,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81346f40e4f1e20e99422a349054374517c94bf6e7b4fc34faa69115f8e830b2\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGelatoRelayERC2771Base {\\n    function userNonce(address _user) external view returns (uint256);\\n\\n    function gelato() external view returns (address);\\n\\n    function SPONSORED_CALL_ERC2771_TYPEHASH() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab34fd000df2cc2ce6cee69f34f681613969256e5eedf8ab3975f900e8f1c7f9\",\"license\":\"MIT\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40fbb9371b1d93610af7eecec5fe51840e4fea3a9abfac4ff6bab9ce526a872d\",\"license\":\"MIT\"},\"contracts/lib/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4fc4be222111f881ad257bdacc76c7136581dbaa5409639c67e6d0b696931d78\",\"license\":\"MIT\"},\"contracts/lib/GelatoString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary GelatoString {\\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\\n    }\\n\\n    function prefix(string memory _second, string memory _first)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n\\n    function suffix(string memory _first, string memory _second)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n}\\n\",\"keccak256\":\"0x2dfcd56d8b09bd82e8fe1e6dec5df7c2db37d1a50e8b797a931e88dbfc852699\",\"license\":\"MIT\"},\"contracts/lib/GelatoTokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary GelatoTokenUtils {\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xd1c3daf95c19f1e4de13ea3a92769714ef3b25665ef3184871b898fa861bc340\",\"license\":\"MIT\"},\"contracts/types/CallTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Sponsored relay call\\nstruct SponsoredCall {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n}\\n\\n// Relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n}\\n\",\"keccak256\":\"0xc363de8594c7f8b36297d9fbdef4c882959b0dfb04c56b37864b43923b008fe3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611ad7380380611ad783398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611a3e6100996000396000818161018e0152818161023a015261053c0152611a3e6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063415e511811610076578063573ea5751161005b578063573ea57514610189578063742ee293146101d5578063b9d16f1c146101dd57600080fd5b8063415e51181461013857806354fd4d501461014d57600080fd5b806306fdde03146100a857806313523610146100fa5780632e04b8e7146101105780633644e51514610130575b600080fd5b6100e46040518060400160405280601281526020017f47656c61746f52656c617945524332373731000000000000000000000000000081525081565b6040516100f19190611343565b60405180910390f35b6101026101f0565b6040519081526020016100f1565b61010261011e3660046113bd565b60006020819052908152604090205481565b610102610213565b61014b610146366004611439565b610222565b005b6100e46040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6101b07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f1565b610102610501565b61014b6101eb3660046114e7565b610524565b6040518060a0016040528060738152602001611996607391398051906020012081565b600061021d61082b565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b6102ec896000013560405180606001604052806028815260200161187d6028913961092e565b6000808061030060808d0160608e016113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506103698a60800135828c60a0013560405180606001604052806028815260200161187d602891396109b6565b600061037361082b565b9050610391818c898961038c60808401606085016113bd565b610ac5565b5061039d826001611583565b6000808d60600160208101906103b391906113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061046861041f8c806040019061040791906115bd565b8e606001602081019061041a91906113bd565b610c5b565b60405180606001604052806028815260200161187d602891398d602001602081019061044b91906113bd565b73ffffffffffffffffffffffffffffffffffffffff169190610c8a565b5073ffffffffffffffffffffffffffffffffffffffff891661049060408d0160208e016113bd565b604080518b8152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff918216918d16907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a45050505050505050505050565b6040518060a00160405280607581526020016118a5607591398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064016102bd565b6105e986600001356040518060600160405280602a815260200161196c602a913961092e565b600080806105fd60808a0160608b016113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506106668760800135828960a001356040518060600160405280602a815260200161196c602a91396109b6565b600061067061082b565b905061068e8189888861068960808401606085016113bd565b610d94565b5061069a826001611583565b6000806106ad60808c0160608d016113bd565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205583610756576107516107286106ec60408b018b6115bd565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c61072360808e0160608f016113bd565b610f1f565b6040518060600160405280602a815260200161196c602a913961044b60408c0160208d016113bd565b6107cd565b6107cd61072861076960408b018b6115bd565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c8b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001358e60600160208101906107c891906113bd565b610f51565b50826107df60408a0160208b016113bd565b73ffffffffffffffffffffffffffffffffffffffff167f54a07c256d6c19724ae52465b8676550ecbe2c59035eb67330324962ac62db6960405160405180910390a35050505050505050565b600060405180608001604052806052815260200161191a605291398051602091820120604080518082018252601281527f47656c61746f52656c61794552433237373100000000000000000000000000009084015280518082018252600181527f3100000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f70c540b9e520f15fb82a0638406c3d99d9cadb63b8c86c5b11e4fc8b168dfd4a908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b4682146109796040518060400160405280600781526020017f636861696e69640000000000000000000000000000000000000000000000000081525083610f8990919063ffffffff16565b906109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b505050565b828414610a016040518060400160405280600581526020017f6e6f6e636500000000000000000000000000000000000000000000000000000081525083610f8990919063ffffffff16565b90610a39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b50811580610a475750428210155b60408051808201909152600881527f646561646c696e650000000000000000000000000000000000000000000000006020820152610a86908390610f89565b90610abe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b5050505050565b600085610ad186610fb6565b8051602091820120604051610b189392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080610b738387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108f92505050565b90925090506000816004811115610b8c57610b8c611622565b148015610bc457508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f47656c61746f52656c617945524332373731426173652e5f726571756972655360448201527f706f6e736f72656443616c6c455243323737315369676e61747572650000000060648201526084016102bd565b505095945050505050565b6060838383604051602001610c7293929190611651565b60405160208183030381529060405290509392505050565b606060008473ffffffffffffffffffffffffffffffffffffffff1684604051610cb3919061168a565b6000604051808303816000865af19150503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf5565b606091505b50925090508015610d82578151600003610d7d5773ffffffffffffffffffffffffffffffffffffffff85163b151583604051602001610d3491906116a6565b60405160208183030381529060405290610d7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b505b610d8c565b610d8c82846110d4565b509392505050565b600085610da0866111d0565b8051602091820120604051610de79392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080610e428387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108f92505050565b90925090506000816004811115610e5b57610e5b611622565b148015610e9357508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f47656c61746f52656c617945524332373731426173652e5f726571756972654360448201527f616c6c5769746853796e63466565455243323737315369676e6174757265000060648201526084016102bd565b606084848484604051602001610f3894939291906116e7565b6040516020818303038152906040529050949350505050565b6060868686868686604051602001610f6e9695949392919061172a565b60405160208183030381529060405290509695505050505050565b60608282604051602001610f9e929190611780565b60405160208183030381529060405290505b92915050565b60606040518060a001604052806073815260200161199660739139805160209182012090833590610fed90604086019086016113bd565b610ffa60408601866115bd565b6040516110089291906117af565b60405190819003902061102160808701606088016113bd565b60408051602081019690965285019390935273ffffffffffffffffffffffffffffffffffffffff9182166060850152608084810191909152911660a0838101919091529084013560c083015283013560e0820152610100016040516020818303038152906040529050919050565b60008082516041036110c55760208301516040840151606085015160001a6110b987828585611207565b945094505050506110cd565b506000905060025b9250929050565b602082516110e291906117bf565b6004036111bf5760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036111ae576044830192508183604051602001611150929190611780565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102bd91600401611343565b8160405160200161115091906117fa565b80604051602001611150919061183b565b60606040518060a00160405280607581526020016118a560759139805160209182012090833590610fed90604086019086016113bd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561123e5750600090506003611316565b8460ff16601b1415801561125657508460ff16601c14155b156112675750600090506004611316565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112bb573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661130f57600060019250925050611316565b9150600090505b94509492505050565b60005b8381101561133a578181015183820152602001611322565b50506000910152565b602081526000825180602084015261136281604085016020870161131f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146113b857600080fd5b919050565b6000602082840312156113cf57600080fd5b6113d882611394565b9392505050565b600060c082840312156113f157600080fd5b50919050565b60008083601f84011261140957600080fd5b50813567ffffffffffffffff81111561142157600080fd5b6020830191508360208285010111156110cd57600080fd5b60008060008060008060008060006101008a8c03121561145857600080fd5b893567ffffffffffffffff8082111561147057600080fd5b61147c8d838e016113df565b9a5061148a60208d01611394565b995061149860408d01611394565b985060608c0135975060808c01359150808211156114b557600080fd5b506114c28c828d016113f7565b9a9d999c50979a9699979860a08801359760c0810135975060e0013595509350505050565b60008060008060008060a0878903121561150057600080fd5b863567ffffffffffffffff8082111561151857600080fd5b6115248a838b016113df565b975061153260208a01611394565b9650604089013591508082111561154857600080fd5b5061155589828a016113f7565b9095509350506060870135801515811461156e57600080fd5b80925050608087013590509295509295509295565b80820180821115610fb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126115f257600080fd5b83018035915067ffffffffffffffff82111561160d57600080fd5b6020019150368190038213156110cd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b6000825161169c81846020870161131f565b9190910192915050565b600082516116b881846020870161131f565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b838582377fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811694909101938452911b166014820152602801919050565b858782377fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81169690910195865292841b83166014860152602885019190915290911b166048820152605c01919050565b6000835161179281846020880161131f565b8351908301906117a681836020880161131f565b01949350505050565b8183823760009101908152919050565b6000826117f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b6000825161180c81846020870161131f565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b6000825161184d81846020870161131f565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fe47656c61746f52656c6179455243323737312e73706f6e736f72656443616c6c455243323737313a43616c6c5769746853796e63466565455243323737312875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e6529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742947656c61746f52656c6179455243323737312e63616c6c5769746853796e63466565455243323737313a53706f6e736f72656443616c6c455243323737312875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e6529a26469706673582212202a89ae15c45c26967092bb01ecb238181abb4c443bc982759887a634ba3f3c3b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063415e511811610076578063573ea5751161005b578063573ea57514610189578063742ee293146101d5578063b9d16f1c146101dd57600080fd5b8063415e51181461013857806354fd4d501461014d57600080fd5b806306fdde03146100a857806313523610146100fa5780632e04b8e7146101105780633644e51514610130575b600080fd5b6100e46040518060400160405280601281526020017f47656c61746f52656c617945524332373731000000000000000000000000000081525081565b6040516100f19190611343565b60405180910390f35b6101026101f0565b6040519081526020016100f1565b61010261011e3660046113bd565b60006020819052908152604090205481565b610102610213565b61014b610146366004611439565b610222565b005b6100e46040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6101b07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f1565b610102610501565b61014b6101eb3660046114e7565b610524565b6040518060a0016040528060738152602001611996607391398051906020012081565b600061021d61082b565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b6102ec896000013560405180606001604052806028815260200161187d6028913961092e565b6000808061030060808d0160608e016113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506103698a60800135828c60a0013560405180606001604052806028815260200161187d602891396109b6565b600061037361082b565b9050610391818c898961038c60808401606085016113bd565b610ac5565b5061039d826001611583565b6000808d60600160208101906103b391906113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061046861041f8c806040019061040791906115bd565b8e606001602081019061041a91906113bd565b610c5b565b60405180606001604052806028815260200161187d602891398d602001602081019061044b91906113bd565b73ffffffffffffffffffffffffffffffffffffffff169190610c8a565b5073ffffffffffffffffffffffffffffffffffffffff891661049060408d0160208e016113bd565b604080518b8152602081018990529081018790526060810186905273ffffffffffffffffffffffffffffffffffffffff918216918d16907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a45050505050505050505050565b6040518060a00160405280607581526020016118a5607591398051906020012081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064016102bd565b6105e986600001356040518060600160405280602a815260200161196c602a913961092e565b600080806105fd60808a0160608b016113bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506106668760800135828960a001356040518060600160405280602a815260200161196c602a91396109b6565b600061067061082b565b905061068e8189888861068960808401606085016113bd565b610d94565b5061069a826001611583565b6000806106ad60808c0160608d016113bd565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205583610756576107516107286106ec60408b018b6115bd565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c61072360808e0160608f016113bd565b610f1f565b6040518060600160405280602a815260200161196c602a913961044b60408c0160208d016113bd565b6107cd565b6107cd61072861076960408b018b6115bd565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c8b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001358e60600160208101906107c891906113bd565b610f51565b50826107df60408a0160208b016113bd565b73ffffffffffffffffffffffffffffffffffffffff167f54a07c256d6c19724ae52465b8676550ecbe2c59035eb67330324962ac62db6960405160405180910390a35050505050505050565b600060405180608001604052806052815260200161191a605291398051602091820120604080518082018252601281527f47656c61746f52656c61794552433237373100000000000000000000000000009084015280518082018252600181527f3100000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f70c540b9e520f15fb82a0638406c3d99d9cadb63b8c86c5b11e4fc8b168dfd4a908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b4682146109796040518060400160405280600781526020017f636861696e69640000000000000000000000000000000000000000000000000081525083610f8990919063ffffffff16565b906109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b505050565b828414610a016040518060400160405280600581526020017f6e6f6e636500000000000000000000000000000000000000000000000000000081525083610f8990919063ffffffff16565b90610a39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b50811580610a475750428210155b60408051808201909152600881527f646561646c696e650000000000000000000000000000000000000000000000006020820152610a86908390610f89565b90610abe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b5050505050565b600085610ad186610fb6565b8051602091820120604051610b189392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080610b738387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108f92505050565b90925090506000816004811115610b8c57610b8c611622565b148015610bc457508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f47656c61746f52656c617945524332373731426173652e5f726571756972655360448201527f706f6e736f72656443616c6c455243323737315369676e61747572650000000060648201526084016102bd565b505095945050505050565b6060838383604051602001610c7293929190611651565b60405160208183030381529060405290509392505050565b606060008473ffffffffffffffffffffffffffffffffffffffff1684604051610cb3919061168a565b6000604051808303816000865af19150503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf5565b606091505b50925090508015610d82578151600003610d7d5773ffffffffffffffffffffffffffffffffffffffff85163b151583604051602001610d3491906116a6565b60405160208183030381529060405290610d7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd9190611343565b505b610d8c565b610d8c82846110d4565b509392505050565b600085610da0866111d0565b8051602091820120604051610de79392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600080610e428387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108f92505050565b90925090506000816004811115610e5b57610e5b611622565b148015610e9357508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f47656c61746f52656c617945524332373731426173652e5f726571756972654360448201527f616c6c5769746853796e63466565455243323737315369676e6174757265000060648201526084016102bd565b606084848484604051602001610f3894939291906116e7565b6040516020818303038152906040529050949350505050565b6060868686868686604051602001610f6e9695949392919061172a565b60405160208183030381529060405290509695505050505050565b60608282604051602001610f9e929190611780565b60405160208183030381529060405290505b92915050565b60606040518060a001604052806073815260200161199660739139805160209182012090833590610fed90604086019086016113bd565b610ffa60408601866115bd565b6040516110089291906117af565b60405190819003902061102160808701606088016113bd565b60408051602081019690965285019390935273ffffffffffffffffffffffffffffffffffffffff9182166060850152608084810191909152911660a0838101919091529084013560c083015283013560e0820152610100016040516020818303038152906040529050919050565b60008082516041036110c55760208301516040840151606085015160001a6110b987828585611207565b945094505050506110cd565b506000905060025b9250929050565b602082516110e291906117bf565b6004036111bf5760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000036111ae576044830192508183604051602001611150929190611780565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102bd91600401611343565b8160405160200161115091906117fa565b80604051602001611150919061183b565b60606040518060a00160405280607581526020016118a560759139805160209182012090833590610fed90604086019086016113bd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561123e5750600090506003611316565b8460ff16601b1415801561125657508460ff16601c14155b156112675750600090506004611316565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112bb573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661130f57600060019250925050611316565b9150600090505b94509492505050565b60005b8381101561133a578181015183820152602001611322565b50506000910152565b602081526000825180602084015261136281604085016020870161131f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146113b857600080fd5b919050565b6000602082840312156113cf57600080fd5b6113d882611394565b9392505050565b600060c082840312156113f157600080fd5b50919050565b60008083601f84011261140957600080fd5b50813567ffffffffffffffff81111561142157600080fd5b6020830191508360208285010111156110cd57600080fd5b60008060008060008060008060006101008a8c03121561145857600080fd5b893567ffffffffffffffff8082111561147057600080fd5b61147c8d838e016113df565b9a5061148a60208d01611394565b995061149860408d01611394565b985060608c0135975060808c01359150808211156114b557600080fd5b506114c28c828d016113f7565b9a9d999c50979a9699979860a08801359760c0810135975060e0013595509350505050565b60008060008060008060a0878903121561150057600080fd5b863567ffffffffffffffff8082111561151857600080fd5b6115248a838b016113df565b975061153260208a01611394565b9650604089013591508082111561154857600080fd5b5061155589828a016113f7565b9095509350506060870135801515811461156e57600080fd5b80925050608087013590509295509295509295565b80820180821115610fb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126115f257600080fd5b83018035915067ffffffffffffffff82111561160d57600080fd5b6020019150368190038213156110cd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b6000825161169c81846020870161131f565b9190910192915050565b600082516116b881846020870161131f565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b838582377fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811694909101938452911b166014820152602801919050565b858782377fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81169690910195865292841b83166014860152602885019190915290911b166048820152605c01919050565b6000835161179281846020880161131f565b8351908301906117a681836020880161131f565b01949350505050565b8183823760009101908152919050565b6000826117f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b6000825161180c81846020870161131f565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b6000825161184d81846020870161131f565b7f556e657870656374656452657475726e6461746100000000000000000000000092019182525060140191905056fe47656c61746f52656c6179455243323737312e73706f6e736f72656443616c6c455243323737313a43616c6c5769746853796e63466565455243323737312875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e6529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742947656c61746f52656c6179455243323737312e63616c6c5769746853796e63466565455243323737313a53706f6e736f72656443616c6c455243323737312875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320757365722c75696e7432353620757365724e6f6e63652c75696e743235362075736572446561646c696e6529a26469706673582212202a89ae15c45c26967092bb01ecb238181abb4c443bc982759887a634ba3f3c3b64736f6c63430008110033",
  "devdoc": {
    "details": "This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here",
    "kind": "dev",
    "methods": {
      "callWithSyncFeeERC2771((uint256,address,bytes,address,uint256,uint256),address,bytes,bool,bytes32)": {
        "details": "This is the most straightforward use case, and `transfer` handles token payments.",
        "params": {
          "_call": "Relay call data packed into CallWithERC2771 struct",
          "_correlationId": "Unique task identifier generated by gelato",
          "_isRelayContext": "true: all relay context encoding, false: only feeCollector encoding"
        }
      },
      "sponsoredCallERC2771((uint256,address,bytes,address,uint256,uint256),address,address,uint256,bytes,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance systemThe userNonce abstraction does not support multiple calls (call concurrency)Apps that need concurrent user calls will need to implement multi-callingon their end via encoding into _call.data.",
        "params": {
          "_call": "Relay call data packed into CallWithERC2771 struct",
          "_correlationId": "Unique task identifier generated by gelato",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator",
          "_userSignature": "EIP-712 compliant signature from _call.user"
        }
      }
    },
    "title": "Gelato Relay contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callWithSyncFeeERC2771((uint256,address,bytes,address,uint256,uint256),address,bytes,bool,bytes32)": {
        "notice": "Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward"
      },
      "sponsoredCallERC2771((uint256,address,bytes,address,uint256,uint256),address,address,uint256,bytes,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment with _msgSender user signature verification"
      }
    },
    "notice": "This contract deals with synchronous payments and Gelato 1Balance payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3568,
        "contract": "contracts/GelatoRelayERC2771.sol:GelatoRelayERC2771",
        "label": "userNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}