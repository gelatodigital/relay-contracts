{
  "address": "0x71C057A68Ea02ec716044945F185Da6F45B65CE0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogCallWithSyncFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogCallWithSyncFeeV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oneBalanceChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "correlationId",
          "type": "bytes32"
        }
      ],
      "name": "LogUseGelato1Balance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "callWithSyncFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_isRelayContext",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "callWithSyncFeeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SponsoredCall",
          "name": "_call",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oneBalanceChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeToFeeTokenXRateDenominator",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_correlationId",
          "type": "bytes32"
        }
      ],
      "name": "sponsoredCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cc9ed3c411d373a693609b7b5875ac6ea373e422821d2913fcad53901d98b2c",
  "receipt": {
    "to": null,
    "from": "0xd1Ac051Dc0E1366502eF3Fe4D754fbeC6986a177",
    "contractAddress": "0x71C057A68Ea02ec716044945F185Da6F45B65CE0",
    "transactionIndex": 49,
    "gasUsed": "1270171",
    "logsBloom": "0x00000000000000000000000000000000000000001000000000000000000000000000000000000000000000400000000000008000000000000000000000000000000000000000040000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000020200000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x43dcfda21cf94abe42f3535ac5c02ce5a729067ac2b6a29b55c2a238864809cc",
    "transactionHash": "0x9cc9ed3c411d373a693609b7b5875ac6ea373e422821d2913fcad53901d98b2c",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 37137220,
        "transactionHash": "0x9cc9ed3c411d373a693609b7b5875ac6ea373e422821d2913fcad53901d98b2c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d1ac051dc0e1366502ef3fe4d754fbec6986a177",
          "0x0000000000000000000000005973918275c01f50555d44e92c9d9b353cadad54"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008f118c28a460c600000000000000000000000000000000000000000000000011b8ce4d0ab3f3ca000000000000000000000000000000000000000000000d6f5c58002483eb95950000000000000000000000000000000000000000000000001129bcc0e20f9304000000000000000000000000000000000000000000000d6f5ce711b0ac8ff65b",
        "logIndex": 191,
        "blockHash": "0x43dcfda21cf94abe42f3535ac5c02ce5a729067ac2b6a29b55c2a238864809cc"
      }
    ],
    "blockNumber": 37137220,
    "cumulativeGasUsed": "8282344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7598e84B2E114AB62CAB288CE5f7d5f6bad35BbA"
  ],
  "numDeployments": 2,
  "solcInputHash": "8a9028dcd05718e2699a4776d11b1021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogCallWithSyncFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogCallWithSyncFeeV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneBalanceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"}],\"name\":\"LogUseGelato1Balance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"callWithSyncFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isRelayContext\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"callWithSyncFeeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SponsoredCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneBalanceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeToFeeTokenXRateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_correlationId\",\"type\":\"bytes32\"}],\"name\":\"sponsoredCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here\",\"kind\":\"dev\",\"methods\":{\"callWithSyncFee(address,bytes,address,uint256,bytes32)\":{\"details\":\"Previous version kept for backward compatibility\"},\"callWithSyncFeeV2(address,bytes,bool,bytes32)\":{\"details\":\"This is the most straightforward use case, and `transfer` handles token payments.\",\"params\":{\"_correlationId\":\"Unique task identifier generated by gelato\",\"_data\":\"Payload for call on _target\",\"_isRelayContext\":\"true: all relay context encoding, false: only feeCollector encoding\",\"_target\":\"Target smart contract\"}},\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"details\":\"Payment is handled with off-chain accounting using Gelato's 1Balance system\",\"params\":{\"_call\":\"Relay call data packed into SponsoredCall struct\",\"_correlationId\":\"Unique task identifier generated by gelato\",\"_nativeToFeeTokenXRateDenominator\":\"Exchange rate denominator\",\"_nativeToFeeTokenXRateNumerator\":\"Exchange rate numerator\"}}},\"title\":\"Gelato Relay contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callWithSyncFeeV2(address,bytes,bool,bytes32)\":{\"notice\":\"Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward\"},\"sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token\"}},\"notice\":\"This contract deals with synchronous payments and Gelato 1Balance payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoRelay.sol\":\"GelatoRelay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\\nuint256 constant _FEE_START = 32; // offset: uint256\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n * abi.encodePacked( _data,\\n *                   _feeCollector,\\n *                   _feeToken,\\n *                   _fee);\\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 72 bytes\\n *     feeToken: - 52 bytes\\n *     fee: - 32 bytes\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // Do not confuse with OZ Context.sol _msgData()\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xdc969837c861a8e069a47d988159de81f2122dd07827303bd4e61ba232b06231\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 20;\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayFeeCollector\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction __getFeeCollector() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with only feeCollector appended to msg.data\\n * Expects calldata encoding:\\n *   abi.encodePacked(bytes data, address feeCollectorAddress)\\n * Therefore, we're expecting 20bytes to be appended to normal msgData\\n * 20bytes start offsets from calldatasize:\\n *    feeCollector: -20\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayFeeCollector is GelatoRelayBase {\\n    // Do not confuse with OZ Context.sol _msgData()\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return __getFeeCollector();\\n    }\\n}\\n\",\"keccak256\":\"0x941d3c17671b39f9bf440d632f0677da3f911d66336c46f98807d19d6af543ec\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY, GELATO_RELAY_ERC2771} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\\n        return _forwarder == GELATO_RELAY;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return _forwarder == GELATO_RELAY_ERC2771;\\n    }\\n}\\n\",\"keccak256\":\"0x43d5de5861d8128f60327ddde55bd1f6caff4799795012e9a13960796e53adf0\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0x1Cc587d239AF07C23D8f28Bc6DCdF73BE1994cA1;\\n\",\"keccak256\":\"0x5448b5c7eb619ff882e56dbf90b5ade53e3b28d5c3102d897bd668c02a2263e3\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// Four different types of calldata packing\\n// 1. encodeFeeCollector: append 20 byte feeCollector address\\n// 2. encodeRelayContext: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee\\n// 3. encodeFeeCollectorERC2771: append 20 byte feeCollector address, 20 byte _msgSender address\\n// 4. encodeRelayContextERC2771: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee, 20 byte _msgSender address\\n\\nfunction _encodeFeeCollector(bytes calldata _data, address _feeCollector)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _feeCollector);\\n}\\n\\nfunction _encodeRelayContext(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee);\\n}\\n\\n// ERC2771 Encodings\\n\\n// vanilla ERC2771 context encoding\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _encodeERC2771Context(bytes calldata _data, address _msgSender)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _msgSender);\\n}\\n\\nfunction _encodeFeeCollectorERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _msgSender);\\n}\\n\\nfunction _encodeRelayContextERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee, _msgSender);\\n}\\n\",\"keccak256\":\"0x00c8eba93ba19ca1e666590dfcac3ab4077ced65a7d26791bd25c9918091b9ca\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IGelatoRelay} from \\\"./interfaces/IGelatoRelay.sol\\\";\\nimport {IGelato1Balance} from \\\"./interfaces/IGelato1Balance.sol\\\";\\nimport {GelatoCallUtils} from \\\"./lib/GelatoCallUtils.sol\\\";\\nimport {GelatoTokenUtils} from \\\"./lib/GelatoTokenUtils.sol\\\";\\nimport {SponsoredCall} from \\\"./types/CallTypes.sol\\\";\\nimport {\\n    _encodeFeeCollector,\\n    _encodeRelayContext\\n} from \\\"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\\\";\\nimport {\\n    __getFeeCollector\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\\\";\\nimport {\\n    _getFeeCollectorRelayContext,\\n    _getFeeTokenRelayContext,\\n    _getFeeRelayContext\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\n// backwards compatible encoding for msg.sender support instead of feeCollector\\nimport {_deprecatedRelayContext} from \\\"./functions/DeprecatedUtils.sol\\\";\\n\\n/// @title  Gelato Relay contract\\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\\n/// @dev    This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\\n// solhint-disable-next-line max-states-count\\ncontract GelatoRelay is IGelatoRelay, IGelato1Balance {\\n    using GelatoCallUtils for address;\\n    using GelatoTokenUtils for address;\\n\\n    address public immutable gelato;\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    /// @dev Previous version kept for backward compatibility\\n    function callWithSyncFee(\\n        address _target,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _fee,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        uint256 preBalance = _feeToken.getBalance(address(this));\\n\\n        _target.revertingContractCall(\\n            _deprecatedRelayContext(_data, msg.sender, _feeToken, _fee),\\n            \\\"GelatoRelay.callWithSyncFee:\\\"\\n        );\\n\\n        uint256 postBalance = _feeToken.getBalance(address(this));\\n\\n        uint256 fee = postBalance - preBalance;\\n\\n        if (fee != 0) _feeToken.transfer(msg.sender, fee);\\n\\n        emit LogCallWithSyncFee(_target, _feeToken, _fee, _taskId);\\n    }\\n\\n    /// @notice Relay call with Synchronous Payment\\n    /// @notice The target contract pays Gelato during the call forward\\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\\n    /// @param _target Target smart contract\\n    /// @param _data Payload for call on _target\\n    /// @param _isRelayContext true: all relay context encoding, false: only feeCollector encoding\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    function callWithSyncFeeV2(\\n        address _target,\\n        bytes calldata _data,\\n        bool _isRelayContext,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        address feeToken;\\n        address feeCollector;\\n        uint256 preBalance;\\n\\n        if (_isRelayContext) {\\n            feeCollector = _getFeeCollectorRelayContext();\\n            feeToken = _getFeeTokenRelayContext();\\n            preBalance = feeToken.getBalance(address(this));\\n        }\\n\\n        _isRelayContext\\n            ? _target.revertingContractCall(\\n                _encodeRelayContext(\\n                    _data,\\n                    feeCollector,\\n                    feeToken,\\n                    _getFeeRelayContext()\\n                ),\\n                \\\"GelatoRelay.callWithSyncFeeV2:\\\"\\n            )\\n            : _target.revertingContractCall(\\n                _encodeFeeCollector(_data, __getFeeCollector()),\\n                \\\"GelatoRelay.callWithSyncFeeV2:\\\"\\n            );\\n\\n        if (_isRelayContext) {\\n            uint256 fee = feeToken.getBalance(address(this)) - preBalance;\\n            if (fee != 0) feeToken.transfer(feeCollector, fee);\\n        }\\n\\n        emit LogCallWithSyncFeeV2(_target, _correlationId);\\n    }\\n\\n    /// @notice Relay call + One Balance payment - with sponsor authentication\\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\\n    /// @param _call Relay call data packed into SponsoredCall struct\\n    /// @notice Oracle value for exchange rate between native tokens and fee token\\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\\n    /// @param _correlationId Unique task identifier generated by gelato\\n    // solhint-disable-next-line function-max-lines\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external onlyGelato {\\n        // CHECKS\\n        require(\\n            _call.chainId == block.chainid,\\n            \\\"GelatoRelay.sponsoredCall:chainid\\\"\\n        );\\n\\n        // INTERACTIONS\\n        _call.target.revertingContractCall(\\n            _call.data,\\n            \\\"GelatoRelay.sponsoredCall:\\\"\\n        );\\n\\n        emit LogUseGelato1Balance(\\n            _sponsor,\\n            _call.target,\\n            _feeToken,\\n            _oneBalanceChainId,\\n            _nativeToFeeTokenXRateNumerator,\\n            _nativeToFeeTokenXRateDenominator,\\n            _correlationId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf60705f2869e001a8664c8cf5673105c9cf284c21be5829b41c4d4d94fb65511\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xe9e24ff45cb6bc656f075687427e78749a0fd9b0af6562f7bb0a0ee05fdb9792\",\"license\":\"MIT\"},\"contracts/functions/DeprecatedUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @dev USED ONLY FOR BACKWARDS COMPTABILITY: \\n/// PLEASE USE _encodeRelayContext in GelatoRelayUtils from \\\"relay-context-contracts\\\" pkg.\\nfunction _deprecatedRelayContext(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, abi.encode(_feeCollector, _feeToken, _fee));\\n}\",\"keccak256\":\"0xdcba1eebb14f8d781f2eede418afa706ac36f28ddffa0109f521fe3159f4eca7\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1Balance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGelato1Balance {\\n    event LogUseGelato1Balance(\\n        address indexed sponsor,\\n        address indexed target,\\n        address indexed feeToken,\\n        uint256 oneBalanceChainId,\\n        uint256 nativeToFeeTokenXRateNumerator,\\n        uint256 nativeToFeeTokenXRateDenominator,\\n        bytes32 correlationId\\n    );\\n}\\n\",\"keccak256\":\"0xe54e849195faa17443afc2c1057eded69eacdd5b459b3d57fe14888e641faca9\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {SponsoredCall} from \\\"../types/CallTypes.sol\\\";\\n\\ninterface IGelatoRelay {\\n    event LogCallWithSyncFee(\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogCallWithSyncFeeV2(\\n        address indexed target,\\n        bytes32 indexed correlationId\\n    );\\n\\n    function gelato() external view returns (address);\\n\\n    function callWithSyncFee(\\n        address _target,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _fee,\\n        bytes32 _taskId\\n    ) external;\\n\\n    function callWithSyncFeeV2(\\n        address _target,\\n        bytes calldata _data,\\n        bool _isRelayContext,\\n        bytes32 _correlationId\\n    ) external;\\n\\n    function sponsoredCall(\\n        SponsoredCall calldata _call,\\n        address _sponsor,\\n        address _feeToken,\\n        uint256 _oneBalanceChainId,\\n        uint256 _nativeToFeeTokenXRateNumerator,\\n        uint256 _nativeToFeeTokenXRateDenominator,\\n        bytes32 _correlationId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8bd4b40dca4f95a032afd0c0bfb5aa9d79ab1436c33689f348bcb938f34cea34\",\"license\":\"MIT\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40fbb9371b1d93610af7eecec5fe51840e4fea3a9abfac4ff6bab9ce526a872d\",\"license\":\"MIT\"},\"contracts/lib/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4fc4be222111f881ad257bdacc76c7136581dbaa5409639c67e6d0b696931d78\",\"license\":\"MIT\"},\"contracts/lib/GelatoTokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary GelatoTokenUtils {\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xd1c3daf95c19f1e4de13ea3a92769714ef3b25665ef3184871b898fa861bc340\",\"license\":\"MIT\"},\"contracts/types/CallTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Sponsored relay call\\nstruct SponsoredCall {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n}\\n\\n// Relay call with user signature verification for ERC 2771 compliance\\nstruct CallWithERC2771 {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address user;\\n    uint256 userNonce;\\n    uint256 userDeadline;\\n}\\n\",\"keccak256\":\"0xc363de8594c7f8b36297d9fbdef4c882959b0dfb04c56b37864b43923b008fe3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516116c13803806116c183398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161162361009e60003960008181607e0152818160f40152818161038701526105f401526116236000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c44357d1461005157806327be3c2414610066578063573ea57514610079578063a2d53b5e146100c9575b600080fd5b61006461005f366004611128565b6100dc565b005b610064610074366004611196565b61036f565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100646100d736600461121e565b6105dc565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b6000806000841561020057367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c9150367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc013560601c92506101fd73ffffffffffffffffffffffffffffffffffffffff8416306107c2565b90505b846102905761028b6102398888367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6108ac565b60408051808201909152601e81527f47656c61746f52656c61792e63616c6c5769746853796e6346656556323a0000602082015273ffffffffffffffffffffffffffffffffffffffff8b1691906108dc565b6102c3565b6102c361023988888587367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001356109e6565b508415610322576000816102ed73ffffffffffffffffffffffffffffffffffffffff8616306107c2565b6102f79190611295565b905080156103205761032073ffffffffffffffffffffffffffffffffffffffff85168483610a1b565b505b604051849073ffffffffffffffffffffffffffffffffffffffff8a16907fd8cb76b2a24ef8154ad59a94b242b7237ecb805ebe9f7f5c16d14aebf0047f4990600090a35050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610177565b8635461461049e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a636861696e6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610177565b6105476104ae60408901896112cf565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082018252601a81527f47656c61746f52656c61792e73706f6e736f72656443616c6c3a00000000000060208083019190915290935061052a9250908c01908c01611334565b73ffffffffffffffffffffffffffffffffffffffff1691906108dc565b5073ffffffffffffffffffffffffffffffffffffffff851661056f6040890160208a01611334565b60408051878152602081018790529081018590526060810184905273ffffffffffffffffffffffffffffffffffffffff918216918916907f116bfd46451bbd23e7a5f5b7420b28e3d98d4c477f173da513aaaeac3c4baada9060800160405180910390a450505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f0000000000000000006044820152606401610177565b600061069d73ffffffffffffffffffffffffffffffffffffffff8516306107c2565b90506107016106af8787338888610a66565b60408051808201909152601c81527f47656c61746f52656c61792e63616c6c5769746853796e634665653a00000000602082015273ffffffffffffffffffffffffffffffffffffffff8a1691906108dc565b50600061072473ffffffffffffffffffffffffffffffffffffffff8616306107c2565b905060006107328383611295565b9050801561075b5761075b73ffffffffffffffffffffffffffffffffffffffff87163383610a1b565b6040805173ffffffffffffffffffffffffffffffffffffffff888116825260208201889052918101869052908a16907f2ebf5825cbf63a0d0bd018d3d8547867630cd139f87864652d984d57da4edb559060600160405180910390a2505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461088a576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610885919061134f565b6108a3565b8173ffffffffffffffffffffffffffffffffffffffff16315b90505b92915050565b60608383836040516020016108c393929190611368565b60405160208183030381529060405290505b9392505050565b606060008473ffffffffffffffffffffffffffffffffffffffff168460405161090591906113c5565b6000604051808303816000865af19150503d8060008114610942576040519150601f19603f3d011682016040523d82523d6000602084013e610947565b606091505b509250905080156109d45781516000036109cf5773ffffffffffffffffffffffffffffffffffffffff85163b15158360405160200161098691906113e1565b604051602081830303815290604052906109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101779190611422565b505b6109de565b6109de8284610ab6565b509392505050565b60608585858585604051602001610a01959493929190611473565b604051602081830303815290604052905095945050505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610a5c57610a57838383610bb2565b505050565b610a578282610c3f565b6040805173ffffffffffffffffffffffffffffffffffffffff858116602083015284168183015260608082018490528251808303820181526080830190935291610a01918891889160a0016114bd565b60208251610ac491906114e4565b600403610ba15760208201517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a00000000000000000000000000000000000000000000000000000000003610b90576044830192508183604051602001610b3292919061151f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261017791600401611422565b81604051602001610b32919061154e565b80604051602001610b32919061158f565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610a57908490610d99565b80471015610ca9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610177565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610d03576040519150601f19603f3d011682016040523d82523d6000602084013e610d08565b606091505b5050905080610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610177565b6000610dfb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ea59092919063ffffffff16565b805190915015610a575780806020019051810190610e1991906115d0565b610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610177565b6060610eb48484600085610ebc565b949350505050565b606082471015610f4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610177565b73ffffffffffffffffffffffffffffffffffffffff85163b610fcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610177565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ff591906113c5565b60006040518083038185875af1925050503d8060008114611032576040519150601f19603f3d011682016040523d82523d6000602084013e611037565b606091505b5091509150611047828286611052565b979650505050505050565b606083156110615750816108d5565b8251156110715782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101779190611422565b803573ffffffffffffffffffffffffffffffffffffffff811681146110c957600080fd5b919050565b60008083601f8401126110e057600080fd5b50813567ffffffffffffffff8111156110f857600080fd5b60208301915083602082850101111561111057600080fd5b9250929050565b801515811461112557600080fd5b50565b60008060008060006080868803121561114057600080fd5b611149866110a5565b9450602086013567ffffffffffffffff81111561116557600080fd5b611171888289016110ce565b909550935050604086013561118581611117565b949793965091946060013592915050565b600080600080600080600060e0888a0312156111b157600080fd5b873567ffffffffffffffff8111156111c857600080fd5b88016060818b0312156111da57600080fd5b96506111e8602089016110a5565b95506111f6604089016110a5565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060008060008060a0878903121561123757600080fd5b611240876110a5565b9550602087013567ffffffffffffffff81111561125c57600080fd5b61126889828a016110ce565b909650945061127b9050604088016110a5565b925060608701359150608087013590509295509295509295565b818103818111156108a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261130457600080fd5b83018035915067ffffffffffffffff82111561131f57600080fd5b60200191503681900382131561111057600080fd5b60006020828403121561134657600080fd5b6108a3826110a5565b60006020828403121561136157600080fd5b5051919050565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60005b838110156113bc5781810151838201526020016113a4565b50506000910152565b600082516113d78184602087016113a1565b9190910192915050565b600082516113f38184602087016113a1565b7f43616c6c20746f206e6f6e20636f6e7472616374000000000000000000000000920191825250601401919050565b60208152600082518060208401526114418160408501602087016113a1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b848682377fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b8116959091019485529190921b1660148301526028820152604801919050565b8284823760008382016000815283516114da8183602088016113a1565b0195945050505050565b60008261151a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b600083516115318184602088016113a1565b8351908301906115458183602088016113a1565b01949350505050565b600082516115608184602087016113a1565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000920191825250600f01919050565b600082516115a18184602087016113a1565b7f556e657870656374656452657475726e64617461000000000000000000000000920191825250601401919050565b6000602082840312156115e257600080fd5b81516108d58161111756fea26469706673582212208a1e17bae5af3eb91138f73b69297696d03fbff6aa28a1fb7723e37d9be819c664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract must NEVER hold funds!Maliciously crafted transaction payloads could wipe out any funds left here",
    "kind": "dev",
    "methods": {
      "callWithSyncFee(address,bytes,address,uint256,bytes32)": {
        "details": "Previous version kept for backward compatibility"
      },
      "callWithSyncFeeV2(address,bytes,bool,bytes32)": {
        "details": "This is the most straightforward use case, and `transfer` handles token payments.",
        "params": {
          "_correlationId": "Unique task identifier generated by gelato",
          "_data": "Payload for call on _target",
          "_isRelayContext": "true: all relay context encoding, false: only feeCollector encoding",
          "_target": "Target smart contract"
        }
      },
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "details": "Payment is handled with off-chain accounting using Gelato's 1Balance system",
        "params": {
          "_call": "Relay call data packed into SponsoredCall struct",
          "_correlationId": "Unique task identifier generated by gelato",
          "_nativeToFeeTokenXRateDenominator": "Exchange rate denominator",
          "_nativeToFeeTokenXRateNumerator": "Exchange rate numerator"
        }
      }
    },
    "title": "Gelato Relay contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callWithSyncFeeV2(address,bytes,bool,bytes32)": {
        "notice": "Relay call with Synchronous PaymentThe target contract pays Gelato during the call forward"
      },
      "sponsoredCall((uint256,address,bytes),address,address,uint256,uint256,uint256,bytes32)": {
        "notice": "Relay call + One Balance payment - with sponsor authenticationOracle value for exchange rate between native tokens and fee token"
      }
    },
    "notice": "This contract deals with synchronous payments and Gelato 1Balance payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}