{
  "language": "Solidity",
  "sources": {
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayBase {\n    modifier onlyGelatoRelay() {\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\n        _;\n    }\n\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\n        // Use another address on zkSync\n        if (block.chainid == 324 || block.chainid == 280) {\n            return _forwarder == GELATO_RELAY_ZKSYNC;\n        }\n        return _forwarder == GELATO_RELAY;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GELATO_RELAY_ERC2771,\n    GELATO_RELAY_ERC2771_ZKSYNC\n} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayERC2771Base {\n    modifier onlyGelatoRelayERC2771() {\n        require(_isGelatoRelayERC2771(msg.sender), \"onlyGelatoRelayERC2771\");\n        _;\n    }\n\n    function _isGelatoRelayERC2771(address _forwarder)\n        internal\n        view\n        returns (bool)\n    {\n        // Use another address on zkSync\n        if (block.chainid == 324 || block.chainid == 280) {\n            return _forwarder == GELATO_RELAY_ERC2771_ZKSYNC;\n        }\n        return _forwarder == GELATO_RELAY_ERC2771;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\n\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n// Four different types of calldata packing\n// 1. encodeFeeCollector: append 20 byte feeCollector address\n// 2. encodeRelayContext: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee\n// 3. encodeFeeCollectorERC2771: append 20 byte feeCollector address, 20 byte _msgSender address\n// 4. encodeRelayContextERC2771: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee, 20 byte _msgSender address\n\nfunction _encodeFeeCollector(bytes calldata _data, address _feeCollector)\n    pure\n    returns (bytes memory)\n{\n    return abi.encodePacked(_data, _feeCollector);\n}\n\nfunction _encodeRelayContext(\n    bytes calldata _data,\n    address _feeCollector,\n    address _feeToken,\n    uint256 _fee\n) pure returns (bytes memory) {\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee);\n}\n\n// ERC2771 Encodings\n\n// vanilla ERC2771 context encoding\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\nfunction _encodeERC2771Context(bytes calldata _data, address _msgSender)\n    pure\n    returns (bytes memory)\n{\n    return abi.encodePacked(_data, _msgSender);\n}\n\nfunction _encodeFeeCollectorERC2771(\n    bytes calldata _data,\n    address _feeCollector,\n    address _msgSender\n) pure returns (bytes memory) {\n    return abi.encodePacked(_data, _feeCollector, _msgSender);\n}\n\nfunction _encodeRelayContextERC2771(\n    bytes calldata _data,\n    address _feeCollector,\n    address _feeToken,\n    uint256 _fee,\n    address _msgSender\n) pure returns (bytes memory) {\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee, _msgSender);\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayBase} from \"./base/GelatoRelayBase.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\nuint256 constant _FEE_START = 32; // offset: uint256\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\n * Expects calldata encoding:\n * abi.encodePacked( _data,\n *                   _feeCollector,\n *                   _feeToken,\n *                   _fee);\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\n * 32bytes start offsets from calldatasize:\n *     feeCollector: - 72 bytes\n *     feeToken: - 52 bytes\n *     fee: - 32 bytes\n */\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\nabstract contract GelatoRelayContext is GelatoRelayBase {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelay(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContext();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayERC2771Base} from \"./base/GelatoRelayERC2771Base.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\nuint256 constant _FEE_START = 52; // offset: uint256 + address\nuint256 constant _MSG_SENDER_START = 20; // offset: address\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContextERC2771()\n    pure\n    returns (address feeCollector)\n{\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\n    assembly {\n        _msgSender := shr(\n            96,\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\n        )\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\n * Expects calldata encoding:\n    abi.encodePacked(\n        _data,\n        _feeCollector,\n        _feeToken,\n        _fee,\n        _msgSender\n    );\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\n *     feeCollector: - 92 bytes\n *     feeToken: - 72 bytes\n *     fee: - 52 bytes\n *     _msgSender: - 20 bytes\n */\n\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view virtual returns (bytes calldata) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    function _getMsgSender() internal view virtual returns (address) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? _getMsgSenderRelayContextERC2771()\n                : msg.sender;\n    }\n\n    // Only use with GelatoRelayERC2771Base onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContextERC2771();\n    }\n\n    // Only use with GelatoRelayERC2771Base onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContextERC2771();\n    }\n\n    // Only use with GelatoRelayERC2771Base onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContextERC2771();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayBase} from \"./base/GelatoRelayBase.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 20;\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayFeeCollector\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction __getFeeCollector() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n/**\n * @dev Context variant with only feeCollector appended to msg.data\n * Expects calldata encoding:\n *   abi.encodePacked(bytes data, address feeCollectorAddress)\n * Therefore, we're expecting 20bytes to be appended to normal msgData\n * 20bytes start offsets from calldatasize:\n *    feeCollector: -20\n */\n/// @dev Do not use with GelatoRelayContext - pick only one\nabstract contract GelatoRelayFeeCollector is GelatoRelayBase {\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelay(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return __getFeeCollector();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollectorERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayERC2771Base} from \"./base/GelatoRelayERC2771Base.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 40; // offset: address + address\nuint256 constant _MSG_SENDER_START = 20; // offset: address\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayFeeCollectorERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorERC2771() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getMsgSenderFeeCollectorERC2771() pure returns (address _msgSender) {\n    assembly {\n        _msgSender := shr(\n            96,\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\n        )\n    }\n}\n\n/**\n * @dev Context variant with feeCollector + _msgSender() appended to msg.data\n * Expects calldata encoding:\n *   abi.encodePacked(bytes data, address feeCollectorAddress, address _msgSender)\n * Therefore, we're expecting 40 bytes to be appended to normal msgData\n *    feeCollector: - 40 bytes\n *    _msgSender: - 20 bytes\n */\n\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\nabstract contract GelatoRelayFeeCollectorERC2771 is GelatoRelayERC2771Base {\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    function _getMsgSender() internal view returns (address) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? _getMsgSenderFeeCollectorERC2771()\n                : msg.sender;\n    }\n\n    // Only use with GelatoRelayERC2771Base onlyGelatoRelayERC2771 or `_isGelatoRelayERC2771` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorERC2771();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    modifier onlyERC20(address _token) {\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\n        _;\n    }\n\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function transferFrom(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal onlyERC20(_token) {\n        if (_amount == 0) return;\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/__mocks__/MockGelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    GelatoRelayContext\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\n\ncontract MockGelatoRelayContext is GelatoRelayContext {\n    event LogMsgData(bytes data);\n    event LogContext(address feeCollector, address feeToken, uint256 fee);\n\n    function emitContext() external {\n        emit LogMsgData(_getMsgData());\n        emit LogContext(_getFeeCollector(), _getFeeToken(), _getFee());\n    }\n\n    function testTransferRelayFee() external {\n        _transferRelayFee();\n    }\n\n    function testTransferRelayFeeCapped(uint256 _maxFee) external {\n        _transferRelayFeeCapped(_maxFee);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function testOnlyGelatoRelay() external onlyGelatoRelay {}\n}\n"
    },
    "contracts/__mocks__/MockGelatoRelayContextERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GelatoRelayContextERC2771\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\";\n\ncontract MockGelatoRelayContextERC2771 is GelatoRelayContextERC2771 {\n    event LogMsgData(bytes data);\n    event LogContext(\n        address feeCollector,\n        address feeToken,\n        uint256 fee,\n        address _msgSender\n    );\n\n    function emitContext() external {\n        emit LogMsgData(_getMsgData());\n        emit LogContext(\n            _getFeeCollector(),\n            _getFeeToken(),\n            _getFee(),\n            _getMsgSender()\n        );\n    }\n\n    function testTransferRelayFee() external {\n        _transferRelayFee();\n    }\n\n    function testTransferRelayFeeCapped(uint256 _maxFee) external {\n        _transferRelayFeeCapped(_maxFee);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function testOnlyGelatoRelayERC2771() external onlyGelatoRelayERC2771 {}\n}\n"
    },
    "contracts/__mocks__/MockGelatoRelayFeeCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    GelatoRelayFeeCollector\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\";\n\ncontract MockGelatoRelayFeeCollector is GelatoRelayFeeCollector {\n    event LogMsgData(bytes data);\n    event LogFeeCollector(address feeCollector);\n\n    function emitFeeCollector() external {\n        emit LogMsgData(_getMsgData());\n        emit LogFeeCollector(_getFeeCollector());\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function testOnlyGelatoRelay() external onlyGelatoRelay {}\n}\n"
    },
    "contracts/__mocks__/MockGelatoRelayFeeCollectorERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GelatoRelayFeeCollectorERC2771\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollectorERC2771.sol\";\n\ncontract MockGelatoRelayFeeCollectorERC2771 is GelatoRelayFeeCollectorERC2771 {\n    event LogFeeCollector(address feeCollector);\n    event LogMsgSender(address _msgSender);\n\n    function emitFeeCollector() external {\n        emit LogFeeCollector(_getFeeCollector());\n    }\n\n    function emitMsgSender() external {\n        emit LogMsgSender(_getMsgSender());\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function testOnlyGelatoRelayERC2771() external onlyGelatoRelayERC2771 {}\n}\n"
    },
    "contracts/abstract/GelatoRelay1BalanceERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    IGelatoRelay1BalanceERC2771Base\n} from \"../interfaces/IGelatoRelay1BalanceERC2771Base.sol\";\nimport {GelatoString} from \"../lib/GelatoString.sol\";\nimport {CallWithERC2771} from \"../types/CallTypes.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract GelatoRelay1BalanceERC2771Base is\n    IGelatoRelay1BalanceERC2771Base\n{\n    using GelatoString for string;\n\n    // solhint-disable-next-line named-parameters-mapping\n    mapping(address => uint256) public userNonce;\n\n    address public immutable gelato;\n\n    bytes32 public constant SPONSORED_CALL_ERC2771_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"SponsoredCallERC2771(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline)\"\n            )\n        );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n    }\n\n    function _requireChainId(uint256 _chainId, string memory _errorTrace)\n        internal\n        view\n    {\n        require(_chainId == block.chainid, _errorTrace.suffix(\"chainid\"));\n    }\n\n    function _requireUserBasics(\n        uint256 _callUserNonce,\n        uint256 _storedUserNonce,\n        uint256 _userDeadline,\n        string memory _errorTrace\n    ) internal view {\n        require(\n            _callUserNonce == _storedUserNonce,\n            _errorTrace.suffix(\"nonce\")\n        );\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            _userDeadline == 0 || _userDeadline >= block.timestamp,\n            _errorTrace.suffix(\"deadline\")\n        );\n    }\n\n    function _requireSponsoredCallERC2771Signature(\n        bytes32 _domainSeparator,\n        CallWithERC2771 calldata _call,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal pure returns (bytes32 digest) {\n        digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(_abiEncodeSponsoredCallERC2771(_call))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"GelatoRelay1BalanceERC2771Base._requireSponsoredCallERC2771Signature\"\n        );\n    }\n\n    function _abiEncodeSponsoredCallERC2771(CallWithERC2771 calldata _call)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encode(\n                SPONSORED_CALL_ERC2771_TYPEHASH,\n                _call.chainId,\n                _call.target,\n                keccak256(_call.data),\n                _call.user,\n                _call.userNonce,\n                _call.userDeadline\n            );\n    }\n}\n"
    },
    "contracts/abstract/GelatoRelayERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    IGelatoRelayERC2771Base\n} from \"../interfaces/IGelatoRelayERC2771Base.sol\";\nimport {GelatoString} from \"../lib/GelatoString.sol\";\nimport {CallWithERC2771} from \"../types/CallTypes.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract GelatoRelayERC2771Base is IGelatoRelayERC2771Base {\n    using GelatoString for string;\n\n    // solhint-disable-next-line named-parameters-mapping\n    mapping(address => uint256) public userNonce;\n\n    address public immutable gelato;\n\n    bytes32 public constant CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH =\n        keccak256(\n            bytes(\n                // solhint-disable-next-line max-line-length\n                \"CallWithSyncFeeERC2771(uint256 chainId,address target,bytes data,address user,uint256 userNonce,uint256 userDeadline)\"\n            )\n        );\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n    }\n\n    function _requireChainId(uint256 _chainId, string memory _errorTrace)\n        internal\n        view\n    {\n        require(_chainId == block.chainid, _errorTrace.suffix(\"chainid\"));\n    }\n\n    function _requireUserBasics(\n        uint256 _callUserNonce,\n        uint256 _storedUserNonce,\n        uint256 _userDeadline,\n        string memory _errorTrace\n    ) internal view {\n        require(\n            _callUserNonce == _storedUserNonce,\n            _errorTrace.suffix(\"nonce\")\n        );\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            _userDeadline == 0 || _userDeadline >= block.timestamp,\n            _errorTrace.suffix(\"deadline\")\n        );\n    }\n\n    function _requireCallWithSyncFeeERC2771Signature(\n        bytes32 _domainSeparator,\n        CallWithERC2771 calldata _call,\n        bytes calldata _signature,\n        address _expectedSigner\n    ) internal pure returns (bytes32 digest) {\n        digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(_abiEncodeCallWithSyncFeeERC2771(_call))\n            )\n        );\n\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\n            digest,\n            _signature\n        );\n        require(\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\n            \"GelatoRelayERC2771Base._requireCallWithSyncFeeERC2771Signature\"\n        );\n    }\n\n    function _abiEncodeCallWithSyncFeeERC2771(CallWithERC2771 calldata _call)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encode(\n                CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH,\n                _call.chainId,\n                _call.target,\n                keccak256(_call.data),\n                _call.user,\n                _call.userNonce,\n                _call.userDeadline\n            );\n    }\n}\n"
    },
    "contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "contracts/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IGelatoRelay} from \"./interfaces/IGelatoRelay.sol\";\nimport {GelatoCallUtils} from \"./lib/GelatoCallUtils.sol\";\nimport {GelatoTokenUtils} from \"./lib/GelatoTokenUtils.sol\";\nimport {\n    _encodeFeeCollector,\n    _encodeRelayContext\n} from \"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\";\nimport {\n    __getFeeCollector\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\";\nimport {\n    _getFeeCollectorRelayContext,\n    _getFeeTokenRelayContext,\n    _getFeeRelayContext\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\n\n/// @title  Gelato Relay contract\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\n/// @dev    This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\n// solhint-disable-next-line max-states-count\ncontract GelatoRelay is IGelatoRelay {\n    using GelatoCallUtils for address;\n    using GelatoTokenUtils for address;\n\n    address public immutable gelato;\n\n    modifier onlyGelato() {\n        require(msg.sender == gelato, \"Only callable by gelato\");\n        _;\n    }\n\n    constructor(address _gelato) {\n        gelato = _gelato;\n    }\n\n    /// @notice Relay call with Synchronous Payment\n    /// @notice The target contract pays Gelato during the call forward\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\n    /// @param _target Target smart contract\n    /// @param _data Payload for call on _target\n    /// @param _isRelayContext true: all relay context encoding, false: only feeCollector encoding\n    /// @param _correlationId Unique task identifier generated by gelato\n    function callWithSyncFeeV2(\n        address _target,\n        bytes calldata _data,\n        bool _isRelayContext,\n        bytes32 _correlationId\n    ) external onlyGelato {\n        address feeToken;\n        address feeCollector;\n        uint256 preBalance;\n\n        if (_isRelayContext) {\n            feeCollector = _getFeeCollectorRelayContext();\n            feeToken = _getFeeTokenRelayContext();\n            preBalance = feeToken.getBalance(address(this));\n        }\n\n        _isRelayContext\n            ? _target.revertingContractCall(\n                _encodeRelayContext(\n                    _data,\n                    feeCollector,\n                    feeToken,\n                    _getFeeRelayContext()\n                ),\n                \"GelatoRelay.callWithSyncFeeV2:\"\n            )\n            : _target.revertingContractCall(\n                _encodeFeeCollector(_data, __getFeeCollector()),\n                \"GelatoRelay.callWithSyncFeeV2:\"\n            );\n\n        if (_isRelayContext) {\n            uint256 fee = feeToken.getBalance(address(this)) - preBalance;\n            if (fee != 0) feeToken.transfer(feeCollector, fee);\n        }\n\n        emit LogCallWithSyncFeeV2(_target, _correlationId);\n    }\n}\n"
    },
    "contracts/GelatoRelay1BalanceERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    IGelatoRelay1BalanceERC2771\n} from \"./interfaces/IGelatoRelay1BalanceERC2771.sol\";\nimport {IGelato1Balance} from \"./interfaces/IGelato1Balance.sol\";\nimport {\n    GelatoRelay1BalanceERC2771Base\n} from \"./abstract/GelatoRelay1BalanceERC2771Base.sol\";\nimport {GelatoCallUtils} from \"./lib/GelatoCallUtils.sol\";\nimport {GelatoTokenUtils} from \"./lib/GelatoTokenUtils.sol\";\nimport {CallWithERC2771} from \"./types/CallTypes.sol\";\nimport {\n    _encodeERC2771Context\n} from \"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\";\n\n/// @title  Gelato Relay contract\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\n/// @dev    This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\n// solhint-disable-next-line max-states-count\ncontract GelatoRelay1BalanceERC2771 is\n    IGelatoRelay1BalanceERC2771,\n    IGelato1Balance,\n    GelatoRelay1BalanceERC2771Base\n{\n    using GelatoCallUtils for address;\n    using GelatoTokenUtils for address;\n\n    //solhint-disable-next-line const-name-snakecase\n    string public constant name = \"GelatoRelay1BalanceERC2771\";\n    //solhint-disable-next-line const-name-snakecase\n    string public constant version = \"1\";\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _gelato) GelatoRelay1BalanceERC2771Base(_gelato) {}\n\n    /// @notice Relay call + One Balance payment with _msgSender user signature verification\n    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system\n    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)\n    /// @dev    Apps that need concurrent user calls will need to implement multi-calling\n    /// @dev    on their end via encoding into _call.data.\n    /// @param _call Relay call data packed into CallWithERC2771 struct\n    /// @param _userSignature EIP-712 compliant signature from _call.user\n    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator\n    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator\n    /// @param _correlationId Unique task identifier generated by gelato\n    // solhint-disable-next-line function-max-lines\n    function sponsoredCallERC2771(\n        CallWithERC2771 calldata _call,\n        address _sponsor,\n        address _feeToken,\n        uint256 _oneBalanceChainId,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _correlationId\n    ) external onlyGelato {\n        // CHECKS\n        _requireChainId(\n            _call.chainId,\n            \"GelatoRelay1BalanceERC2771.sponsoredCallERC2771:\"\n        );\n\n        uint256 storedUserNonce = userNonce[_call.user];\n\n        // For the user, we enforce nonce ordering\n        _requireUserBasics(\n            _call.userNonce,\n            storedUserNonce,\n            _call.userDeadline,\n            \"GelatoRelay1BalanceERC2771.sponsoredCallERC2771:\"\n        );\n\n        bytes32 domainSeparator = _getDomainSeparator();\n\n        // Verify user's signature\n        _requireSponsoredCallERC2771Signature(\n            domainSeparator,\n            _call,\n            _userSignature,\n            _call.user\n        );\n\n        // EFFECTS\n        userNonce[_call.user] = storedUserNonce + 1;\n\n        // INTERACTIONS\n        _call.target.revertingContractCall(\n            _encodeERC2771Context(_call.data, _call.user),\n            \"GelatoRelay1BalanceERC2771.sponsoredCallERC2771:\"\n        );\n\n        emit LogUseGelato1Balance(\n            _sponsor,\n            _call.target,\n            _feeToken,\n            _oneBalanceChainId,\n            _nativeToFeeTokenXRateNumerator,\n            _nativeToFeeTokenXRateDenominator,\n            _correlationId\n        );\n    }\n\n    //solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _getDomainSeparator();\n    }\n\n    function _getDomainSeparator() internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        bytes(\n                            //solhint-disable-next-line max-line-length\n                            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                        )\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(version)),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n}\n"
    },
    "contracts/GelatoRelayERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IGelatoRelayERC2771} from \"./interfaces/IGelatoRelayERC2771.sol\";\nimport {GelatoRelayERC2771Base} from \"./abstract/GelatoRelayERC2771Base.sol\";\nimport {GelatoCallUtils} from \"./lib/GelatoCallUtils.sol\";\nimport {GelatoTokenUtils} from \"./lib/GelatoTokenUtils.sol\";\nimport {CallWithERC2771} from \"./types/CallTypes.sol\";\nimport {\n    _encodeFeeCollectorERC2771,\n    _encodeRelayContextERC2771\n} from \"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\";\nimport {\n    _getFeeCollectorRelayContext,\n    _getFeeRelayContext\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\nimport {\n    __getFeeCollector\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\";\n\n/// @title  Gelato Relay contract\n/// @notice This contract deals with synchronous payments and Gelato 1Balance payments\n/// @dev    This contract must NEVER hold funds!\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here\n// solhint-disable-next-line max-states-count\ncontract GelatoRelayERC2771 is IGelatoRelayERC2771, GelatoRelayERC2771Base {\n    using GelatoCallUtils for address;\n    using GelatoTokenUtils for address;\n\n    //solhint-disable-next-line const-name-snakecase\n    string public constant name = \"GelatoRelayERC2771\";\n    //solhint-disable-next-line const-name-snakecase\n    string public constant version = \"1\";\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _gelato) GelatoRelayERC2771Base(_gelato) {}\n\n    /// @notice Relay call with Synchronous Payment\n    /// @notice The target contract pays Gelato during the call forward\n    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.\n    /// @param _call Relay call data packed into CallWithERC2771 struct\n    /// @param _isRelayContext true: all relay context encoding, false: only feeCollector encoding\n    /// @param _correlationId Unique task identifier generated by gelato\n    // solhint-disable-next-line function-max-lines\n    function callWithSyncFeeERC2771(\n        CallWithERC2771 calldata _call,\n        address _feeToken,\n        bytes calldata _userSignature,\n        bool _isRelayContext,\n        bytes32 _correlationId\n    ) external onlyGelato {\n        // CHECKS\n        _requireChainId(\n            _call.chainId,\n            \"GelatoRelayERC2771.callWithSyncFeeERC2771:\"\n        );\n\n        uint256 storedUserNonce = userNonce[_call.user];\n\n        // For the user, we enforce nonce ordering\n        _requireUserBasics(\n            _call.userNonce,\n            storedUserNonce,\n            _call.userDeadline,\n            \"GelatoRelayERC2771.callWithSyncFeeERC2771:\"\n        );\n\n        bytes32 domainSeparator = _getDomainSeparator();\n\n        // Verify user's signature\n        _requireCallWithSyncFeeERC2771Signature(\n            domainSeparator,\n            _call,\n            _userSignature,\n            _call.user\n        );\n\n        // EFFECTS\n        userNonce[_call.user] = storedUserNonce + 1;\n\n        // INTERACTIONS\n        _isRelayContext\n            ? _call.target.revertingContractCall(\n                _encodeRelayContextERC2771(\n                    _call.data,\n                    _getFeeCollectorRelayContext(),\n                    _feeToken,\n                    _getFeeRelayContext(),\n                    _call.user\n                ),\n                \"GelatoRelayERC2771.callWithSyncFeeERC2771:\"\n            )\n            : _call.target.revertingContractCall(\n                _encodeFeeCollectorERC2771(\n                    _call.data,\n                    __getFeeCollector(),\n                    _call.user\n                ),\n                \"GelatoRelayERC2771.callWithSyncFeeERC2771:\"\n            );\n\n        emit LogCallWithSyncFeeERC2771(_call.target, _correlationId);\n    }\n\n    //solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _getDomainSeparator();\n    }\n\n    function _getDomainSeparator() internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        bytes(\n                            //solhint-disable-next-line max-line-length\n                            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                        )\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(version)),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n}\n"
    },
    "contracts/interfaces/IGelato1Balance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IGelato1Balance {\n    event LogUseGelato1Balance(\n        address indexed sponsor,\n        address indexed target,\n        address indexed feeToken,\n        uint256 oneBalanceChainId,\n        uint256 nativeToFeeTokenXRateNumerator,\n        uint256 nativeToFeeTokenXRateDenominator,\n        bytes32 correlationId\n    );\n}\n"
    },
    "contracts/interfaces/IGelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IGelatoRelay {\n    event LogCallWithSyncFeeV2(\n        address indexed target,\n        bytes32 indexed correlationId\n    );\n\n    function gelato() external view returns (address);\n\n    function callWithSyncFeeV2(\n        address _target,\n        bytes calldata _data,\n        bool _isRelayContext,\n        bytes32 _correlationId\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGelatoRelay1BalanceERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {CallWithERC2771} from \"../types/CallTypes.sol\";\n\ninterface IGelatoRelay1BalanceERC2771 {\n    function sponsoredCallERC2771(\n        CallWithERC2771 calldata _call,\n        address _sponsor,\n        address _feeToken,\n        uint256 _oneBalanceChainId,\n        bytes calldata _userSignature,\n        uint256 _nativeToFeeTokenXRateNumerator,\n        uint256 _nativeToFeeTokenXRateDenominator,\n        bytes32 _correlationId\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGelatoRelay1BalanceERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n// solhint-disable func-name-mixedcase\ninterface IGelatoRelay1BalanceERC2771Base {\n    function userNonce(address _user) external view returns (uint256);\n\n    function gelato() external view returns (address);\n\n    function SPONSORED_CALL_ERC2771_TYPEHASH() external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IGelatoRelayERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {CallWithERC2771} from \"../types/CallTypes.sol\";\n\ninterface IGelatoRelayERC2771 {\n    event LogCallWithSyncFeeERC2771(\n        address indexed target,\n        bytes32 indexed correlationId\n    );\n\n    function callWithSyncFeeERC2771(\n        CallWithERC2771 calldata _call,\n        address _feeToken,\n        bytes calldata _userSignature,\n        bool _isRelayContext,\n        bytes32 _correlationId\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGelatoRelayERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n// solhint-disable func-name-mixedcase\ninterface IGelatoRelayERC2771Base {\n    function userNonce(address _user) external view returns (uint256);\n\n    function gelato() external view returns (address);\n\n    function CALL_WITH_SYNC_FEE_ERC2771_TYPEHASH()\n        external\n        pure\n        returns (bytes32);\n}\n"
    },
    "contracts/lib/GelatoBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nlibrary GelatoBytes {\n    function calldataSliceSelector(bytes calldata _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function memorySliceSelector(bytes memory _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\n            } else {\n                revert(\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"))\n                );\n            }\n        } else {\n            revert(\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"))\n            );\n        }\n    }\n\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n        returns (string memory)\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\n            } else {\n                return\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"));\n            }\n        } else {\n            return\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"));\n        }\n    }\n}\n"
    },
    "contracts/lib/GelatoCallUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {GelatoBytes} from \"./GelatoBytes.sol\";\n\nlibrary GelatoCallUtils {\n    using GelatoBytes for bytes;\n\n    function revertingContractCall(\n        address _contract,\n        bytes memory _data,\n        string memory _errorMsg\n    ) internal returns (bytes memory returndata) {\n        bool success;\n        (success, returndata) = _contract.call(_data);\n\n        // solhint-disable-next-line max-line-length\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(\n                    isContract(_contract),\n                    string(abi.encodePacked(_errorMsg, \"Call to non contract\"))\n                );\n            }\n        } else {\n            returndata.revertWithError(_errorMsg);\n        }\n    }\n\n    // solhint-disable-next-line max-line-length\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n}\n"
    },
    "contracts/lib/GelatoString.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nlibrary GelatoString {\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\n        internal\n        pure\n    {\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\n    }\n\n    function prefix(string memory _second, string memory _first)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(abi.encodePacked(_first, _second));\n    }\n\n    function suffix(string memory _first, string memory _second)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(abi.encodePacked(_first, _second));\n    }\n}\n"
    },
    "contracts/lib/GelatoTokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary GelatoTokenUtils {\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : SafeERC20.safeTransfer(IERC20(_token), _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "contracts/types/CallTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n// Sponsored relay call\nstruct SponsoredCall {\n    uint256 chainId;\n    address target;\n    bytes data;\n}\n\n// Relay call with user signature verification for ERC 2771 compliance\nstruct CallWithERC2771 {\n    uint256 chainId;\n    address target;\n    bytes data;\n    address user;\n    uint256 userNonce;\n    uint256 userDeadline;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "mode": "3"
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}