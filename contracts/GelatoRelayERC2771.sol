// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IGelatoRelayERC2771} from "./interfaces/IGelatoRelayERC2771.sol";
import {IGelato1Balance} from "./interfaces/IGelato1Balance.sol";
import {GelatoRelayERC2771Base} from "./abstract/GelatoRelayERC2771Base.sol";
import {GelatoCallUtils} from "./lib/GelatoCallUtils.sol";
import {GelatoTokenUtils} from "./lib/GelatoTokenUtils.sol";
import {CallWithERC2771} from "./types/CallTypes.sol";
import {
    _encodeERC2771Context,
    _encodeFeeCollectorERC2771,
    _encodeRelayContextERC2771
} from "@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol";
import {
    _getFeeCollectorRelayContext,
    _getFeeRelayContext
} from "@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol";
import {
    __getFeeCollector
} from "@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol";

/// @title  Gelato Relay contract
/// @notice This contract deals with synchronous payments and Gelato 1Balance payments
/// @dev    This contract must NEVER hold funds!
/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here
// solhint-disable-next-line max-states-count
contract GelatoRelayERC2771 is
    IGelatoRelayERC2771,
    IGelato1Balance,
    GelatoRelayERC2771Base
{
    using GelatoCallUtils for address;
    using GelatoTokenUtils for address;

    //solhint-disable-next-line const-name-snakecase
    string public constant name = "GelatoRelayERC2771";
    //solhint-disable-next-line const-name-snakecase
    string public constant version = "1";

    // solhint-disable-next-line no-empty-blocks
    constructor(address _gelato) GelatoRelayERC2771Base(_gelato) {}

    /// @notice Relay call with Synchronous Payment
    /// @notice The target contract pays Gelato during the call forward
    /// @dev    This is the most straightforward use case, and `transfer` handles token payments.
    /// @param _call Relay call data packed into CallWithERC2771 struct
    /// @param _isRelayContext true: all relay context encoding, false: only feeCollector encoding
    /// @param _correlationId Unique task identifier generated by gelato
    // solhint-disable-next-line function-max-lines
    function callWithSyncFeeERC2771(
        CallWithERC2771 calldata _call,
        address _feeToken,
        bytes calldata _userSignature,
        bool _isRelayContext,
        bytes32 _correlationId
    ) external onlyGelato {
        // CHECKS
        _requireChainId(
            _call.chainId,
            "GelatoRelayERC2771.callWithSyncFeeERC2771:"
        );

        uint256 storedUserNonce = userNonce[_call.user];

        // For the user, we enforce nonce ordering
        _requireUserBasics(
            _call.userNonce,
            storedUserNonce,
            _call.userDeadline,
            "GelatoRelayERC2771.callWithSyncFeeERC2771:"
        );

        bytes32 domainSeparator = _getDomainSeparator();

        // Verify user's signature
        _requireCallWithSyncFeeERC2771Signature(
            domainSeparator,
            _call,
            _userSignature,
            _call.user
        );

        // EFFECTS
        userNonce[_call.user] = storedUserNonce + 1;

        // INTERACTIONS
        _isRelayContext
            ? _call.target.revertingContractCall(
                _encodeRelayContextERC2771(
                    _call.data,
                    _getFeeCollectorRelayContext(),
                    _feeToken,
                    _getFeeRelayContext(),
                    _call.user
                ),
                "GelatoRelayERC2771.callWithSyncFeeERC2771:"
            )
            : _call.target.revertingContractCall(
                _encodeFeeCollectorERC2771(
                    _call.data,
                    __getFeeCollector(),
                    _call.user
                ),
                "GelatoRelayERC2771.callWithSyncFeeERC2771:"
            );

        emit LogCallWithSyncFeeERC2771(_call.target, _correlationId);
    }

    /// @notice Relay call + One Balance payment with _msgSender user signature verification
    /// @dev    Payment is handled with off-chain accounting using Gelato's 1Balance system
    /// @dev    The userNonce abstraction does not support multiple calls (call concurrency)
    /// @dev    Apps that need concurrent user calls will need to implement multi-calling
    /// @dev    on their end via encoding into _call.data.
    /// @param _call Relay call data packed into CallWithERC2771 struct
    /// @param _userSignature EIP-712 compliant signature from _call.user
    /// @param  _nativeToFeeTokenXRateNumerator Exchange rate numerator
    /// @param  _nativeToFeeTokenXRateDenominator Exchange rate denominator
    /// @param _correlationId Unique task identifier generated by gelato
    // solhint-disable-next-line function-max-lines
    function sponsoredCallERC2771(
        CallWithERC2771 calldata _call,
        address _sponsor,
        address _feeToken,
        uint256 _oneBalanceChainId,
        bytes calldata _userSignature,
        uint256 _nativeToFeeTokenXRateNumerator,
        uint256 _nativeToFeeTokenXRateDenominator,
        bytes32 _correlationId
    ) external onlyGelato {
        // CHECKS
        _requireChainId(
            _call.chainId,
            "GelatoRelayERC2771.sponsoredCallERC2771:"
        );

        uint256 storedUserNonce = userNonce[_call.user];

        // For the user, we enforce nonce ordering
        _requireUserBasics(
            _call.userNonce,
            storedUserNonce,
            _call.userDeadline,
            "GelatoRelayERC2771.sponsoredCallERC2771:"
        );

        bytes32 domainSeparator = _getDomainSeparator();

        // Verify user's signature
        _requireSponsoredCallERC2771Signature(
            domainSeparator,
            _call,
            _userSignature,
            _call.user
        );

        // EFFECTS
        userNonce[_call.user] = storedUserNonce + 1;

        // INTERACTIONS
        _call.target.revertingContractCall(
            _encodeERC2771Context(_call.data, _call.user),
            "GelatoRelayERC2771.sponsoredCallERC2771:"
        );

        emit LogUseGelato1Balance(
            _sponsor,
            _call.target,
            _feeToken,
            _oneBalanceChainId,
            _nativeToFeeTokenXRateNumerator,
            _nativeToFeeTokenXRateDenominator,
            _correlationId
        );
    }

    //solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32) {
        return _getDomainSeparator();
    }

    function _getDomainSeparator() internal view returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    keccak256(
                        bytes(
                            //solhint-disable-next-line max-line-length
                            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
                        )
                    ),
                    keccak256(bytes(name)),
                    keccak256(bytes(version)),
                    block.chainid,
                    address(this)
                )
            );
    }
}
